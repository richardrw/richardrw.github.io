<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Richard‘s Blog</title>
  <icon>https://www.gravatar.com/avatar/a426ef5f9b38de213a4373837416fea8</icon>
  <subtitle>记录敲码过程中遇到的细节和问题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://richardrw.github.io/"/>
  <updated>2017-12-31T04:15:22.000Z</updated>
  <id>https://richardrw.github.io/</id>
  
  <author>
    <name>Richard</name>
    <email>weichang321@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2017年结语</title>
    <link href="https://richardrw.github.io/2017/12/31/2017%E5%B9%B4%E7%BB%93%E8%AF%AD/"/>
    <id>https://richardrw.github.io/2017/12/31/2017年结语/</id>
    <published>2017-12-31T04:05:16.000Z</published>
    <updated>2017-12-31T04:15:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>《Flask Web开发——基于Python的Web应用开发实战》已经赶在今年结束之前看完了，笔记也做到了第十四章，后面的章节就不做了，因为最后一部分与开发的关系不大。根据当时的笔记记录，我是从2017年11月13日开始看《Flask Web开发》的，到今天已经是一个半月了。当初在读的时候发现进度有点慢，因为同一章的内容我至少要过三遍。一遍是第一次阅读，一遍是敲代码实现书中案例，一遍是做笔记。三遍下来平均每章要三天才能过完（因为平时只有晚上才有时间），当时也想过不写笔记了，但是想起自己当初想要弄一个《把Flask Web开发读薄系列》，于是就坚持了下来。通过这一个半月以来的学习，对阅读书籍、阅读代码的方式还是有些收获的。</p><h1 id="看代码要先有“大局观”"><a href="#看代码要先有“大局观”" class="headerlink" title="看代码要先有“大局观”"></a>看代码要先有“大局观”</h1><p>看代码时尽量把自己的头抬起来，使自己的眼睛焦点不在一个个单词上。要先有大局观，把整段代码映入眼帘中，浏览个大概，初步判断该段代码要想实现一个什么样的功能，然后再把视野缩小到一个或多个函数段或特定的几行，看看大概的实现逻辑时怎么样的，最后把视野放到几行或一行上，看看调用了什么方法。中间把视野放到函数段这一步可以根据代码量的多少来决定是否循环这一步，直到视野一步一步地缩小到一定小的范围。切记，看一段代码，绝不能像阅读文章那样一行一行地从左往右一个词一个词地去看，因为这样会使你纠结于方法的作用（如果中途碰到了你不懂的方法，你很容易纠结在此，这样也就很难读下去了），总之阅读代码一定要先有“大局观”。</p><h1 id="学会异常查找和处理"><a href="#学会异常查找和处理" class="headerlink" title="学会异常查找和处理"></a>学会异常查找和处理</h1><p>运行代码，总避免不了出现异常。要处理异常，要先学会看异常信息，根据抛出来的异常信息可以先看看最后的信息是什么，是什么错误；然后从最初的地方开始寻找，找出哪个文件先出错了，错误的信息是什么；接着再往下找，找到一下个出错的文件，如果没有，就看看往下的异常信息说了什么，结合最后抛出的异常信息文本，一步一步找到问题所在。</p><h1 id="阅读要有耐心"><a href="#阅读要有耐心" class="headerlink" title="阅读要有耐心"></a>阅读要有耐心</h1><p>不知大家是否有这个现象：一本书，大概前1/4和后1/4会读的很顺很快，中间的1/2往往是最耗时间最耗精力的。很多时候如果没有足够的耐心，当阅读往1/4多一点的时候就会发现进度比之前慢了，已看完的页数的增加速度比之前慢了一大截，由此很容易出现急躁的心情，进而就很难再看下去了。对于这种情况，我的做法很简单：在开始阅读之前告诉自己，这本书我将采用“二八法则”，用20%的时间去阅读前后部分，用80%的时间取阅读中间部分。这样一来就等同于做了阅读时间安排计划以及给了自己心理暗示，到中间阅读进度变缓时前后的“进度差”不会就给心理造成太大的伤害，因为我之前已经初步预估了时间做了安排，这一部分我将花费更多的时间，完全符合预期和计划，可以接受，这样我就可以耐心的继续往下阅读，避免了急躁的心情了。</p><p>最后我想分享一些关于人生的想法。这些想法是前天迎春长跑后取朋友的店里完娃娃机得出来的。</p><h1 id="一蹴而就是不大现实的，成功是一步步得来的"><a href="#一蹴而就是不大现实的，成功是一步步得来的" class="headerlink" title="一蹴而就是不大现实的，成功是一步步得来的"></a>一蹴而就是不大现实的，成功是一步步得来的</h1><p>为什么这么说？先来说说故事吧。那天我玩娃娃机的时候，我发现，要想一次就能把娃娃夹出来是不大现实的，你要一步一步地把你想要的那只娃娃一次一次地靠近洞口，当娃娃离洞口比较近时，你的容错率也就变大了，因为你除了一步把娃娃夹到洞口外，还可以即使夹不住也能依靠掉下来的惯性滚到洞口，这样你成功夹到娃娃的概率就大很多。相反，同行的一些朋友，在一台娃娃机夹了4-5次还是失败，就认为这台机器不行，于是换了台机器重新开始，再遇到4-5次夹不到，又换。如此一来，我想成功的概率是最低的，每一台机器你都要重新适应它的“力度”，重新校准自己的操作，这很浪费自我资源（游戏币）。你要懂得一步一步来，就好像打桌球，很多情况下一杆进洞是不大可能的，此时你就要学会“做局”，每一杆打出去，都要达到即使不进洞，也比上次更靠近洞口，那么下一次你成功的机会就更大了。</p><p>同理，我想现实世界也是一样的情况，很多时候我们都不能一蹴而就，一步登天，一次就成功，在这种情况下要学会坚持目标，认定“那只你想要的娃娃”，把自己比作娃娃机里的娃娃，让自己一步一步地往“洞口”靠近，如此操作，你成功的概率也就会越来越大。</p><h1 id="失败是占多数的，成功是少数的"><a href="#失败是占多数的，成功是少数的" class="headerlink" title="失败是占多数的，成功是少数的"></a>失败是占多数的，成功是少数的</h1><p>就如娃娃机那样，在你成功夹起娃娃前的那些操作，都是失败的。通过这个例子，我们要看到两点：一是生活中我们大多数情况下都是失败的，不用对自己太苛刻，要学会接纳不成功的自己，放过自己。二是要让失败有点价值。虽然说在夹起娃娃之前的那些操作都是失败的，但它们都失败的有价值，因为从是否能夹到娃娃角度看，这些失败是肯定的，因为它们都夹不出娃娃来；但从是否能“做局”让下次成功概率更大，这些失败很多都是否定的，因为大多数情况下它们都能让你“做局”成功，让你更靠近洞口。所以，尽管人生大多数都是失败的，我们是否应该由着它失败呢？不是的，我们要让失败们都有一些价值，只要能让我们更靠近”洞口“的失败，都不算太失败。</p><p>2017年过完今天就结束了，在这一年里，我阅读了哪些书籍？</p><ul><li>《当我谈跑步时 我谈些什么》</li><li>《你只是看起来很努力》</li><li>《写作这回事——创作生涯回忆录》</li><li>《我们仨》</li><li>《穷查理宝典》</li><li>《Head First Python》</li><li>《Python网络数据采集》</li><li>《Flask Web开发》</li><li>《数据之美》</li><li>《HTML、CSS菜鸟教程（网络）》</li></ul><p>2017年过去了，我学到了什么？</p><ul><li style="list-style: none"><input type="checkbox" checked> Git</li><li style="list-style: none"><input type="checkbox" checked> HTML、CSS基本概念</li><li style="list-style: none"><input type="checkbox" checked> Python爬虫</li><li style="list-style: none"><input type="checkbox" checked> Flask Web开发</li></ul><p>咋一看，2017年收获还是挺充实的。2018年里，要保持阅读习惯，多阅读多学习，对周围事物抱有好奇心和新鲜感，树立终身学习态度。</p><p>—— 窗台上的听风者  Richrad<br>      2017年12月31日</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《Flask Web开发——基于Python的Web应用开发实战》已经赶在今年结束之前看完了，笔记也做到了第十四章，后面的章节就不做了，因为最后一部分与开发的关系不大。根据当时的笔记记录，我是从2017年11月13日开始看《Flask Web开发》的，到今天已经是一个半月了
      
    
    </summary>
    
    
      <category term="2017" scheme="https://richardrw.github.io/tags/2017/"/>
    
      <category term="总结" scheme="https://richardrw.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>把《Flask Web开发》读薄系列之第十四章 应用编程接口</title>
    <link href="https://richardrw.github.io/2017/12/30/%E6%8A%8A%E3%80%8AFlask%20Web%E5%BC%80%E5%8F%91%E3%80%8B%E8%AF%BB%E8%96%84%E7%B3%BB%E5%88%97%E4%B9%8B%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0%20%E5%BA%94%E7%94%A8%E7%BC%96%E7%A8%8B%E6%8E%A5%E5%8F%A3/"/>
    <id>https://richardrw.github.io/2017/12/30/把《Flask Web开发》读薄系列之第十四章 应用编程接口/</id>
    <published>2017-12-30T15:32:41.000Z</published>
    <updated>2017-12-30T15:33:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="14-1-REST简介"><a href="#14-1-REST简介" class="headerlink" title="14.1 REST简介"></a>14.1 REST简介</h1><h2 id="14-1-1-资源就是一切"><a href="#14-1-1-资源就是一切" class="headerlink" title="14.1.1 资源就是一切"></a>14.1.1 资源就是一切</h2><p><strong>资源</strong>是REST架构方式的核心概念。在博客程序中，用户、文章、评论等都是资源。</p><p>每个资源都要<strong>使用唯一的URL表示</strong>。如某一篇文章URL：<code>/api/posts/1234</code>。</p><p>某一类资源的集合也要有个URL。如文章集合URL：<code>api/posts/</code>。</p><p>API还可以为某一类资源的逻辑子集合定义集合URL。如某一篇文章的所有评论URL：<code>/api/posts/1234/comments/</code>。</p><p><strong>注意</strong>：<br>请求的URL末端没有<code>/</code>，路由没有<code>/</code>，则不重定向；<br>请求的URL末端没有<code>/</code>，路由有<code>/</code>，则重定向转向末端带<code>/</code>的URL。</p><h2 id="14-1-2-请求方法"><a href="#14-1-2-请求方法" class="headerlink" title="14.1.2 请求方法"></a>14.1.2 请求方法</h2><p>在资源URL上发送请求，使用<strong>请求方法</strong>表示期望执行的操作。</p><p>表14-1 REST架构API中使用的HTTP请求方法</p><table><thead><tr><th>请求方法</th><th>目标</th><th>说明</th><th>状态码</th></tr></thead><tbody><tr><td>GET</td><td>单个资源的URL</td><td>获取目标资源</td><td>200</td></tr><tr><td>GET</td><td>资源集合的URL</td><td>获取资源的集合（如果服务器实现了分页，就是一页中的资源）</td><td>200</td></tr><tr><td>POST</td><td>资源集合的URL</td><td>创建新资源，并将其加入目标集合。服务器为新资源指派URL， 并在响应的Location首部中返回</td><td>201</td></tr><tr><td>PUT</td><td>单个资源的URL</td><td>修改一个现有资源。如果客户端能为资源指派URL，还可用来创建新资源</td><td>200</td></tr><tr><td>DELETE</td><td>单个资源的URL</td><td>删除一个资源</td><td>200</td></tr><tr><td>DELETE</td><td>资源集合的URL</td><td>删除目标集合中的所有资源</td><td>200</td></tr></tbody></table><h2 id="14-1-3-请求和响应主体"><a href="#14-1-3-请求和响应主体" class="headerlink" title="14.1.3 请求和响应主体"></a>14.1.3 请求和响应主体</h2><p>请求和响应中<code>Content-Type</code>首部用于指明主体中资源的<strong>编码方式</strong>。常用的编码方式是JavaScript对象表示法（JSON）和可拓展标记语言（XML）。</p><h2 id="14-1-4-版本"><a href="#14-1-4-版本" class="headerlink" title="14.1.4 版本"></a>14.1.4 版本</h2><p>Web服务的容错能力要比一般的Web程序大，而且还要保证旧版客户端能继续使用（因为有些客服端如手机客户端，没有进行升级，但也要保证其能正常使用）。处理方法是使用<strong>版本</strong>区分Web服务所处理的URL。例如首次发布的博客Web服务可以通过<code>/api/v1.0/posts/</code>提供文章集合。</p><h1 id="14-2-使用Flask提供REST-Web服务"><a href="#14-2-使用Flask提供REST-Web服务" class="headerlink" title="14.2 使用Flask提供REST Web服务"></a>14.2 使用Flask提供REST Web服务</h1><p>使用Flask创建REST Web服务很简单，使用<code>route()</code>修饰器及其<code>methods</code>可选参数即可。处理JSON数据也同样简单，通过<code>request.json</code>这个字典获取即可。返回包含JSON的响应只用使用Flask提供的<code>jsonify()</code>辅助函数<strong>从Python字典中生成JSON</strong>即可。</p><h2 id="14-2-1-创建API蓝本"><a href="#14-2-1-创建API蓝本" class="headerlink" title="14.2.1 创建API蓝本"></a>14.2.1 创建API蓝本</h2><p>API蓝本结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">|-flasky</div><div class="line">  |-app/</div><div class="line">    |-api_1_0 # 可选</div><div class="line">      |-__init__.py</div><div class="line">      |-users.py</div><div class="line">      |-posts.py</div><div class="line">      |-comments.py</div><div class="line">      |-authentication.py</div><div class="line">      |-errors.py</div><div class="line">      |-decorators.py</div></pre></td></tr></table></figure><h3 id="1-在app-api-init-py中构造API蓝本："><a href="#1-在app-api-init-py中构造API蓝本：" class="headerlink" title="1. 在app/api/__init__.py中构造API蓝本："></a>1. 在<code>app/api/__init__.py</code>中构造API蓝本：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from flask import Blueprint</div><div class="line"></div><div class="line">api = Blueprint(&apos;api&apos;, __name__)</div><div class="line"></div><div class="line">from app.api import authentication, posts, users, comments, errors</div></pre></td></tr></table></figure><h3 id="2-在app-init-py中注册API蓝本："><a href="#2-在app-init-py中注册API蓝本：" class="headerlink" title="2. 在app/__init__.py中注册API蓝本："></a>2. 在<code>app/__init__.py</code>中注册API蓝本：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">def create_app(config_name):</div><div class="line">    # ...</div><div class="line">    from app.api import api as api_blueprint</div><div class="line">    app.register_blueprint(api_blueprint, url_prefix=&apos;/api/v1.0&apos;)</div><div class="line">    # ...</div></pre></td></tr></table></figure><h2 id="14-2-5-资源和JSON的序列化转换"><a href="#14-2-5-资源和JSON的序列化转换" class="headerlink" title="14.2.5 资源和JSON的序列化转换"></a>14.2.5 资源和JSON的序列化转换</h2><h3 id="3-在app-models-py中定义把文章、用户转换成JSON格式的序列化字典的方法："><a href="#3-在app-models-py中定义把文章、用户转换成JSON格式的序列化字典的方法：" class="headerlink" title="3. 在app/models.py中定义把文章、用户转换成JSON格式的序列化字典的方法："></a>3. 在<code>app/models.py</code>中定义把文章、用户转换成JSON格式的序列化<strong>字典</strong>的方法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">class Post(db.Model):</div><div class="line">    # ...</div><div class="line">    def to_json(self):</div><div class="line">        json_psot = &#123;</div><div class="line">            &apos;url&apos;: url_for(&apos;api.get_post&apos;, id=self.id),</div><div class="line">            &apos;body&apos;: self.body,</div><div class="line">            &apos;body_html&apos;: self.body_html,</div><div class="line">            &apos;timestamp&apos;: self.timestamp,</div><div class="line">            &apos;author_url&apos;: url_for(&apos;api.get_user&apos;, id=self.author_id),</div><div class="line">            &apos;comments_url&apos;: url_for(&apos;api.get_post_commnets&apos;, id=self.id),</div><div class="line">            &apos;comment_count&apos;: self.comments.count()</div><div class="line">        &#125;</div><div class="line">        return json_psot</div><div class="line"></div><div class="line">class User(UserMixin, db.Model):</div><div class="line">    # ...</div><div class="line">    def to_json(self):</div><div class="line">        json_user = &#123;</div><div class="line">            &apos;url&apos;: url_for(&apos;api.get_user&apos;, id=self.id),</div><div class="line">            &apos;username&apos;: self.username,</div><div class="line">            &apos;member_since&apos;: self.member_since,</div><div class="line">            &apos;last_seen&apos;: self.last_seen,</div><div class="line">            &apos;posts_url&apos;: url_for(&apos;api.get_user_posts&apos;, id=self.id),</div><div class="line">            &apos;followed_posts_url&apos;: url_for(&apos;api.get_user_followed_posts&apos;, id=self.id),</div><div class="line">            &apos;post_count&apos;: self.posts.count()</div><div class="line">        &#125;</div><div class="line">        return json_user</div></pre></td></tr></table></figure><h3 id="4-在app-models-py中定义从JSON格式数据创建博客文章的方法："><a href="#4-在app-models-py中定义从JSON格式数据创建博客文章的方法：" class="headerlink" title="4. 在app/models.py中定义从JSON格式数据创建博客文章的方法："></a>4. 在<code>app/models.py</code>中定义从JSON格式数据创建博客文章的方法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from app.api.exceptions import ValidationError</div><div class="line"># ...</div><div class="line"></div><div class="line">class Post(db.Model):</div><div class="line">    # ...</div><div class="line">    @staticmethod</div><div class="line">    def from_json(json_post):</div><div class="line">        body = json_post.get(&apos;body&apos;)</div><div class="line">        if body is None or body == &apos;&apos;:</div><div class="line">            raise ValidationError(&apos;post does not have a body&apos;)   # 抛出异常</div><div class="line">        return Post(body=body)</div></pre></td></tr></table></figure><h3 id="5-在app-exceptions-py中定义ValidationError类："><a href="#5-在app-exceptions-py中定义ValidationError类：" class="headerlink" title="5. 在app/exceptions.py中定义ValidationError类："></a>5. 在<code>app/exceptions.py</code>中定义ValidationError类：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">class ValidationError(ValueError):</div><div class="line">    pass</div></pre></td></tr></table></figure><p>为了避免在视图函数中编写<strong>捕获</strong>异常的代码，我们可创建一个全局异常处理程序：</p><h3 id="6-在app-api-errors-py中定义API中ValidationError异常的处理程序："><a href="#6-在app-api-errors-py中定义API中ValidationError异常的处理程序：" class="headerlink" title="6. 在app/api/errors.py中定义API中ValidationError异常的处理程序："></a>6. 在<code>app/api/errors.py</code>中定义API中ValidationError异常的处理程序：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 定义API中ValidationError错误处理程序</div><div class="line">@api.errorhandler(ValidationError)</div><div class="line">def validation_error(e):</div><div class="line">    return bad_request(e.args[0])</div></pre></td></tr></table></figure><ul><li><code>bad_request</code>方法在第11步中定义。</li></ul><h2 id="14-2-6-实现资源端点-amp-14-2-7-分页大型资源集合"><a href="#14-2-6-实现资源端点-amp-14-2-7-分页大型资源集合" class="headerlink" title="14.2.6 实现资源端点 &amp; 14.2.7 分页大型资源集合"></a>14.2.6 实现资源端点 &amp; 14.2.7 分页大型资源集合</h2><p>GET请求往往是最简单的，因为它们只返回信息，无需修改信息。</p><h3 id="7-在app-api-posts-py中定义分页博客文章资源的GET请求："><a href="#7-在app-api-posts-py中定义分页博客文章资源的GET请求：" class="headerlink" title="7. 在app/api/posts.py中定义分页博客文章资源的GET请求："></a>7. 在<code>app/api/posts.py</code>中定义分页博客文章资源的GET请求：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">from flask import jsonify, request, g, url_for, current_app</div><div class="line">from app import db</div><div class="line">from app.models import Post, Permission</div><div class="line">from app.api import api</div><div class="line">from app.api.decorators import permission_required</div><div class="line">from app.api.errors import forbidden</div><div class="line"></div><div class="line"></div><div class="line"># 获取分页文章集合</div><div class="line">@api.route(&apos;/posts/&apos;)</div><div class="line">def get_posts():</div><div class="line">    page = request.args.get(&apos;page&apos;, 1, type=int)</div><div class="line">    pagination = Post.query.paginate(page,</div><div class="line">                                     per_page=current_app.config[&apos;FLASKY_POSTS_PER_PAGE&apos;],</div><div class="line">                                     error_out=False)</div><div class="line">    posts = pagination.items</div><div class="line">    prev = None</div><div class="line">    if pagination.has_prev:</div><div class="line">        prev = url_for(&apos;api.get_posts&apos;, page=page-1, _external=True)</div><div class="line">    next = None</div><div class="line">    if pagination.has_next:</div><div class="line">        next = url_for(&apos;api.get_posts&apos;, page=page+1, _external=True)</div><div class="line">    return jsonify(&#123;</div><div class="line">        &apos;posts&apos;: [post.to_json() for post in posts],</div><div class="line">        &apos;perv&apos;: prev,</div><div class="line">        &apos;next&apos;: next,</div><div class="line">        &apos;count&apos;: pagination.total</div><div class="line">    &#125;)</div><div class="line"></div><div class="line"></div><div class="line"># 获取某一篇文章</div><div class="line">@api.route(&apos;/posts/&lt;int:id&gt;&apos;)</div><div class="line">def get_post(id):</div><div class="line">    post = Post.query.get_or_404(id)</div><div class="line">    return jsonify(post.to_json())</div></pre></td></tr></table></figure><h3 id="8-在app-api-posts-py中定义博客文章资源的POST请求："><a href="#8-在app-api-posts-py中定义博客文章资源的POST请求：" class="headerlink" title="8. 在app/api/posts.py中定义博客文章资源的POST请求："></a>8. 在<code>app/api/posts.py</code>中定义博客文章资源的POST请求：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">@api.route(&apos;/posts/&apos;, methods=[&apos;POST&apos;])</div><div class="line">@permission_required(Permission.WRITE_ARTICLES)</div><div class="line">def new_post():</div><div class="line">    post = Post.from_json(request.json)</div><div class="line">    post.author = g.current_user</div><div class="line">    db.session.add(post)</div><div class="line">    db.session.commit()</div><div class="line">    return jsonify(post.to_json()), 201, &#123;&apos;Location&apos;: url_for(&apos;api.get_post&apos;, id=post.id)&#125;</div></pre></td></tr></table></figure><h3 id="9-在app-api-posts-py中定义博客文章资源的PUT请求："><a href="#9-在app-api-posts-py中定义博客文章资源的PUT请求：" class="headerlink" title="9. 在app/api/posts.py中定义博客文章资源的PUT请求："></a>9. 在<code>app/api/posts.py</code>中定义博客文章资源的PUT请求：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">@api.route(&apos;/posts/&lt;int:id&gt;&apos;, methods=[&apos;PUT&apos;])</div><div class="line">@permission_required(Permission.WRITE_ARTICLES)</div><div class="line">def edit_post(id):</div><div class="line">    post = Post.query.get_or_404(id)</div><div class="line">    if g.current_user != post.author and \</div><div class="line">            not g.current_user.can(Permission.ADMINISTER):</div><div class="line">        return forbidden(&apos;Insufficient permissions&apos;)</div><div class="line">    post.body = request.json.get(&apos;body&apos;, post.body)</div><div class="line">    db.session.add(post)</div><div class="line">    db.session.commit()</div><div class="line">    return jsonify(post.to_json())</div></pre></td></tr></table></figure><p>从第6-8步中用到了<code>permission_required</code>修饰器，下面看看<code>permission_required</code>修饰器如何定义：</p><h3 id="10-在app-api-decoratiors-py中定义permission-required修饰器："><a href="#10-在app-api-decoratiors-py中定义permission-required修饰器：" class="headerlink" title="10. 在app/api/decoratiors.py中定义permission_required修饰器："></a>10. 在<code>app/api/decoratiors.py</code>中定义permission_required修饰器：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">from functools import wraps</div><div class="line">from flask import g</div><div class="line">from app.api.errors import forbidden</div><div class="line"></div><div class="line"></div><div class="line">def permission_required(permission):</div><div class="line">    def decorator(func):</div><div class="line">        @wraps(func)</div><div class="line">        def decorated_function(*args, **kwargs):</div><div class="line">            if not g.current_user.can(permission):</div><div class="line">                return forbidden(&apos;Insufficient permissions&apos;)</div><div class="line">            return func(*args, **kwargs)</div><div class="line">        return decorated_function</div><div class="line">    return decorator</div></pre></td></tr></table></figure><p>从第6-9步中都用到了<code>app.api.errors.forbidden</code>方法，下面看看<code>app/api/errors.py</code>文件如何定义：</p><h3 id="11-在app-api-errors-py中定义400、401、403状态码的错误处理程序："><a href="#11-在app-api-errors-py中定义400、401、403状态码的错误处理程序：" class="headerlink" title="11. 在app/api/errors.py中定义400、401、403状态码的错误处理程序："></a>11. 在<code>app/api/errors.py</code>中定义400、401、403状态码的错误处理程序：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">from flask import jsonify</div><div class="line">from app.exceptions import ValidationError</div><div class="line">from app.api import api</div><div class="line"></div><div class="line"></div><div class="line"># 无效请求</div><div class="line">def bad_request(message):</div><div class="line">    response = jsonify(&#123;&apos;error&apos;: &apos;bad request&apos;, &apos;message&apos;: message&#125;)</div><div class="line">    response.status_code = 400</div><div class="line">    return response</div><div class="line"></div><div class="line"></div><div class="line"># 未登录</div><div class="line">def unauthorized(message):</div><div class="line">    response = jsonify(&#123;&apos;error&apos;: &apos;unauthorizde&apos;, &apos;message&apos;: message&#125;)</div><div class="line">    response.status_code = 401</div><div class="line">    return response</div><div class="line"></div><div class="line"></div><div class="line"># 禁止访问</div><div class="line">def forbidden(message):</div><div class="line">    response = jsonify(&#123;&apos;error&apos;: &apos;forbidden&apos;, &apos;message&apos;: message&#125;)</div><div class="line">    response.status_code = 403</div><div class="line">    return response</div></pre></td></tr></table></figure><h2 id="14-2-2-错误处理"><a href="#14-2-2-错误处理" class="headerlink" title="14.2.2 错误处理"></a>14.2.2 错误处理</h2><p>为统一错误处理程序的响应格式，需要修改<code>app/main/errors.py</code>，使其<strong>内容协商</strong>。</p><p>为所有客户端生成适当响应的一种方法是，在错误处理程序中，根据客户端请求的格式改写响应，这种技术称为<strong>内容协商</strong>。</p><h3 id="12-在app-main-errors-py中使用HTTP内容协商处理错误："><a href="#12-在app-main-errors-py中使用HTTP内容协商处理错误：" class="headerlink" title="12. 在app/main/errors.py中使用HTTP内容协商处理错误："></a>12. 在<code>app/main/errors.py</code>中使用HTTP内容协商处理错误：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">from flask import render_template, request, jsonify</div><div class="line">from . import main</div><div class="line"></div><div class="line"></div><div class="line">@main.app_errorhandler(403)</div><div class="line">def forbidden(e):</div><div class="line">    # 判断请求的首部Accept字段（Werkzeug将其解码为requset.accept_mimetypes）接受哪种响应格式（json或xml）</div><div class="line">    if request.accept_mimetypes.accept_json and \</div><div class="line">        not request.accept_mimetypes.accept_html:</div><div class="line">        response = jsonify(&#123;&apos;error&apos;: &apos;forbidden&apos;&#125;)</div><div class="line">        response.status_code = 403</div><div class="line">        return response</div><div class="line">    return render_template(&apos;403.html&apos;), 403</div><div class="line"></div><div class="line"></div><div class="line">@main.app_errorhandler(404)</div><div class="line">def page_not_found(e):</div><div class="line">    if request.accept_mimetypes.accept_json and \</div><div class="line">        not request.accept_mimetypes.accept_html:</div><div class="line">        response = jsonify(&#123;&apos;error&apos;: &apos;not found&apos;&#125;)</div><div class="line">        response.status_code = 404</div><div class="line">        return response</div><div class="line">    return render_template(&apos;404.html&apos;), 404</div><div class="line"></div><div class="line"></div><div class="line">@main.app_errorhandler(500)</div><div class="line">def internal_server_error(e):</div><div class="line">    if request.accept_mimetypes.accept_json and \</div><div class="line">        not request.accept_mimetypes.accept_html:</div><div class="line">        response = jsonify(&#123;&apos;error&apos;: &apos;internal server error&apos;&#125;)</div><div class="line">        response.status_code = 500</div><div class="line">        return response</div><div class="line">    return render_template(&apos;500.html&apos;), 500</div></pre></td></tr></table></figure><ul><li>该例的错误处理程序会检查Accept请求首部（Werkzeug将其解码为requset.accept_mimetypes），根据首部的值决定客户端期望接受的响应格式（JSON或XML）。浏览器一般不限制响应的格式，所以只为只接受JSON而不接受HTML格式的客户端生成JSON格式响应。</li></ul><p>表14-2 API返回的常见HTTP状态码</p><table><thead><tr><th>状态码</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>200</td><td>OK（成功）</td><td>请求成功完成</td></tr><tr><td>201</td><td>Created（已创建）</td><td>请求成功完成并创建了一个新资源</td></tr><tr><td>400</td><td>Bad request（坏请求）</td><td>请求不可用或不一致</td></tr><tr><td>401</td><td>Unauthorized（未授权）</td><td>请求未包含认证信息</td></tr><tr><td>403</td><td>Forbidden（禁止）</td><td>请求中发送的认证密令无权访问目标</td></tr><tr><td>404</td><td>Notfound（未找到）</td><td>URL对应的资源不存在</td></tr><tr><td>405</td><td>Method not allowed（不允许使用的方法</td><td>指定资源不支持请求使用的方法</td></tr><tr><td>500</td><td>Internal server error（内部服务器错误）</td><td>处理请求的过程中发生意外错误</td></tr></tbody></table><h2 id="14-2-3-使用Flask-HTTPAuth认证用户-amp-14-2-4-基于令牌的认证"><a href="#14-2-3-使用Flask-HTTPAuth认证用户-amp-14-2-4-基于令牌的认证" class="headerlink" title="14.2.3 使用Flask-HTTPAuth认证用户 &amp; 14.2.4 基于令牌的认证"></a>14.2.3 使用Flask-HTTPAuth认证用户 &amp; 14.2.4 基于令牌的认证</h2><p>和普通Web程序一样，Web服务也需要保护信息，确认未经授权的用户无法访问。为此，RIA必须询问用户的登录密令，并将其传给服务器验证。</p><p>REST Web服务的特征之一就是<strong>无状态</strong>，即服务器在两次请求之间不能“记住”客户端的任何信息，客户端发出的请求必须包含所有信息，因此所有请求都必须包含用户密令。</p><p>默认情况下，Flask会把会话保存在客户端的cookie中，因此服务器没有保存任何用户相关信息，都转交给客户端保存了。这种实现方式看起来遵守REST架构的无状态要求，但在REST Web服务中使用cookie有点不现实，因为Web浏览器之外的客户端很难提供对cookie的支持。</p><p>又因为REST架构基于HTTP协议，所以发送密令的最佳方式是使用HTTP认证，基本认证和摘要认证都可以。在HTTP认证中，用户密令包含在请求的Authorization首部中。</p><p>每次请求时，客户端都要发送认证密令，为了避免总是发送敏感信息（认证密令），我们可以提供一种基于令牌的认证方案：客户端（1）先把登录密令发送给一个特殊的URL，从而生成认证令牌；（2）客户端获得令牌后，就可以用令牌代替密令认证请求。</p><h3 id="13-在app-api-authentication-py中初始化Flask-HTTPAuth，并支持令牌验证回调："><a href="#13-在app-api-authentication-py中初始化Flask-HTTPAuth，并支持令牌验证回调：" class="headerlink" title="13. 在app/api/authentication.py中初始化Flask-HTTPAuth，并支持令牌验证回调："></a>13. 在<code>app/api/authentication.py</code>中初始化Flask-HTTPAuth，并支持令牌验证回调：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">from flask import g, jsonify</div><div class="line">from flask_httpauth import HTTPBasicAuth</div><div class="line">from app.models import User</div><div class="line">from app.api import api</div><div class="line">from app.api.errors import unauthorized, forbidden</div><div class="line"></div><div class="line"></div><div class="line">auth = HTTPBasicAuth()</div><div class="line"></div><div class="line"></div><div class="line">@auth.verify_password</div><div class="line">def verify_password(email_or_token, password):</div><div class="line">    # （1）</div><div class="line">    if email_or_token == &apos;&apos;:</div><div class="line">        return False</div><div class="line">    # （2）</div><div class="line">    if password == &apos;&apos;:</div><div class="line">        g.current_user = User.verify_auth_token(email_or_token)</div><div class="line">        g.token_used = True</div><div class="line">        return g.current_user is not None</div><div class="line">    # （3）</div><div class="line">    user = User.query.filter_by(email=email_or_token).first()</div><div class="line">    if not user:</div><div class="line">        return False</div><div class="line">    g.current_user = user</div><div class="line">    g.token_used = False</div><div class="line">    return user.verify_password(password)  # 调用User模型中的verify_password方法</div></pre></td></tr></table></figure><ul><li>Flask-HTTPAuth提供了一个便利的包（<code>HTTPBasicAuth().verify_password</code>），可以把协议的细节隐藏在修饰器中，类似于Flask-Login提供的<code>login_required</code>修饰器。</li><li>由于这种用户认证方法只在API蓝本中使用，所以Flask-HTTPAuth只在蓝本包中初始化，而不像其他扩展那样在程序包中初始化。</li><li>验证回调函数把通过认证的用户保存在Flask的全局对象<code>g</code>中，如此一来，视图函数就能进行访问。</li><li>该例中，第一个参数是电子邮件或认证令牌。（1）如果这个参数为空，则返回False；（2）如果<code>password</code>参数为空，就假定<code>email_or_token</code>参数是认证令牌，按照令牌的方式进行认证；（3）如果两个参数都不为空，就假定使用了电子邮件和密码进行认证。</li><li>为了让视图函数能区分这两种认证方法（电子邮件+密码、认证令牌），我们添加了<code>g.token_used</code>变量。</li></ul><h3 id="14-在app-api-authentication-py中定义生成认证令牌的路由："><a href="#14-在app-api-authentication-py中定义生成认证令牌的路由：" class="headerlink" title="14. 在app/api/authentication.py中定义生成认证令牌的路由："></a>14. 在<code>app/api/authentication.py</code>中定义生成认证令牌的路由：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line"># 定义用于获取密令的路由</div><div class="line">@api.route(&apos;/tokens/&apos;, methods=[&apos;POST&apos;])</div><div class="line">def get_token():</div><div class="line">    if g.current_user.is_anonymous or g.token_used:</div><div class="line">        return unauthorized(&apos;Invalid credentials&apos;)</div><div class="line">    return jsonify(&#123;&apos;token&apos;: g.current_user.generate_auth_token(expiration=3600),</div><div class="line">                    &apos;expiration&apos;: 3600&#125;)</div></pre></td></tr></table></figure><h3 id="15-在app-api-authentication-py中定义Flask-HTTPAuth错误处理程序："><a href="#15-在app-api-authentication-py中定义Flask-HTTPAuth错误处理程序：" class="headerlink" title="15. 在app/api/authentication.py中定义Flask-HTTPAuth错误处理程序："></a>15. 在<code>app/api/authentication.py</code>中定义Flask-HTTPAuth错误处理程序：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">@auth.error_handler</div><div class="line">def auth_error():</div><div class="line">    return unauthorized(&apos;Invalid credentials&apos;)</div></pre></td></tr></table></figure><h3 id="16-在app-api-authentication-py中使得API蓝本所有路由在每次请求前都进行认证："><a href="#16-在app-api-authentication-py中使得API蓝本所有路由在每次请求前都进行认证：" class="headerlink" title="16. 在app/api/authentication.py中使得API蓝本所有路由在每次请求前都进行认证："></a>16. 在<code>app/api/authentication.py</code>中使得API蓝本所有路由在每次请求前都进行认证：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line">@api.before_request</div><div class="line">@auth.login_required</div><div class="line">def before_request():</div><div class="line">    if not g.current_user.is_anonymous and \</div><div class="line">            not g.current_user.confirmed:   # 判断该用户是否已经确认账户</div><div class="line">        return forbidden(&apos;Unconfirmed account&apos;)</div></pre></td></tr></table></figure><p>在第13步中使用到了<code>User.verify_auth_token</code>方法和第14步中使用到了<code>User.generate_auth_token</code>方法，其定义如下：</p><h3 id="17-在app-models-py中定义基于令牌的认证："><a href="#17-在app-models-py中定义基于令牌的认证：" class="headerlink" title="17. 在app/models.py中定义基于令牌的认证："></a>17. 在<code>app/models.py</code>中定义基于令牌的认证：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class User(UserMixin, db.Model):</div><div class="line">    # ...</div><div class="line">    </div><div class="line">    def generate_auth_token(self, exporation):</div><div class="line">        s = Serializer(current_app.confir[&apos;SECRET_KEY&apos;], expires_in=exporation)</div><div class="line">        return s.dumps(&#123;&apos;id&apos;: self.id&#125;).decode(&apos;utf-8&apos;)</div><div class="line"></div><div class="line">    @staticmethod</div><div class="line">    def verify_auth_token(token):</div><div class="line">        s = Serializer(current_app.config[&apos;SECRET_KEY&apos;])</div><div class="line">        try:</div><div class="line">            data = s.loads(token)</div><div class="line">        except:</div><div class="line">            return None</div><div class="line">        return User.query.get(data[&apos;id&apos;])</div></pre></td></tr></table></figure><h2 id="14-2-8-使用HTTPie测试Web服务"><a href="#14-2-8-使用HTTPie测试Web服务" class="headerlink" title="14.2.8 使用HTTPie测试Web服务"></a>14.2.8 使用HTTPie测试Web服务</h2><h3 id="1-安装HTTPie："><a href="#1-安装HTTPie：" class="headerlink" title="1. 安装HTTPie："></a>1. 安装HTTPie：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(venv) $ pip install httpie</div></pre></td></tr></table></figure><h3 id="2-GET请求可按照如下方式发起："><a href="#2-GET请求可按照如下方式发起：" class="headerlink" title="2. GET请求可按照如下方式发起："></a>2. GET请求可按照如下方式发起：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">(venv) $ http --json --auth &lt;email&gt;:&lt;password&gt; GET http://127.0.0.1:5000/api/v1.0/posts</div><div class="line">HTTP/1.0 200 OK</div><div class="line">Content-Length: 7018</div><div class="line">Content-Type: application/json</div><div class="line">Date: Sun, 22 Dec 2013 08:11:24 GMT</div><div class="line">Server: Werkzeug/0.9.4 python/3.6</div><div class="line"></div><div class="line">&#123;</div><div class="line">    &quot;posts&quot;: [</div><div class="line">        ...</div><div class="line">    ],</div><div class="line">    &quot;prev&quot;: null,</div><div class="line">    &quot;next&quot;: &quot;http://127.0.0.1:5000/api/v1.0/posts/?page=2&quot;,</div><div class="line">    &quot;count&quot;: 150</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果API允许匿名用户访问的话，可以这个发起请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(venv) $ http --json --auth : GET http://127.0.0.1:5000/api/v1.0/posts/</div></pre></td></tr></table></figure></p><h3 id="3-发送POST请求创建一篇新博客文章："><a href="#3-发送POST请求创建一篇新博客文章：" class="headerlink" title="3. 发送POST请求创建一篇新博客文章："></a>3. 发送POST请求创建一篇新博客文章：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(venv) $ http --auth &lt;email&gt;:&lt;password&gt; --json POST http://127.0.0.1:5000/api/v1.0/posts/ &quot;body=I&apos;m adding a post from the *command line*.&quot;</div><div class="line">HTTP/1.0 201 CREATED</div><div class="line">Content-Length :360</div><div class="line"># ...</div></pre></td></tr></table></figure><h3 id="4-要想使用认证令牌，可向-api-v1-0-token发送请求："><a href="#4-要想使用认证令牌，可向-api-v1-0-token发送请求：" class="headerlink" title="4. 要想使用认证令牌，可向/api/v1.0/token发送请求："></a>4. 要想使用认证令牌，可向<code>/api/v1.0/token</code>发送请求：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">(venv) $ http --auth &lt;email&gt;:&lt;password&gt; --json GET http://127.0.0.1:5000/api/v1.0/token</div><div class="line">HTTP/1.0 200 OK</div><div class="line">Content-Lenght: 162</div><div class="line">Content-Type: application/json</div><div class="line">Date: Sat, 04 Jan 2017 08:38:47 GMT</div><div class="line">Server: Werkzeug/0.9.4 Python/3.3.3</div><div class="line"></div><div class="line">&#123;</div><div class="line">    &quot;expiration&quot;: 3600,</div><div class="line">    &quot;token&quot;: &quot;eqJpYXQiOjex..............iSFMy...&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="5-在接下来的1小时内，可以用这个令牌访问API，请求时要和空密码一起发送："><a href="#5-在接下来的1小时内，可以用这个令牌访问API，请求时要和空密码一起发送：" class="headerlink" title="5. 在接下来的1小时内，可以用这个令牌访问API，请求时要和空密码一起发送："></a>5. 在接下来的1小时内，可以用这个令牌访问API，请求时要和<strong>空密码</strong>一起发送：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(venv) $ http --json --auth eyJpYXQi.....ISFMy...: GET http://127.0.0.1:5000/api/v1.0/posts/</div></pre></td></tr></table></figure><p>令牌过期后，请求会返回401错误，表示需要重新获取令牌。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;14-1-REST简介&quot;&gt;&lt;a href=&quot;#14-1-REST简介&quot; class=&quot;headerlink&quot; title=&quot;14.1 REST简介&quot;&gt;&lt;/a&gt;14.1 REST简介&lt;/h1&gt;&lt;h2 id=&quot;14-1-1-资源就是一切&quot;&gt;&lt;a href=&quot;#14-1
      
    
    </summary>
    
    
      <category term="Flask" scheme="https://richardrw.github.io/tags/Flask/"/>
    
      <category term="读书笔记" scheme="https://richardrw.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>把《Flask Web开发》读薄系列之第十三章 用户评论</title>
    <link href="https://richardrw.github.io/2017/12/30/%E6%8A%8A%E3%80%8AFlask%20Web%E5%BC%80%E5%8F%91%E3%80%8B%E8%AF%BB%E8%96%84%E7%B3%BB%E5%88%97%E4%B9%8B%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%20%E7%94%A8%E6%88%B7%E8%AF%84%E8%AE%BA/"/>
    <id>https://richardrw.github.io/2017/12/30/把《Flask Web开发》读薄系列之第十三章 用户评论/</id>
    <published>2017-12-30T15:31:14.000Z</published>
    <updated>2017-12-30T15:32:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="13-1-评论在数据库中的表示"><a href="#13-1-评论在数据库中的表示" class="headerlink" title="13.1 评论在数据库中的表示"></a>13.1 评论在数据库中的表示</h1><p>从psots表到comments表是一对多关系，<br>从users表到comments表也是一对多关系。</p><h3 id="1-在app-models-py中定义Comment模型："><a href="#1-在app-models-py中定义Comment模型：" class="headerlink" title="1. 在app/models.py中定义Comment模型："></a>1. 在<code>app/models.py</code>中定义Comment模型：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">class Comment(db.Model):</div><div class="line">    __tablename__ = &apos;comments&apos;</div><div class="line">    id = db.Column(db.Integer, primary_key=True)</div><div class="line">    body = db.Column(db.Text)</div><div class="line">    body_html = db.Column(db.Text)</div><div class="line">    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)</div><div class="line">    disabled = db.Column(db.Boolean)  # 协管员通过该字段查禁不当评论</div><div class="line">    author_id = db.Column(db.Integer, db.ForeignKey(&apos;users.id&apos;))</div><div class="line">    post_is = db.Column(db.Integer, db.ForeignKey(&apos;posts.id&apos;))</div><div class="line"></div><div class="line">    @staticmethod</div><div class="line">    def on_changed_body(target, value, oldvalue, initiator):</div><div class="line">        allowed_tags = [&apos;a&apos;, &apos;abbr&apos;, &apos;acronym&apos;, &apos;b&apos;, &apos;code&apos;, &apos;em&apos;, &apos;i&apos;, &apos;strong&apos;]</div><div class="line">        # 将Markdown源文本转换为合乎需要的HTNL文本</div><div class="line">        target.body_html = bleach.linkify(bleach.clean(</div><div class="line">            markdown(value, output_format=&apos;html&apos;),</div><div class="line">            tags=allowed_tags, strip=True))</div><div class="line"></div><div class="line">db.event.listen(Comment.body, &apos;set&apos;, Comment.on_changed_body)</div></pre></td></tr></table></figure><h3 id="2-在app-models-py中定义users表和posts表与comennts表的一对多关系："><a href="#2-在app-models-py中定义users表和posts表与comennts表的一对多关系：" class="headerlink" title="2. 在app/models.py中定义users表和posts表与comennts表的一对多关系："></a>2. 在<code>app/models.py</code>中定义users表和posts表与comennts表的一对多关系：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">class User(UserMixin, db.Model):</div><div class="line">    # ...</div><div class="line">    comments = db.relationship(&apos;Comment&apos;, backref=&apos;author&apos;, lazy=&apos;dynamic&apos;)</div><div class="line">    </div><div class="line"></div><div class="line">class Post(db.Model):</div><div class="line">    # ...</div><div class="line">    comments = db.relationship(&apos;Comment&apos;, backref=&apos;post&apos;, layz=&apos;dynamic&apos;)</div></pre></td></tr></table></figure><h1 id="13-2-显示评论框和提交评论"><a href="#13-2-显示评论框和提交评论" class="headerlink" title="13.2 显示评论框和提交评论"></a>13.2 显示评论框和提交评论</h1><h3 id="1-在app-main-forms-py中定义评论表单："><a href="#1-在app-main-forms-py中定义评论表单：" class="headerlink" title="1. 在app/main/forms.py中定义评论表单："></a>1. 在<code>app/main/forms.py</code>中定义评论表单：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">class CommentForm(FlaskForm):</div><div class="line">    body = StringField(&apos;Enter your comment&apos;, validators=[DataRequired()])</div><div class="line">    submit = SubmitField(&apos;Submit&apos;)</div></pre></td></tr></table></figure><h3 id="2-在app-main-views-py中定义在文章页显示评论的路由："><a href="#2-在app-main-views-py中定义在文章页显示评论的路由：" class="headerlink" title="2. 在app/main/views.py中定义在文章页显示评论的路由："></a>2. 在<code>app/main/views.py</code>中定义在文章页显示评论的路由：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@main.route(&apos;/post/&lt;int:id&gt;&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</div><div class="line">def post(id):</div><div class="line">    post = Post.query.get_or_404(id)</div><div class="line">    form = CommentForm()</div><div class="line">    if form.validate_on_submit():</div><div class="line">        comment = Comment(body=form.body.data,</div><div class="line">                          post=post,</div><div class="line">                          author=current_user._get_current_object())</div><div class="line">        db.session.add(comment)</div><div class="line">        db.session.commit()</div><div class="line">        flash(&apos;Your comment has been published.&apos;)</div><div class="line">        return redirect(url_for(&apos;main.post&apos;, id=post.id, page=-1))</div><div class="line">    page = request.args.get(&apos;page&apos;, 1, type=int)</div><div class="line">    if page == -1:</div><div class="line">        # 用总评论数除以每页显示数量再加1获得真正需要请求的页码，使得提交评论后能转到看到自己评论的页面</div><div class="line">        page = (post.comments.count() - 1) // current_app.config[&apos;FLASKY_COMMENTS_PER_PAGE&apos;] + 1</div><div class="line">    pagination = post.comments.order_by(Comment.timestamp.asc()).paginate(</div><div class="line">        page, per_page=current_app.config[&apos;FLASKY_COMMENTS_PER_PAGE&apos;],</div><div class="line">        error_out=False)</div><div class="line">    comments = pagination.items</div><div class="line">    return render_template(&apos;post.html&apos;, posts=[post], form=form,</div><div class="line">                           comments=comments, pagination=pagination)</div></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>和<code>Post</code>模型一样，评论的<code>author</code>字段不能直接设为<code>current_user</code>，因为这个变量是上下文代理对象，要使用<code>current_user._get_current_object()</code>获取真正的用户对象。</li><li><code>url_for()</code>函数的<code>page</code>参数设为<code>-1</code>，用来请求最后一页，以达到提交评论后转到可以看到自己刚才发表的评论的页面。真正的页码通过(用总评论数除以每页显示数量)再加1获得。</li></ul><h3 id="3-在app-templates-post-html中添加到博客文章评论的链接："><a href="#3-在app-templates-post-html中添加到博客文章评论的链接：" class="headerlink" title="3. 在app/templates/_post.html中添加到博客文章评论的链接："></a>3. 在<code>app/templates/_post.html</code>中添加到博客文章评论的链接：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">&lt;a href=&quot;&#123;&#123; url_for(&apos;main.post&apos;, id=post.id)&#125;&#125;#comments&quot;&gt;</div><div class="line">    &lt;span class=&quot;label label-primary&quot;&gt;</div><div class="line">        &#123;&#123; post.comments.count() &#125;&#125; Comments</div><div class="line">    &lt;/span&gt;</div><div class="line">&lt;/a&gt;</div></pre></td></tr></table></figure><p><strong>注意</strong>：<code>url_for()</code>函数后面加了一个<code>#comments</code>后缀，这个后缀称为URL片段，其作用是用于指定加载页面后<strong>滚动条所在的初始位置</strong>。该例中，Web浏览器会寻找id为<code>comments</code>的元素并滚动页面。</p><h1 id="13-3-管理评论"><a href="#13-3-管理评论" class="headerlink" title="13.3 管理评论"></a>13.3 管理评论</h1><h3 id="1-在app-templates-base-html中在顶端导航条添加管理评论的链接："><a href="#1-在app-templates-base-html中在顶端导航条添加管理评论的链接：" class="headerlink" title="1. 在app/templates/base.html中在顶端导航条添加管理评论的链接："></a>1. 在<code>app/templates/base.html</code>中在顶端导航条添加管理评论的链接：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line">&#123;% if current_user.can(Permission.MODERATE_COMMENT) %&#125;</div><div class="line">&lt;li&gt;&lt;a href=&quot;&#123;&#123; url_for(&apos;main.moderate&apos;) &#125;&#125;&quot;&gt;Moderate&lt;/a&gt;&lt;/li&gt;</div><div class="line">&#123;% endif %&#125;</div><div class="line"># ...</div></pre></td></tr></table></figure><h3 id="2-在app-main-views-py中定义管理评论的路由（用于显示所有评论）："><a href="#2-在app-main-views-py中定义管理评论的路由（用于显示所有评论）：" class="headerlink" title="2. 在app/main/views.py中定义管理评论的路由（用于显示所有评论）："></a>2. 在<code>app/main/views.py</code>中定义管理评论的路由（用于显示所有评论）：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">@main.route(&apos;/moderate&apos;)</div><div class="line">@login_required</div><div class="line">@permission_required(Permission.MODERATE_COMMENT)</div><div class="line">def moderate():</div><div class="line">    page = request.args.get(&apos;page&apos;, 1, type=int)</div><div class="line">    pagination =Comment.query.order_by(Comment.timestamp.desc()).paginate(</div><div class="line">        page, per_page=current_app.config[&apos;FLASKY_COMMENTS_PER_PAGE&apos;],</div><div class="line">        error_out=False)</div><div class="line">    comments = pagination.items</div><div class="line">    return render_template(&apos;moderate.html&apos;, comments=comments,</div><div class="line">                           pagination=pagination, page=page)</div></pre></td></tr></table></figure><h3 id="3-在app-templates-moderate-html中定义管理评论的页面模板："><a href="#3-在app-templates-moderate-html中定义管理评论的页面模板：" class="headerlink" title="3. 在app/templates/moderate.html中定义管理评论的页面模板："></a>3. 在<code>app/templates/moderate.html</code>中定义管理评论的页面模板：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;% extends &quot;base.html&quot; %&#125;</div><div class="line">&#123;% import &quot;_macros.html&quot; as macros %&#125;</div><div class="line"></div><div class="line">&#123;% block title %&#125;Flasky - Comment Moderation&#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% block page_content %&#125;</div><div class="line">&lt;div class=&quot;page-header&quot;&gt;</div><div class="line">    &lt;h1&gt;Comment Moderation&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&#123;% set moderate = True %&#125;</div><div class="line">&#123;% include &apos;_comments.html&apos; %&#125;</div><div class="line">&#123;% if pagination %&#125;</div><div class="line">&lt;div class=&quot;pagination&quot;&gt;</div><div class="line">    &#123;&#123; macros.pagination_widget(pagination, &apos;.moderate&apos;) &#125;&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">&#123;% endif %&#125;</div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure><ul><li>模板中通过Jinja2提供的<code>set</code>指令定义了一个模板变量<code>moderate</code>，并将其值设为<code>True</code>，这个变量的作用是决定在<code>_comments.html</code>模板中是否渲染管理评论功能。</li></ul><h3 id="4-在app-templates-comments-html中定义渲染评论内容的模板："><a href="#4-在app-templates-comments-html中定义渲染评论内容的模板：" class="headerlink" title="4. 在app/templates/_comments.html中定义渲染评论内容的模板："></a>4. 在<code>app/templates/_comments.html</code>中定义渲染评论内容的模板：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;ul class=&quot;comments&quot;&gt;</div><div class="line">    &#123;% for comment in comments %&#125;</div><div class="line">    &lt;li class=&quot;comment&quot;&gt;</div><div class="line">        &lt;div class=&quot;comment-thumbnail&quot;&gt;</div><div class="line">            &lt;a href=&quot;&#123;&#123; url_for(&apos;main.user&apos;, username=comment.author.username) &#125;&#125;&quot;&gt;</div><div class="line">                &lt;img class=&quot;img-rounded profile-thumbnail&quot; src=&quot;&#123;&#123; comment.author.gravatar(size=40) &#125;&#125;&quot;&gt;</div><div class="line">            &lt;/a&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div class=&quot;comment-content&quot;&gt;</div><div class="line">            &lt;div class=&quot;comment-date&quot;&gt;&#123;&#123; moment(comment.timestamp).fromNow() &#125;&#125;&lt;/div&gt;</div><div class="line">            &lt;div class=&quot;comment-author&quot;&gt;&lt;a href=&quot;&#123;&#123; url_for(&apos;main.user&apos;, username=comment.author.username) &#125;&#125;&quot;&gt;&#123;&#123; comment.author.username &#125;&#125;&lt;/a&gt;&lt;/div&gt;</div><div class="line">            &lt;div class=&quot;comment-body&quot;&gt;</div><div class="line">                &#123;% if comment.disabled %&#125;</div><div class="line">                # 不当的评论用以下内容显示</div><div class="line">                &lt;p&gt;&lt;i&gt;This comment has been disabled by a moderator.&lt;/i&gt;&lt;/p&gt;</div><div class="line">                &#123;% endif %&#125;</div><div class="line">                &#123;% if moderate or not comment.disabled %&#125;</div><div class="line">                    &#123;% if comment.body_html %&#125;</div><div class="line">                        &#123;&#123; comment.body_html | safe &#125;&#125;</div><div class="line">                    &#123;% else %&#125;</div><div class="line">                        &#123;&#123; comment.body &#125;&#125;</div><div class="line">                    &#123;% endif %&#125;</div><div class="line">                &#123;% endif %&#125;</div><div class="line">            &lt;/div&gt;</div><div class="line">            &#123;% if moderate %&#125;</div><div class="line">                &lt;br&gt;</div><div class="line">                &#123;% if comment.disabled %&#125;</div><div class="line">                &lt;a class=&quot;btn btn-default btn-xs&quot; href=&quot;&#123;&#123; url_for(&apos;main.moderate_enable&apos;, id=comment.id, page=page) &#125;&#125;&quot;&gt;Enable&lt;/a&gt;</div><div class="line">                &#123;% else %&#125;</div><div class="line">                &lt;a class=&quot;btn btn-danger btn-xs&quot; href=&quot;&#123;&#123; url_for(&apos;main.moderate_disable&apos;, id=comment.id, page=page) &#125;&#125;&quot;&gt;Disable&lt;/a&gt;</div><div class="line">                &#123;% endif %&#125;</div><div class="line">            &#123;% endif %&#125;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">    &#123;% endfor %&#125;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure><h3 id="5-在app-main-views-py中定义显示评论、禁用评论的路由："><a href="#5-在app-main-views-py中定义显示评论、禁用评论的路由：" class="headerlink" title="5. 在app/main/views.py中定义显示评论、禁用评论的路由："></a>5. 在<code>app/main/views.py</code>中定义显示评论、禁用评论的路由：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># 显示评论</div><div class="line">@main.route(&apos;/moderate/enable/&lt;int:id&gt;&apos;)    # 评论的id</div><div class="line">@login_required</div><div class="line">@permission_required(Permission.MODERATE_COMMENT)</div><div class="line">def moderate_enable(id):</div><div class="line">    comment = Comment.query.get_or_404(id)</div><div class="line">    comment.disabled = False</div><div class="line">    db.session.add(comment)</div><div class="line">    return redirect(url_for(&apos;main.moderate&apos;, page=request.args.get(&apos;page&apos;, 1, type=int)))</div><div class="line"></div><div class="line"></div><div class="line"># 禁用评论</div><div class="line">@main.route(&apos;/moderate/disable/&lt;int:id&gt;&apos;)   # 评论的id</div><div class="line">@login_required</div><div class="line">@permission_required(Permission.MODERATE_COMMENT)</div><div class="line">def moderate_disable(id):</div><div class="line">    comment = Comment.query.get_or_404(id)</div><div class="line">    comment.disabled = True</div><div class="line">    db.session.add(comment)</div><div class="line">    return redirect(url_for(&apos;main.moderate&apos;, page=request.args.get(&apos;page&apos;, 1, type=int)))</div></pre></td></tr></table></figure><ul><li><code>redirect()</code>函数中设置了<code>page</code>参数，如果<strong>之前的请求</strong>中指定了<code>page</code>参数，则会将其转入重定向中。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;13-1-评论在数据库中的表示&quot;&gt;&lt;a href=&quot;#13-1-评论在数据库中的表示&quot; class=&quot;headerlink&quot; title=&quot;13.1 评论在数据库中的表示&quot;&gt;&lt;/a&gt;13.1 评论在数据库中的表示&lt;/h1&gt;&lt;p&gt;从psots表到comments表是
      
    
    </summary>
    
    
      <category term="Flask" scheme="https://richardrw.github.io/tags/Flask/"/>
    
      <category term="读书笔记" scheme="https://richardrw.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>把《Flask Web开发》读薄系列之第十二章 关注者</title>
    <link href="https://richardrw.github.io/2017/12/30/%E6%8A%8A%E3%80%8AFlask%20Web%E5%BC%80%E5%8F%91%E3%80%8B%E8%AF%BB%E8%96%84%E7%B3%BB%E5%88%97%E4%B9%8B%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%20%E5%85%B3%E6%B3%A8%E8%80%85/"/>
    <id>https://richardrw.github.io/2017/12/30/把《Flask Web开发》读薄系列之第十二章 关注者/</id>
    <published>2017-12-30T15:30:03.000Z</published>
    <updated>2017-12-30T15:31:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="12-1-再论数据库关系"><a href="#12-1-再论数据库关系" class="headerlink" title="12.1 再论数据库关系"></a>12.1 再论数据库关系</h1><p>一对多关系是最常用的关系，要实现这种关系，要在“多”这一侧加一个外键，指向“一”这一侧联接的记录。<br>一对一关系是简化版的一对多关系，限制“多”这一侧最多只能有一个记录。</p><h2 id="12-1-1-多对多关系"><a href="#12-1-1-多对多关系" class="headerlink" title="12.1.1 多对多关系"></a>12.1.1 多对多关系</h2><p>一对多关系、多对一关系和一对一关系至少都有一侧是单个实体，所以记录之间的联系通过外键实现，让外键指向这个实体。而多对多关系就不能这么多，因为例如你不能在学生表中加入一个指向课程的外键（因为一个学生可以选择多个课程，一个外键不够用）。因此需要添加一张<strong>关联表</strong>，使多对多关系分解成原表和关联表之间的两个一对多关系。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">registrations = db.Table(&apos;registration&apos;,</div><div class="line">              db.Column(&apos;student_id&apos;, db.Integer, db.ForeignKey(&apos;students.id&apos;)),</div><div class="line">              db.Column(&apos;class_id&apos;, db.Integer, db.ForeignKey(&apos;classes_id&apos;)))</div><div class="line">              </div><div class="line"></div><div class="line">class Student(db.Model):</div><div class="line">    id = db.Column(db.Integer, primary_key=True)</div><div class="line">    name = db.Column(db.String)</div><div class="line">    classes = db.relationship(&apos;Class&apos;,</div><div class="line">                              secondary=registrations,</div><div class="line">                              backref=db.backref(&apos;students&apos;, lazy=&apos;dynamic&apos;)</div><div class="line">                              lazy=&apos;dynamic&apos;)</div><div class="line"></div><div class="line"></div><div class="line">class Class(db.Model):</div><div class="line">    id = db.Column(db.Integer, primary_key=True)</div><div class="line">    name = db.Column(db.String)</div></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>多对多关系仍使用定义一对多关系的<code>db.relationship()</code>方法进行定义，<strong>但在多对多关系中，必须把<code>secondary</code>参数设为关联表</strong>。</li><li>多对多关系可以在任何一侧定义，<code>backref</code>参数为处理好关系的另一侧。</li><li>关联表<code>registrations</code>是一个简单的表，<strong>不是模型</strong>。SQLALchemy会自动接管这个表。</li></ul><p>现在假设学生是s，课程是c，学生s选择课程c的代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;s.classes.append(c)</div><div class="line">&gt;&gt;&gt;db.session.add(s)</div></pre></td></tr></table></figure><p>学生s退选课程c的代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;s.classes.remove(c)</div><div class="line">&gt;&gt;&gt;db.session.add(s)</div></pre></td></tr></table></figure><h2 id="12-1-2-自引用关系"><a href="#12-1-2-自引用关系" class="headerlink" title="12.1.2 自引用关系"></a>12.1.2 自引用关系</h2><p>多对多关系可用于实现用户之间的关注。但<strong>现在存在一个问题</strong>：在学生和课程的例子中，关联表联接的是两个明确的实体。而表示用户关注其他用户时，只用用户一个实体，没有第二个实体（另一侧不是其他表，而是在同一张表中）。</p><p><strong>自引用关系</strong>：如果关系中的两侧都在同一个表中，那这个关系称为自引用关系。</p><h2 id="12-1-3-高级多对多关系"><a href="#12-1-3-高级多对多关系" class="headerlink" title="12.1.3 高级多对多关系"></a>12.1.3 高级多对多关系</h2><p>使用12.1.2介绍的自引用关系可在数据库中表示用户之间的关注，但<strong>存在一个限制</strong>：使用多对多关系，通常需要存储所联两个实体之间的额外信息（如关注时间等），而这种额外信息只能存储在<strong>关联表</strong>中（因为如果存在实体表中，就会出现12.1.1中所说的外键不够用类似的情况）。<br>但是现在关联表完全由SQLALchemy接管（此时关联表只是一个简单表，不是模型）。因此我们可以把关联表定义为模型（提升关联表的地位），使其变成程序可访问的。</p><h3 id="1-在app-models-py中定义关联表模型："><a href="#1-在app-models-py中定义关联表模型：" class="headerlink" title="1. 在app/models.py中定义关联表模型："></a>1. 在<code>app/models.py</code>中定义关联表模型：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class Follow(db.Models):</div><div class="line">    __tablename__ = &apos;follows&apos;</div><div class="line">    # 关注他人的人id</div><div class="line">    follower_id = db.Column(db.Integer, db.ForeignKey(&apos;users.id&apos;), primary_key=True)</div><div class="line">    # 被别人关注的人id</div><div class="line">    followed_id = db.Column(db.Integer, db.ForeignKey(&apos;users.id&apos;), primary_key=True)</div><div class="line">    timestamp = db.Column(db.DateTime, default=dbatetime.utcnow)</div></pre></td></tr></table></figure><h3 id="2-在app-models-py中定义两个一对多关系从而实现多对多关系（因为是自引用关系，所以关系两侧都在同一侧定义）："><a href="#2-在app-models-py中定义两个一对多关系从而实现多对多关系（因为是自引用关系，所以关系两侧都在同一侧定义）：" class="headerlink" title="2. 在app/models.py中定义两个一对多关系从而实现多对多关系（因为是自引用关系，所以关系两侧都在同一侧定义）："></a>2. 在<code>app/models.py</code>中定义两个一对多关系从而实现多对多关系（因为是自引用关系，所以关系两侧都在同一侧定义）：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class User(UserMixin, db.Model):</div><div class="line">    # ...</div><div class="line">    # 已关注</div><div class="line">    followed = db.relationship(&apos;Follow&apos;,   # 和前面的12.1.1不同，这里是关联表，而不是“另一侧实体”</div><div class="line">                              foreign_keys=[Follow.follower_id], # 为消除外键间的歧义，必须明确指定用哪个外键，因为关系表中有两个外键</div><div class="line">                              backref=db.backref(&apos;follower&apos;, lazy=&apos;joined&apos;),  # db.backref()参数并不是指定这两个关系之间的引用关系，而是回引Follow模型。follower是关注他人的人</div><div class="line">                              lazy=&apos;dynamic&apos;,</div><div class="line">                              cascade=&apos;all, delete-orphan&apos;)</div><div class="line">    # 关注user的人</div><div class="line">    followers = db.relationship(&apos;Follow&apos;,</div><div class="line">                              foreign_keys=[Follow.followed_id],</div><div class="line">                              backref=db.backref(&apos;followed&apos;, lazy=&apos;joined&apos;),   # followed是被别人关注的人</div><div class="line">                              lazy=&apos;dynamic&apos;,</div><div class="line">                              cascade=&apos;all, delete-orphan&apos;)</div></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li><code>followed</code>和<code>followers</code>关系都定义为单独的一对多关系（User对Follow）。</li><li><code>foreign_keys</code>参数必须指定外键以消除外键间的歧义。</li><li><code>db.backref()</code>第一个参数<strong>并不是指定这两个关系（User和Follow）之间的引用关系，而是回引Follow模型</strong>。</li><li><code>db.backref()</code>中<code>lazy</code>参数设为<code>joined</code>，可以实现立即从联结查询中加载相关对象。如：某个用户关注了100个用户，调用<code>user.followed.all()</code>后会返回一个<strong>列表</strong>，其中包含100个<strong>Follow实例</strong>，<strong>每个Follow实例的<code>follower</code>和<code>followed</code>回引属性都指向相应的用户</strong>。</li><li><code>cascade</code>参数用于设置在父对象上执行的操作会对相关对象有什么影响。当设为<code>&#39;all, delete-orphan&#39;</code>时表示启用所有默认层叠选项，而且还有删除孤儿记录。（可理解为父对象干什么，相关的对象就干什么）</li></ul><h3 id="3-在app-models-py中定义一些关注关系的辅助方法："><a href="#3-在app-models-py中定义一些关注关系的辅助方法：" class="headerlink" title="3. 在app/models.py中定义一些关注关系的辅助方法："></a>3. 在<code>app/models.py</code>中定义一些关注关系的辅助方法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class User(UserMixin, db.Model):</div><div class="line">    # ...</div><div class="line">    # 实现关注他人功能</div><div class="line">    def follow(self, user):</div><div class="line">        if not slef.is_following(user):</div><div class="line">            f = Follow(follower=self, followed=user)</div><div class="line">            db.session.add(f)</div><div class="line">    </div><div class="line">    # 实现取消关注功能</div><div class="line">    def unfollow(self, user):</div><div class="line">        f = self.followed.filter_by(followed_id=user.id).first()</div><div class="line">        if f:</div><div class="line">            db.session.delete(f)    # 删除Follow实例</div><div class="line">    </div><div class="line">    # 实现查询是否关注了他人的功能</div><div class="line">    def is_following(self, user):</div><div class="line">        return self.followed.filter_by(followed_id=user.id).first() is not None</div><div class="line">    </div><div class="line">    # 实现查询是否被他人关注的功能</div><div class="line">    def is_followed_by(self, user):</div><div class="line">        return self.followers.filter_by(follower_id=user.id).first() is not None</div></pre></td></tr></table></figure><ul><li>在<code>follow()</code>函数中无需设定<code>timestamp</code>字段，因为在第一步中已经为其设置了默认值。</li></ul><h1 id="12-2-在资料页中显示关注者"><a href="#12-2-在资料页中显示关注者" class="headerlink" title="12.2 在资料页中显示关注者"></a>12.2 在资料页中显示关注者</h1><h3 id="1-在app-templates-user-html中添加在用户个人资料页上的关注信息："><a href="#1-在app-templates-user-html中添加在用户个人资料页上的关注信息：" class="headerlink" title="1. 在app/templates/user.html中添加在用户个人资料页上的关注信息："></a>1. 在<code>app/templates/user.html</code>中添加在用户个人资料页上的关注信息：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line">&lt;div class=&quot;profile-header&quot;&gt;</div><div class="line">&lt;p&gt;</div><div class="line">            &#123;% if current_user.can(Permission.FOLLOW) and user != current_user %&#125;</div><div class="line">                &#123;% if not current_user.is_following(user) %&#125;</div><div class="line">                &lt;a href=&quot;&#123;&#123; url_for(&apos;main.follow&apos;, username=user.username) &#125;&#125;&quot; class=&quot;btn btn-primary&quot;&gt;Follow&lt;/a&gt;</div><div class="line">                &#123;% else %&#125;</div><div class="line">                &lt;a href=&quot;&#123;&#123; url_for(&apos;main.unfollow&apos;, username=user.username) &#125;&#125;&quot; class=&quot;btn btn-default&quot;&gt;Unfollow&lt;/a&gt;</div><div class="line">                &#123;% endif %&#125;</div><div class="line">            &#123;% endif %&#125;</div><div class="line">            &lt;a href=&quot;&#123;&#123; url_for(&apos;main.followers&apos;, username=user.username) &#125;&#125;&quot;&gt;Followers: &lt;span class=&quot;badge&quot;&gt;&#123;&#123; user.followers.count() - 1 &#125;&#125;&lt;/span&gt;&lt;/a&gt;</div><div class="line">            &lt;a href=&quot;&#123;&#123; url_for(&apos;main.followed_by&apos;, username=user.username) &#125;&#125;&quot;&gt;Following: &lt;span class=&quot;badge&quot;&gt;&#123;&#123; user.followed.count() - 1 &#125;&#125;&lt;/span&gt;&lt;/a&gt;</div><div class="line">            &#123;% if current_user.is_authenticated and user != current_user and user.is_following(current_user) %&#125;</div><div class="line">            | &lt;span class=&quot;label label-default&quot;&gt;Follows you&lt;/span&gt;</div><div class="line">            &#123;% endif %&#125;</div><div class="line">        &lt;/p&gt;</div><div class="line"># ...</div></pre></td></tr></table></figure><h3 id="2-在app-main-views-py中定义关注按钮对应的路由："><a href="#2-在app-main-views-py中定义关注按钮对应的路由：" class="headerlink" title="2. 在app/main/views.py中定义关注按钮对应的路由："></a>2. 在<code>app/main/views.py</code>中定义关注按钮对应的路由：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">from decorators import permission_required</div><div class="line"># ...</div><div class="line"></div><div class="line">@main.route(&apos;/follow/&lt;username&gt;&apos;)</div><div class="line">@login_required</div><div class="line">@permission_required(Permission.Follow)</div><div class="line">def follow(username):</div><div class="line">    user = User.query.filter_by(username=username).first()</div><div class="line">    if user is None:</div><div class="line">        flash(&apos;Invalid user.&apos;)</div><div class="line">        return redirect(url_for(&apos;main.index&apos;))</div><div class="line">    # 判断是否已经关注了user</div><div class="line">    if current_user.is_following(user):</div><div class="line">        flash(&apos;You are already following this user.&apos;)</div><div class="line">        return redirect(url_for(&apos;main.user&apos;, username=username))</div><div class="line">    # 调用User模型中的follow方法</div><div class="line">    current_user.follow(user)</div><div class="line">    flash(&apos;You are now following &#123;&#125;&apos;.format(username))</div><div class="line">    return redirect(url_for(&apos;main.user&apos;, username=username))</div></pre></td></tr></table></figure><h3 id="3-在app-main-views-py中定义用于展示关注了你的人（粉丝）路由："><a href="#3-在app-main-views-py中定义用于展示关注了你的人（粉丝）路由：" class="headerlink" title="3. 在app/main/views.py中定义用于展示关注了你的人（粉丝）路由："></a>3. 在<code>app/main/views.py</code>中定义用于展示关注了你的人（粉丝）路由：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">@main.route(&apos;/followers/&lt;username&gt;&apos;)</div><div class="line">def followers(username):</div><div class="line">    user = User.query.filter_by(username=username).first()</div><div class="line">    if user is None:</div><div class="line">         flash(&apos;Invalid user.&apos;)</div><div class="line">         return redirect(url_for(&apos;main.index&apos;))</div><div class="line">    page = request.args.get(&apos;page&apos;, 1, type=int)</div><div class="line">    pagination = user.followers.pagination(page,</div><div class="line">                                          per_page=current_app.config[&apos;FLASKY_FOLLOWERS_PER_PAGE&apos;],</div><div class="line">                                        error_out=False)</div><div class="line">    # 列表表达式，pagination.items返回的是所有Follow实例，通过item.follower获取对应的用户（User实例）</div><div class="line">    follows = [&#123;&apos;user&apos;: item.follower, &apos;timestamp&apos;: item.timestamp&#125;</div><div class="line">               for item in pagination.items]</div><div class="line">    return render_template(&apos;followers.html&apos;, user=user, title=&apos;Followers of&apos;,</div><div class="line">                          endpoint=&apos;main.followers&apos;, pagination=pagination,</div><div class="line">                          follows=follows)</div></pre></td></tr></table></figure><h3 id="4-在app-main-views-py中定义用于展示你关注了谁的路由："><a href="#4-在app-main-views-py中定义用于展示你关注了谁的路由：" class="headerlink" title="4. 在app/main/views.py中定义用于展示你关注了谁的路由："></a>4. 在<code>app/main/views.py</code>中定义用于展示你关注了谁的路由：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">@main.route(&apos;/followers/&lt;username&gt;&apos;)</div><div class="line">def followers(username):</div><div class="line">    user = User.query.filter_by(username=username).first()</div><div class="line">    if user is None:</div><div class="line">         flash(&apos;Invalid user.&apos;)</div><div class="line">         return redirect(url_for(&apos;main.index&apos;))</div><div class="line">    page = request.args.get(&apos;page&apos;, 1, type=int)</div><div class="line">    pagination = user.followed.pagination(page,</div><div class="line">                                          per_page=current_app.config[&apos;FLASKY_FOLLOWERS_PER_PAGE&apos;],</div><div class="line">                                        error_out=False)</div><div class="line">    # 列表表达式，pagination.items返回的是所有Follow实例，通过item.followed获取对应的用户（User实例）</div><div class="line">    follows = [&#123;&apos;user&apos;: item.followed, &apos;timestamp&apos;: item.timestamp&#125;</div><div class="line">               for item in pagination.items]</div><div class="line">    return render_template(&apos;followers.html&apos;, user=user, title=&apos;Followed by&apos;,</div><div class="line">                          endpoint=&apos;main.followers&apos;, pagination=pagination,</div><div class="line">                          follows=follows)</div></pre></td></tr></table></figure><ul><li>这个路由跟第三步中定义的<code>followers</code>路由一样，唯一的区别是<code>followed_by</code>中第10行和第14行通过<code>followed</code>获取相关对象。</li><li><code>followers</code>和<code>followed_by</code>都使用同一个模板<code>followers.html</code>。</li></ul><h3 id="5-在app-templates-followers-html中添加显示已关注的人和粉丝的模板："><a href="#5-在app-templates-followers-html中添加显示已关注的人和粉丝的模板：" class="headerlink" title="5. 在app/templates/followers.html中添加显示已关注的人和粉丝的模板："></a>5. 在<code>app/templates/followers.html</code>中添加显示已关注的人和粉丝的模板：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&#123;% extends &quot;base.html&quot; %&#125;</div><div class="line">&#123;% import &quot;_macros.html&quot; as macros %&#125;</div><div class="line"></div><div class="line">&#123;% block title %&#125;Flasky - &#123;&#123; title &#125;&#125; &#123;&#123; user.username &#125;&#125;&#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% block page_content %&#125;</div><div class="line">&lt;div class=&quot;page-header&quot;&gt;</div><div class="line">    &lt;h1&gt;&#123;&#123; title &#125;&#125; &#123;&#123; user.username &#125;&#125;&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;table class=&quot;table table-hover followers&quot;&gt;</div><div class="line">    &lt;thead&gt;&lt;tr&gt;&lt;th&gt;User&lt;/th&gt;&lt;th&gt;Since&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;</div><div class="line">    &#123;% for follow in follows %&#125;</div><div class="line">    &lt;!--读取的是follows列表中的每一个字典，然后通过follow.user获取字典中&apos;user&apos;键对应的值--&gt;</div><div class="line">    &#123;% if follow.user != user %&#125;</div><div class="line">    &lt;tr&gt;</div><div class="line">        &lt;td&gt;</div><div class="line">            &lt;a href=&quot;&#123;&#123; url_for(&apos;main.user&apos;, username=follow.user.username) &#125;&#125;&quot;&gt;</div><div class="line">                &lt;img class=&quot;img-rounded&quot; src=&quot;&#123;&#123; follow.user.gravatar(size=32) &#125;&#125;&quot;&gt;</div><div class="line">                &#123;&#123; follow.user.username &#125;&#125;</div><div class="line">            &lt;/a&gt;</div><div class="line">        &lt;/td&gt;</div><div class="line">        &lt;td&gt;&#123;&#123; moment(follow.timestamp).format(&apos;L&apos;) &#125;&#125;&lt;/td&gt;</div><div class="line">    &lt;/tr&gt;</div><div class="line">    &#123;% endif %&#125;</div><div class="line">    &#123;% endfor %&#125;</div><div class="line">&lt;/table&gt;</div><div class="line">&lt;div class=&quot;pagination&quot;&gt;</div><div class="line">    &#123;&#123; macros.pagination_widget(pagination, endpoint, username=user.username) &#125;&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure><p><strong>注意</strong>：<code>for follow in follows</code>获取的是<code>follows</code>列表中的每一个<strong>字典</strong>，然后通过<code>follow.user</code>来获取其对应的<strong>User实例</strong>（因为’user’键对应的值是第四步中的<code>item.followed</code>）。</p><h1 id="12-3-使用数据库联结查询所关注用户的文章"><a href="#12-3-使用数据库联结查询所关注用户的文章" class="headerlink" title="12.3 使用数据库联结查询所关注用户的文章"></a>12.3 使用数据库联结查询所关注用户的文章</h1><h3 id="1-在app-models-py中使用联结查询获取user所关注的用户发布的文章："><a href="#1-在app-models-py中使用联结查询获取user所关注的用户发布的文章：" class="headerlink" title="1. 在app/models.py中使用联结查询获取user所关注的用户发布的文章："></a>1. 在<code>app/models.py</code>中使用联结查询获取user所关注的用户发布的文章：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">class User(UserMixin, db.Model):</div><div class="line">    # ...</div><div class="line">    </div><div class="line">    # 获取已关注的人发布的文章</div><div class="line">    @property</div><div class="line">    def followed_posts(self):</div><div class="line">        return Post.query.join(Follow, Follow.followed_id == Post.author_id)\  # 被关注的人id==作者id</div><div class="line">            .filter_by(Follower_id == self.id)  # 关注别人的人id==self.id</div></pre></td></tr></table></figure><p><strong>注意</strong>：<code>followed_posts()</code>方法定义为<strong>属性</strong>，因此调用时无需加<code>()</code>。</p><h1 id="12-4-在首页显示所关注用户发布的文章"><a href="#12-4-在首页显示所关注用户发布的文章" class="headerlink" title="12.4 在首页显示所关注用户发布的文章"></a>12.4 在首页显示所关注用户发布的文章</h1><h3 id="1-在app-main-views-py中定义用于显示所有博客文章或只显示所关注用户发布的文章的路由："><a href="#1-在app-main-views-py中定义用于显示所有博客文章或只显示所关注用户发布的文章的路由：" class="headerlink" title="1. 在app/main/views.py中定义用于显示所有博客文章或只显示所关注用户发布的文章的路由："></a>1. 在<code>app/main/views.py</code>中定义用于显示所有博客文章或只显示所关注用户发布的文章的路由：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">@main.route(&apos;/&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;]</div><div class="line">def index():</div><div class="line">    # ...</div><div class="line">    show_followed = False</div><div class="line">    if current_user.is_authenticated:</div><div class="line">        # 从请求的cookies中获取show_followed的值，并转换为布尔值</div><div class="line">        show_followed = bool(request.cookies.get(&apos;show_followed&apos;, &apos;&apos;))</div><div class="line">    if show_followed:</div><div class="line">        # 获取所关注用户发布的文章</div><div class="line">        query = current_user.followed_posts</div><div class="line">    else:</div><div class="line">        # 获取全部文章</div><div class="line">        query = Post.query</div><div class="line">    pagination = query.order_by(Post.timestamp.des()).paginate(page,</div><div class="line">                                                              per_page=current_app.config[&apos;FLASKY_POSTS_PER_PAGE&apos;],</div><div class="line">                                                            error_out=False)</div><div class="line">    psots = pagination.itmes</div><div class="line">    return render_template(&apos;index.html&apos;, form=form, posts=posts,</div><div class="line">                           show_followed=show_followed, pagination=pagination)</div></pre></td></tr></table></figure><ul><li>决定显示所有博客文章，还是只显示所关注用户发布的文章，取决于存储在<code>cookies</code>中<code>show_followed</code>字段的值，如果其值是<strong>非空字符串</strong>，即<code>show_followed</code>变量为<code>True</code>，则只显示所关注用户发布的文章。</li><li><code>cookie</code>以<code>request.cookies</code>字典的形式存储在请求对象中。（具体如何实现请看第二步）</li></ul><h3 id="2-在app-main-views-py中为请求对象添加show-followed的cookies值："><a href="#2-在app-main-views-py中为请求对象添加show-followed的cookies值：" class="headerlink" title="2. 在app/main/views.py中为请求对象添加show_followed的cookies值："></a>2. 在<code>app/main/views.py</code>中为请求对象添加<code>show_followed</code>的<code>cookies</code>值：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">from flask import make_response</div><div class="line"># ...</div><div class="line"></div><div class="line">@main.route(&apos;/all&apos;)</div><div class="line">@login_required</div><div class="line">def show_all():</div><div class="line">    # 这个路由重定向到首页</div><div class="line">    resp = make_response(redirect(url_for(&apos;main.index&apos;)))</div><div class="line">    # 在resp中添加cookie，并设适当的值</div><div class="line">    resp.set_cookie(&apos;show_followed&apos;, &apos;&apos;, max_age=30*24*60*60)</div><div class="line">    return resp</div><div class="line">    </div><div class="line"></div><div class="line">@main.route(&apos;/followed&apos;)</div><div class="line">@login_required</div><div class="line">def show_followed():</div><div class="line">    resp = make_response(redirect(url_for(&apos;main.index&apos;)))</div><div class="line">    resp.set_cookie(&apos;show_followed&apos;, &apos;1&apos;, max_age=30*24*60*60)</div><div class="line">    return resp</div></pre></td></tr></table></figure><p><strong>注意</strong>：<code>set_cookie()</code>函数的前两个参数分别是<strong>cookie名</strong>和<strong>值</strong>。可选参数<code>max_age</code>设置cookie的过期时间，单位为秒，如果不指定<code>max_age</code>参数，则浏览器关闭后<code>cookie</code>就会过期。</p><h3 id="3-在app-models-py中在创建新用户时将用户设为自己的关注者（即自己关注自己）："><a href="#3-在app-models-py中在创建新用户时将用户设为自己的关注者（即自己关注自己）：" class="headerlink" title="3. 在app/models.py中在创建新用户时将用户设为自己的关注者（即自己关注自己）："></a>3. 在<code>app/models.py</code>中在创建新用户时将用户设为自己的关注者（即自己关注自己）：</h3><p>有时希望在查看所关注用户发布的文章中，也能看到自己的动态，此时就需要将自己设为自己的关注者（自己关注自己）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">class User(UserMixin, db.Model):</div><div class="line">    # ...</div><div class="line">    </div><div class="line">    def __init__(self, **kwargs):</div><div class="line">        # ...</div><div class="line">        self.follow(self)</div></pre></td></tr></table></figure><h3 id="4-在app-models-py中将之前已经创建的用户设为自己的关注者："><a href="#4-在app-models-py中将之前已经创建的用户设为自己的关注者：" class="headerlink" title="4. 在app/models.py中将之前已经创建的用户设为自己的关注者："></a>4. 在<code>app/models.py</code>中将之前已经创建的用户设为自己的关注者：</h3><p>创建函数来更新数据库，这一技术经常用来更新已部署的程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">class User(UserMixin, db.Model):</div><div class="line">    # ...</div><div class="line">    </div><div class="line">    @staticmethod</div><div class="line">    def add_self_follows():</div><div class="line">        for user in User.query.all():</div><div class="line">            if not user.is_following(user):</div><div class="line">                user.follow(user)</div><div class="line">                db.session.add(user)</div><div class="line">                db.session.commit()</div></pre></td></tr></table></figure><p><strong>最后，注意</strong>：因为将用户设为自己的关注者，因此在渲染模板时，已关注的人的数量和粉丝的数量需要减去1（即12.2中第一步中的第11行和第12行）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;12-1-再论数据库关系&quot;&gt;&lt;a href=&quot;#12-1-再论数据库关系&quot; class=&quot;headerlink&quot; title=&quot;12.1 再论数据库关系&quot;&gt;&lt;/a&gt;12.1 再论数据库关系&lt;/h1&gt;&lt;p&gt;一对多关系是最常用的关系，要实现这种关系，要在“多”这一侧加
      
    
    </summary>
    
    
      <category term="Flask" scheme="https://richardrw.github.io/tags/Flask/"/>
    
      <category term="读书笔记" scheme="https://richardrw.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>把《Flask Web开发》读薄系列之第十一章 博客文章</title>
    <link href="https://richardrw.github.io/2017/12/30/%E6%8A%8A%E3%80%8AFlask%20Web%E5%BC%80%E5%8F%91%E3%80%8B%E8%AF%BB%E8%96%84%E7%B3%BB%E5%88%97%E4%B9%8B%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%20%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>https://richardrw.github.io/2017/12/30/把《Flask Web开发》读薄系列之第十一章 博客文章/</id>
    <published>2017-12-30T11:09:11.000Z</published>
    <updated>2017-12-30T15:29:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="11-1-提交和显示博客文章"><a href="#11-1-提交和显示博客文章" class="headerlink" title="11.1 提交和显示博客文章"></a>11.1 提交和显示博客文章</h1><h3 id="1-在app-models-py中定义文章模型："><a href="#1-在app-models-py中定义文章模型：" class="headerlink" title="1. 在app/models.py中定义文章模型："></a>1. 在<code>app/models.py</code>中定义文章模型：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">class Post(db.Model):</div><div class="line">    __tablename__ = &apos;posts&apos;</div><div class="line">    id = db.Column(db.Integer, primary_key=True)</div><div class="line">    body = db.Column(db.Text)</div><div class="line">    body_html = db.Column(db.Text)</div><div class="line">    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow())</div><div class="line">    author_id = db.Column(db.Integer, db.ForeignKey(&apos;users.id&apos;))</div><div class="line"></div><div class="line"></div><div class="line">class User(UserMixin, db.Model):</div><div class="line">    # ...</div><div class="line">    posts = db.relationship(&apos;Post&apos;, backref=&apos;author&apos;, lazy=&apos;dynamic&apos;)</div></pre></td></tr></table></figure><p><strong>说明</strong>：</p><ul><li>为了使文章支持Markdown，用<code>body</code>字段存储markdown源文本，用<code>body_html</code>字段存储markdown源文本转换成的HTML文本。（具体如何将markdown转换成HTML，可见第10步.）</li></ul><h3 id="2-在app-main-forms-py中定义文章表单："><a href="#2-在app-main-forms-py中定义文章表单：" class="headerlink" title="2. 在app/main/forms.py中定义文章表单："></a>2. 在<code>app/main/forms.py</code>中定义文章表单：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from flask_pagedown import PageDownField</div><div class="line"># ...</div><div class="line"></div><div class="line">class PostForm(FlaskForm):</div><div class="line">    body = PageDownField(&quot;What&apos;s your mind?&quot;, validators=[DataRequired()])</div><div class="line">    submit = SubmitField(&apos;Submit&apos;)</div></pre></td></tr></table></figure><h3 id="3-在app-main-views-py中定义处理博客文章的主页路由："><a href="#3-在app-main-views-py中定义处理博客文章的主页路由：" class="headerlink" title="3. 在app/main/views.py中定义处理博客文章的主页路由："></a>3. 在<code>app/main/views.py</code>中定义处理博客文章的主页路由：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">from app.models import Post</div><div class="line"># ...</div><div class="line"></div><div class="line">@main.route(&apos;/&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</div><div class="line">def index():</div><div class="line">    form = PostForm()</div><div class="line">    if current_user.can(Permission.WRITE_ARTICLES) and form.validate_on_submit():</div><div class="line">        post = Post(body=form.body.data,</div><div class="line">                    author=current_user._get_current_object())    # 赋予当前用户对象</div><div class="line">        db.session.add(post)</div><div class="line">        db.session.commit()    # 当设置了请求结束后自动提交数据库变化时，该行可省略</div><div class="line">        return redirect(url_for(&apos;main.index&apos;))</div><div class="line">    page = request.args.get(&apos;page&apos;, 1, type=int)</div><div class="line">    pagination = Post.query.order_by(Post.timestamp.desc()).paginate(</div><div class="line">        page, per_page=current_app.config[&apos;FLASKY_POSTS_PER_PAGE&apos;],</div><div class="line">        error_out=False)</div><div class="line">    posts = pagination.items    # 获取当前分页对象的所有记录</div><div class="line">    return render_template(&apos;index.html&apos;, form=form, posts=posts, pagination=pagination)</div></pre></td></tr></table></figure><ul><li><code>current_user</code>是Flask-Login提供的，其表现类似用户对象，但实际上是一个轻度包装而由包含真正用户对象的对象。数据库需要获取真正的用户对象，所以需调用<code>_get_current_objet()</code>方法获取。</li><li>客户端通过URL请求的页码数通过<code>requset.args.get()</code>方法获取，<code>request.args.get(&#39;pag&#39;, 1, type=int)</code>通过关键字<code>&#39;page&#39;</code>获取页码，如果没有指定页码，则默认请求第1页，<code>type=int</code>保证参数无法转换成整数时，返回默认值（即第一页）。</li><li><code>paginate()</code>方法返回的是一个<code>Pagination</code>类对象（分页对象）。该方法第一个参数（必需要有）为页码，可选参数<code>per_page</code>用来指定每一页显示的记录数，如果没有指定，默认显示20个记录；另一个可选参数<code>error_out</code>，当其设为<code>True</code>时（默认值），如果请求的页码超出范围，则返回<code>404</code>错误；如果设为<code>False</code>，则返回一个<strong>空列表</strong>。常用的分页对象属性如表11-1。</li></ul><p>表11-1 Flask-SQLAlchemy分页对象的属性</p><table><thead><tr><th>属性</th><th>说明    </th></tr></thead><tbody><tr><td>items</td><td>当前页面中的记录</td></tr><tr><td>query</td><td>分页的源查询</td></tr><tr><td>page</td><td>当前页码</td></tr><tr><td>prev_num</td><td>上一页的页码</td></tr><tr><td>next_num</td><td>下一页的页码</td></tr><tr><td>has_next</td><td>如果有下一页，则返回True</td></tr><tr><td>has_prev</td><td>如果有上一页，则返回True</td></tr><tr><td>pages</td><td>查询得到的总页数</td></tr><tr><td>per_page</td><td>每页显示的记录数量</td></tr><tr><td>total</td><td>查询返回的记录总数</td></tr></tbody></table><p>在分页对象上还可以调用一些方法，如表11-2</p><p>表11-2 在Flask-SQLAlchemy对象上可调用的方法</p><table><thead><tr><th>方法</th><th>说明   </th></tr></thead><tbody><tr><td>iter_pages(left_edge=2, left_current=2, right_current=5, right_edge=2)</td><td>一个迭代器，返回一个在分页导航中显示的页数列表。这个列表的最左边显示left_edge个页码，当前页的左边显示left_current个页码，当前页的右边显示right_current个页码，最右边显示right_edge个页码。如按当前默认配置，在一个100页的列表中，当前页为第50页，则会返回一下页数：1、2、None、48、49、50、51、52、53、54、55、None、99、100。None表示页数之间的间隔。</td></tr><tr><td>prev()</td><td>上一页的分页对象 </td></tr><tr><td>next()</td><td>下一页的分页对象 </td></tr></tbody></table><ul><li>这样，主页中就会显示特定数量的文章，如果想看第2页中的文章，可在URL后加上查询字符串<code>?page=2</code>，那么视图函数就会通过<code>request.args.get()</code>方法获取<code>&#39;page&#39;</code>页码加以处理。</li></ul><h3 id="4-在app-templates-posts-html中定义用于显示博客文章的局部模板："><a href="#4-在app-templates-posts-html中定义用于显示博客文章的局部模板：" class="headerlink" title="4. 在app/templates/_posts.html中定义用于显示博客文章的局部模板："></a>4. 在<code>app/templates/_posts.html</code>中定义用于显示博客文章的局部模板：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;ul class=&quot;posts&quot;&gt;</div><div class="line">    &#123;% for post in posts %&#125;</div><div class="line">    &lt;li class=&quot;post&quot;&gt;</div><div class="line">        &lt;div class=&quot;post-thumbnail&quot;&gt;</div><div class="line">            &lt;a href=&quot;&#123;&#123; url_for(&apos;main.user&apos;, username=post.author.username) &#125;&#125;&quot;&gt;</div><div class="line">                &lt;img class=&quot;img-rounded profile-thumbnail&quot; src=&quot;&#123;&#123; post.author.gravatar(size=40) &#125;&#125;&quot;&gt;</div><div class="line">            &lt;/a&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;div class=&quot;post-content&quot;&gt;</div><div class="line">            &lt;div class=&quot;post-date&quot;&gt;&#123;&#123; moment(post.timestamp).fromNow() &#125;&#125;&lt;/div&gt;</div><div class="line">            &lt;div class=&quot;post-author&quot;&gt;&lt;a href=&quot;&#123;&#123; url_for(&apos;main.user&apos;, username=post.author.username) &#125;&#125;&quot;&gt;&#123;&#123; post.author.username &#125;&#125;&lt;/a&gt;&lt;/div&gt;</div><div class="line">            &lt;div class=&quot;post-body&quot;&gt;</div><div class="line">                &#123;% if post.body_html %&#125;</div><div class="line">                    &#123;&#123; post.body_html | safe &#125;&#125;</div><div class="line">                &#123;% else %&#125;</div><div class="line">                    &#123;&#123; post.body &#125;&#125;</div><div class="line">                &#123;% endif %&#125;</div><div class="line">            &lt;/div&gt;</div><div class="line">            &lt;div class=&quot;post-footer&quot;&gt;</div><div class="line">                &#123;% if current_user == post.author %&#125;</div><div class="line">                &lt;a href=&quot;&#123;&#123;url_for(&apos;main.edit&apos;, id=post.id) &#125;&#125;&quot;&gt;</div><div class="line">                    &lt;span class=&quot;label label-primary&quot;&gt;Edit&lt;/span&gt;</div><div class="line">                &lt;/a&gt;</div><div class="line">                &#123;% elif current_user.is_administrator() %&#125;</div><div class="line">                &lt;a href=&quot;&#123;&#123; url_for(&apos;main.edit&apos;, id=post.id) &#125;&#125;&quot;&gt;</div><div class="line">                    &lt;span class=&quot;label label-danger&quot;&gt;Edit [Admin]&lt;/span&gt;</div><div class="line">                &lt;/a&gt;</div><div class="line">                &#123;% endif %&#125;</div><div class="line">                &lt;a href=&quot;&#123;&#123; url_for(&apos;main.post&apos;, id=post.id) &#125;&#125;&quot;&gt;</div><div class="line">                    &lt;span class=&quot;label label-default&quot;&gt;Permalink&lt;/span&gt;</div><div class="line">                &lt;/a&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">    &#123;% endfor %&#125;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure><ul><li>因为在<code>index.html</code>模板中以及第7步的<code>user.html</code>模板中都需要显示博客文章，为了避免代码重写，将用于显示博客文章的模板分离出来，再在需要的时候加以引用（通过<code>include()</code>指令引用，如<code>include &#39;_post.html&#39;</code>）。为了区分独立模板和局部模板，局部模板一般在模板名加下划线<code>_</code>。</li><li><code>if post.body_html</code>解释见第11步。</li></ul><h3 id="5-在app-templates-macros-html中定义分页导航条模板宏（显示上一页、1、2、3…下一页）："><a href="#5-在app-templates-macros-html中定义分页导航条模板宏（显示上一页、1、2、3…下一页）：" class="headerlink" title="5. 在app/templates/_macros.html中定义分页导航条模板宏（显示上一页、1、2、3…下一页）："></a>5. 在<code>app/templates/_macros.html</code>中定义分页导航条模板宏（显示上一页、1、2、3…下一页）：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;% macro pagination_widget(pagination, endpoint) %&#125;</div><div class="line">&lt;ul class=&quot;pagination&quot;&gt;</div><div class="line">    &lt;li&#123;% if not pagination.has_prev %&#125; class=&quot;disabled&quot;&#123;% endif %&#125;&gt;</div><div class="line">        &lt;a href=&quot;&#123;% if pagination.has_prev %&#125;&#123;&#123; url_for(endpoint, page=pagination.prev_num, **kwargs) &#125;&#125;&#123;% else %&#125;#&#123;% endif %&#125;&quot;&gt;</div><div class="line">            &amp;laquo;</div><div class="line">        &lt;/a&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">    &#123;% for p in pagination.iter_pages() %&#125;</div><div class="line">        &#123;% if p %&#125;</div><div class="line">            &#123;% if p == pagination.page %&#125;</div><div class="line">            &lt;li class=&quot;active&quot;&gt;</div><div class="line">                &lt;a href=&quot;&#123;&#123; url_for(endpoint, page=p, **kwargs) &#125;&#125;&quot;&gt;&#123;&#123; p &#125;&#125;&lt;/a&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">            &#123;% else %&#125;</div><div class="line">            &lt;li&gt;</div><div class="line">                &lt;a href=&quot;&#123;&#123; url_for(endpoint, page=p, **kwargs) &#125;&#125;&quot;&gt;&#123;&#123; p &#125;&#125;&lt;/a&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">            &#123;% endif %&#125;</div><div class="line">        &#123;% else %&#125;</div><div class="line">        &lt;li class=&quot;disable&quot;&gt;&lt;a href=&quot;#&quot;&gt;&amp;hellip;&lt;/a&gt;&lt;/li&gt;</div><div class="line">        &#123;% endif %&#125;</div><div class="line">    &#123;% endfor %&#125;</div><div class="line">    &lt;li&#123;% if not pagination.has_next %&#125; class=&quot;disabled&quot;&#123;% endif %&#125;&gt;</div><div class="line">        &lt;a href=&quot;&#123;% if pagination.has_next %&#125;&#123;&#123; url_for(endpoint, page=pagination.next_num, **kwargs) &#125;&#125;&#123;% else %&#125;#&#123;% endif %&#125;&quot;&gt;</div><div class="line">            &amp;raquo;</div><div class="line">        &lt;/a&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">&#123;% endmacro %&#125;</div></pre></td></tr></table></figure><ul><li><code>pagination_widget(pagination, endpoint)</code>分别接受<strong>分页对象</strong>和<strong>路由端点名</strong>作为参数。</li><li>宏参数中不用加入<code>**kwargs</code>，分页宏会把接受到的所有关键字参数传给<code>url_for()</code>。这种方式也可以用在路由中，例如包含一个动态部分的资料页。</li><li>分页对象的<code>iter_pages()</code>方法返回一个页数列表。</li><li>分页链接通过<code>url_for()</code>生成。</li></ul><h3 id="6-在app-templates-index-html中引用-posts-html和-macros-html："><a href="#6-在app-templates-index-html中引用-posts-html和-macros-html：" class="headerlink" title="6. 在app/templates/index.html中引用_posts.html和_macros.html："></a>6. 在<code>app/templates/index.html</code>中引用<code>_posts.html</code>和<code>_macros.html</code>：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&#123;% extends &quot;base.html&quot; %&#125;</div><div class="line">&#123;% import &quot;bootstrap/wtf.html&quot; as wtf %&#125;</div><div class="line">&#123;% import &quot;_macros.html&quot; as macros %&#125;</div><div class="line"></div><div class="line">&#123;% block title %&#125;Flasky&#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% block page_content %&#125;</div><div class="line">&lt;div class=&quot;page-header&quot;&gt;</div><div class="line">    &lt;h1&gt;Hello, &#123;% if current_user.is_authenticated %&#125;&#123;&#123; current_user.username &#125;&#125;&#123;% else %&#125;Stranger&#123;% endif %&#125;!&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div&gt;</div><div class="line">    &#123;% if current_user.can(Permission.WRITE_ARTICLES) %&#125;</div><div class="line">    &#123;&#123; wtf.quick_form(form) &#125;&#125;</div><div class="line">    &#123;% endif %&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">&#123;% include &apos;_posts.html&apos; %&#125;</div><div class="line">&#123;% if pagination %&#125;</div><div class="line">&lt;div class=&quot;pagination&quot;&gt;</div><div class="line">    &#123;&#123; macros.pagination_widget(pagination, &apos;main.index&apos;) &#125;&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">&#123;% endif %&#125;</div><div class="line">&#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% block scripts %&#125;</div><div class="line">&#123;&#123; super() &#125;&#125;</div><div class="line">&#123;&#123; pagedown.include_pagedown() &#125;&#125;</div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure><h3 id="7-在app-main-views-py中定义在个人资料页面中显示该用户所写文章的路由："><a href="#7-在app-main-views-py中定义在个人资料页面中显示该用户所写文章的路由：" class="headerlink" title="7. 在app/main/views.py中定义在个人资料页面中显示该用户所写文章的路由："></a>7. 在<code>app/main/views.py</code>中定义在个人资料页面中显示该用户所写文章的路由：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">@main.route(&apos;/user/&lt;username&gt;&apos;)</div><div class="line">def user(username):</div><div class="line">    user = User.query.filter_by(username=username).first_or_404()</div><div class="line">    page = request.args.get(&apos;page&apos;, 1, type=int)</div><div class="line">    pagination = user.posts.order_by(Post.timestamp.desc()).paginate(</div><div class="line">        page, per_page=current_app.config[&apos;FLASKY_POSTS_PER_PAGE&apos;],</div><div class="line">        error_out=False)</div><div class="line">    posts = pagination.items</div><div class="line">    return render_template(&apos;user.html&apos;, user=user, posts=posts, pagination=pagination)</div></pre></td></tr></table></figure><ul><li>用户发布的文章通过<code>User.posts</code>关系获取。</li></ul><h1 id="11-4-使用Markdown和Flask-PageDown支持富文本文章"><a href="#11-4-使用Markdown和Flask-PageDown支持富文本文章" class="headerlink" title="11.4 使用Markdown和Flask-PageDown支持富文本文章"></a>11.4 使用Markdown和Flask-PageDown支持富文本文章</h1><p>实现这个功能需要用到以下一些包：</p><ul><li>PageDown：使用javaScript实现客户端Markdown到HTML的转换程序。</li><li>Flask-PageDown：为Flask包装的PageDown，把PageDown集成到Flask—WTF表单中。</li><li>Markdown：使用Python实现的服务器端Markdown到HTML的转换程序。</li><li>Bleach：使用Python实现的HTML清理器。</li></ul><h3 id="8-在app-init-py中初始化Flask-PageDown："><a href="#8-在app-init-py中初始化Flask-PageDown：" class="headerlink" title="8. 在app/__init__.py中初始化Flask-PageDown："></a>8. 在<code>app/__init__.py</code>中初始化Flask-PageDown：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from flask_pagedown import PageDown</div><div class="line"># ...</div><div class="line"></div><div class="line">pagedown = PageDown()</div><div class="line"></div><div class="line">def create_app(config_name):</div><div class="line">    # ...</div><div class="line">    pagedown = pagedown.init_app(app)</div><div class="line">    # ...</div></pre></td></tr></table></figure><h3 id="9-在app-templates-index-html中添加Flask-PageDown模板声明："><a href="#9-在app-templates-index-html中添加Flask-PageDown模板声明：" class="headerlink" title="9. 在app/templates/index.html中添加Flask-PageDown模板声明："></a>9. 在<code>app/templates/index.html</code>中添加Flask-PageDown模板声明：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;% block scripts %&#125;</div><div class="line">&#123;&#123; super() &#125;&#125;</div><div class="line">&#123;&#123; pagedown.include_pagedown() &#125;&#125;</div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure><h3 id="10-在app-models-py中在Post模型中处理Markdown文本："><a href="#10-在app-models-py中在Post模型中处理Markdown文本：" class="headerlink" title="10. 在app/models.py中在Post模型中处理Markdown文本："></a>10. 在<code>app/models.py</code>中在Post模型中处理Markdown文本：</h3><p>提交表单后，POST请求<strong>只会发送纯Markdown文本，页面中显示的HTML预览会被丢掉</strong>。<br>安全起见，我们（1）只提交Markdown源文件，（2）然后在服务器上使用Markdown将其转换为HTML文本，（3）得到HTML文本后，在使用Bleach进行清理，确保其中只包含几个允许使用的HTML标签，（4）将清理后得到的HTML文本存储到<code>body_html</code>字段中以提高效率（不用每次请求时都转换）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">from markdown import markdown</div><div class="line">import bleach</div><div class="line"># ...</div><div class="line"></div><div class="line">class Post(db.Model):</div><div class="line">    # ...</div><div class="line">    body_html = db.Column(db.Text)</div><div class="line">    </div><div class="line">    # ...</div><div class="line">    </div><div class="line">    @staticmethod</div><div class="line">    def on_changed_body(target, value, oldvalue, initiator):</div><div class="line">        allowed_tags = [&apos;a&apos;, &apos;abbr&apos;, &apos;acronym&apos;, &apos;b&apos;, &apos;blockquote&apos;, &apos;code&apos;,</div><div class="line">                        &apos;em&apos;, &apos;i&apos;, &apos;li&apos;, &apos;ol&apos;, &apos;pre&apos;, &apos;strong&apos;, &apos;ul&apos;,</div><div class="line">                        &apos;h1&apos;, &apos;h2&apos;, &apos;h3&apos;,&apos;p&apos;]</div><div class="line">        target.body_html = bleach.linkify(bleach.clean(</div><div class="line">            markdown(value, output_format=&apos;html&apos;),</div><div class="line">            tags=allowed_tags, strip=True))</div><div class="line">            </div><div class="line">db.event.listen(Post.body, &apos;set&apos;, Post.on_changed_body)</div></pre></td></tr></table></figure><ul><li><code>on_changed_body</code>函数注册在<code>body</code>字段上，是SQLAlchemy<code>&#39;set&#39;</code>事件的监听程序，这意味着只要这个类实例的body字段设了新值，该函数就会被调用。</li><li>真正的Markdown转换成HTMl分三步完成：（1）<code>markdown()</code>函数把Markdown文本转换成HTML文本。（2）将得到的HTMl文本和允许使用的HTML标签列表传给<code>clean()</code>函数，删除所有不再白名单中的HTML标签。（3）将上一步得到的HTML文本传给<code>linkify()</code>函数，把纯文本中的URL链接转换成适当的<code>&lt;a&gt;</code>链接（这一步是很必要的，因为Markdown规范没有为自动生成链接提供官方支持）。</li></ul><h3 id="11-在app-templates-posts-html中判断是否使用文章的HTNL格式："><a href="#11-在app-templates-posts-html中判断是否使用文章的HTNL格式：" class="headerlink" title="11. 在app/templates/_posts.html中判断是否使用文章的HTNL格式："></a>11. 在<code>app/templates/_posts.html</code>中判断是否使用文章的HTNL格式：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line">&lt;div class=&quot;post-body&quot;&gt;</div><div class="line">    &#123;% if post.body_html %&#125;</div><div class="line">        &#123;&#123; post.body_html | sage &#125;&#125;</div><div class="line">    &#123;% else %&#125;</div><div class="line">        &#123;&#123; post.body &#125;&#125;</div><div class="line">    &#123;% endif %&#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><ul><li>渲染HTNL格式时使用<code>| safe</code>后缀，作用时告诉Jinja2不要转移HTML元素（默认情况下，出于安全考虑，Jinja2会转移所有模板变量）。</li></ul><h3 id="12-在app-main-views-py中定义文章页面路由："><a href="#12-在app-main-views-py中定义文章页面路由：" class="headerlink" title="12. 在app/main/views.py中定义文章页面路由："></a>12. 在<code>app/main/views.py</code>中定义文章页面路由：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">@main.route(&apos;/post/&lt;int:id&gt;&apos;)</div><div class="line">def post(id):</div><div class="line">    post = Post.query.get_or_404(id)</div><div class="line">    return render_template(&apos;post.html&apos;, post=[post])</div></pre></td></tr></table></figure><p><strong>注意</strong>：<code>post.html</code>模板中也通过引用<code>_psots.html</code>显示博客文章，所以传参时要传一个列表（可迭代对象），因为<code>_psots.html</code>中通过<code>for</code>循环获取每一篇文章。</p><h3 id="13-在app-templates-posts-html中添加文章链接："><a href="#13-在app-templates-posts-html中添加文章链接：" class="headerlink" title="13. 在app/templates/_posts.html中添加文章链接："></a>13. 在<code>app/templates/_posts.html</code>中添加文章链接：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;ul class=&apos;posts&quot;&gt;</div><div class="line">    &#123;% for post in posts %&#125;</div><div class="line">    &lt;li class=&quot;psot&quot;&gt;</div><div class="line">        ...</div><div class="line">        &lt;div class=&quot;post-content&quot;&gt;</div><div class="line">            ....</div><div class="line">            &lt;div class=&quot;post-footer&quot;&gt;</div><div class="line">                &lt;a href=&quot;&#123;&#123; url_for(&apos;main.post&apos;, id=post.id) &#125;&#125;&quot;&gt;</div><div class="line">                    &lt;span class=&quot;label label-default&quot;&gt;Permalink&lt;/span&gt;</div><div class="line">                &lt;/a&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">    &#123;% endfor %&#125;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure><h3 id="14-在app-templates-post-html中引用-posts-html："><a href="#14-在app-templates-post-html中引用-posts-html：" class="headerlink" title="14. 在app/templates/post.html中引用_posts.html："></a>14. 在<code>app/templates/post.html</code>中引用<code>_posts.html</code>：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;% extends &quot;base.html&quot; %&#125;</div><div class="line">&#123;% import &quot;_macros.html&quot; as macros %&#125;</div><div class="line"></div><div class="line">&#123;% block title %&#125;Flasky - Post&#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% block page_content %&#125;</div><div class="line">&#123;% include &quot;_posts.html&quot; %&#125;</div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure><h1 id="11-6-博客文章编辑页面"><a href="#11-6-博客文章编辑页面" class="headerlink" title="11.6 博客文章编辑页面"></a>11.6 博客文章编辑页面</h1><h3 id="15-在app-main-views-py中定义编辑文章的路由："><a href="#15-在app-main-views-py中定义编辑文章的路由：" class="headerlink" title="15. 在app/main/views.py中定义编辑文章的路由："></a>15. 在<code>app/main/views.py</code>中定义编辑文章的路由：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">@main.route(&apos;/edit/&lt;int:id&gt;&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</div><div class="line">@login_required</div><div class="line">def edit(id):</div><div class="line">    post = Post.query.get_or_404(id)</div><div class="line">    if current_user != post.author and \</div><div class="line">        not current_user.can(Permission.ADMINISTER):</div><div class="line">        abort(403)</div><div class="line">    form = PostForm()</div><div class="line">    if form.validate_on_submit():</div><div class="line">        post.body = form.body.data</div><div class="line">        db.session.add(post)</div><div class="line">        flash(&apos;The post has been updated.&apos;)</div><div class="line">        return redirect(url_for(&apos;main.post&apos;, id=post.id))</div><div class="line">    form.body.data = post.body</div><div class="line">    return render_template(&apos;edit_post.html&apos;, form=form)</div></pre></td></tr></table></figure><p><strong>注意</strong>：这个视图函数的作用是<strong>只允许博客文章作者编辑（管理员除外，管理员能编辑所有用户文章）</strong>。如果用户试图编辑其他用户的文章，视图函数则会返回403错误。这里使用的PostForm表单类和主页中使用的是同一个。</p><h3 id="16-在app-templates-edit-post-html中定义编辑博客文章的模板："><a href="#16-在app-templates-edit-post-html中定义编辑博客文章的模板：" class="headerlink" title="16. 在app/templates/edit_post.html中定义编辑博客文章的模板："></a>16. 在<code>app/templates/edit_post.html</code>中定义编辑博客文章的模板：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;% extends &quot;base.html&quot; %&#125;</div><div class="line">&#123;% import &quot;bootstrap/wtf.html&quot; as wtf %&#125;</div><div class="line"></div><div class="line">&#123;% block title %&#125;Flasky - Edit Post&#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% block page_content %&#125;</div><div class="line">&lt;div class=&quot;page-header&quot;&gt;</div><div class="line">    &lt;h1&gt;Edit Post&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div&gt;</div><div class="line">    &#123;&#123; wtf.quick_form(form) &#125;&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">&#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% block scripts %&#125;</div><div class="line">&#123;&#123; super() &#125;&#125;</div><div class="line">&#123;&#123; pagedown.include_pagedown() &#125;&#125;</div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure><h3 id="17-在app-templates-posts-html中添加一个在文章下面指向编辑文章页面的链接："><a href="#17-在app-templates-posts-html中添加一个在文章下面指向编辑文章页面的链接：" class="headerlink" title="17. 在app/templates/_posts.html中添加一个在文章下面指向编辑文章页面的链接："></a>17. 在<code>app/templates/_posts.html</code>中添加一个在文章下面指向编辑文章页面的链接：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;ul class=&apos;posts&quot;&gt;</div><div class="line">    &#123;% for post in posts %&#125;</div><div class="line">    &lt;li class=&quot;psot&quot;&gt;</div><div class="line">        ...</div><div class="line">        &lt;div class=&quot;post-content&quot;&gt;</div><div class="line">            ....</div><div class="line">            &lt;div class=&quot;post-footer&quot;&gt;</div><div class="line">                &#123;% if current_user == post.author %&#125;</div><div class="line">                &lt;a href=&quot;&#123;&#123;url_for(&apos;main.edit&apos;, id=post.id) &#125;&#125;&quot;&gt;</div><div class="line">                    &lt;span class=&quot;label label-primary&quot;&gt;Edit&lt;/span&gt;</div><div class="line">                &lt;/a&gt;</div><div class="line">                &#123;% elif current_user.is_administrator() %&#125;</div><div class="line">                &lt;a href=&quot;&#123;&#123; url_for(&apos;main.edit&apos;, id=post.id) &#125;&#125;&quot;&gt;</div><div class="line">                    &lt;span class=&quot;label label-danger&quot;&gt;Edit [Admin]&lt;/span&gt;</div><div class="line">                &lt;/a&gt;</div><div class="line">                &#123;% endif %&#125;</div><div class="line">                &lt;a href=&quot;&#123;&#123; url_for(&apos;main.post&apos;, id=post.id) &#125;&#125;&quot;&gt;</div><div class="line">                    &lt;span class=&quot;label label-default&quot;&gt;Permalink&lt;/span&gt;</div><div class="line">                &lt;/a&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">    &#123;% endfor %&#125;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;11-1-提交和显示博客文章&quot;&gt;&lt;a href=&quot;#11-1-提交和显示博客文章&quot; class=&quot;headerlink&quot; title=&quot;11.1 提交和显示博客文章&quot;&gt;&lt;/a&gt;11.1 提交和显示博客文章&lt;/h1&gt;&lt;h3 id=&quot;1-在app-models-py中
      
    
    </summary>
    
    
      <category term="Flask" scheme="https://richardrw.github.io/tags/Flask/"/>
    
      <category term="读书笔记" scheme="https://richardrw.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>把《Flask Web开发》读薄系列之第十章 用户资料</title>
    <link href="https://richardrw.github.io/2017/12/30/%E6%8A%8A%E3%80%8AFlask%20Web%E5%BC%80%E5%8F%91%E3%80%8B%E8%AF%BB%E8%96%84%E7%B3%BB%E5%88%97%E4%B9%8B%E7%AC%AC%E5%8D%81%E7%AB%A0%20%E7%94%A8%E6%88%B7%E8%B5%84%E6%96%99/"/>
    <id>https://richardrw.github.io/2017/12/30/把《Flask Web开发》读薄系列之第十章 用户资料/</id>
    <published>2017-12-30T11:06:09.000Z</published>
    <updated>2017-12-30T11:08:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-1-用户资料信息（个人基本资料）"><a href="#10-1-用户资料信息（个人基本资料）" class="headerlink" title="10.1 用户资料信息（个人基本资料）"></a>10.1 用户资料信息（个人基本资料）</h1><h3 id="1-在app-models-py中增加用户信息字段："><a href="#1-在app-models-py中增加用户信息字段：" class="headerlink" title="1. 在app/models.py中增加用户信息字段："></a>1. 在<code>app/models.py</code>中增加用户信息字段：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">class User(UserMixin, db.Model):</div><div class="line">    # ...</div><div class="line">    name = db.Column(db.String(64))    # 不同于username，可理解为昵称</div><div class="line">    location = db.Column(db.String(64))</div><div class="line">    about_me = db.Column(db.Text())</div><div class="line">    member_since = db.Column(db.DateTime(), default=datetime.utcnow())    # 注册时间</div><div class="line">    last_seen = db.Column(db.DateTime(), default=datetime.utcnow())    # 最后访问时间</div></pre></td></tr></table></figure><ul><li><code>db.String()</code>和<code>db.Text()</code>的区别是<code>db.Text()</code>不用指定最大长度。</li><li><code>db.Column()</code>中的<code>default</code>参数可以接受函数名作为默认值，所以<code>datetime.utcnow</code>后面没有<code>()</code>。</li></ul><h3 id="2-在app-models-py中增加刷新用户最后访问时间功能："><a href="#2-在app-models-py中增加刷新用户最后访问时间功能：" class="headerlink" title="2. 在app/models.py中增加刷新用户最后访问时间功能："></a>2. 在<code>app/models.py</code>中增加刷新用户最后访问时间功能：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">class User(UserMixin, db.Model):</div><div class="line">    # ...</div><div class="line">    </div><div class="line">    def ping(self):</div><div class="line">        self.last_seen = datenow.utcnow()</div><div class="line">        db.session.add(self)</div></pre></td></tr></table></figure><h3 id="3-在app-auth-views-py中更新已登录用户的最后访问时间："><a href="#3-在app-auth-views-py中更新已登录用户的最后访问时间：" class="headerlink" title="3. 在app/auth/views.py中更新已登录用户的最后访问时间："></a>3. 在<code>app/auth/views.py</code>中更新已登录用户的最后访问时间：</h3><p>用户每次访问网站后，<code>last_seen</code>字段都需要进行更新，在每次请求前进行更新，可以满足这个需求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">@auth.before_app_request</div><div class="line">def before_request():</div><div class="line">    if current_user.is_authenticated:</div><div class="line">        current_user.ping()</div><div class="line">        if not current_user.confirmd \</div><div class="line">                and request.endpoint[:5] != &apos;auth.&apos; \</div><div class="line">                and request.endpoint != &apos;static&apos;:</div><div class="line">            return redirect(url_for(&apos;auth.unconfirmed&apos;))</div></pre></td></tr></table></figure><h1 id="10-2-用户资料页面"><a href="#10-2-用户资料页面" class="headerlink" title="10.2 用户资料页面"></a>10.2 用户资料页面</h1><h3 id="1-在app-main-views-py中定义用户资料页面路由："><a href="#1-在app-main-views-py中定义用户资料页面路由：" class="headerlink" title="1. 在app/main/views.py中定义用户资料页面路由："></a>1. 在<code>app/main/views.py</code>中定义用户资料页面路由：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from flask import abort</div><div class="line"># ...</div><div class="line"></div><div class="line">@main.route(&apos;/user/&lt;username&gt;&apos;)</div><div class="line">def user(username):</div><div class="line">    user = User.query.filter_by(username=username).first()</div><div class="line">    if user is None:</div><div class="line">        abort(404)</div><div class="line">    return render_template(&apos;user.html&apos;, user=user)</div></pre></td></tr></table></figure><h3 id="2-在app-templates-user-html编写用户资料页面模板："><a href="#2-在app-templates-user-html编写用户资料页面模板：" class="headerlink" title="2. 在app/templates/user.html编写用户资料页面模板："></a>2. 在<code>app/templates/user.html</code>编写用户资料页面模板：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&#123;% extends &quot;base.html&quot; %&#125;</div><div class="line"></div><div class="line">&#123;% block title %&#125;Flasky - &#123;&#123; user.username &#125;&#125;&#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% block page_content %&#125;</div><div class="line">&lt;div class=&quot;page-header&quot;&gt;</div><div class="line">    &lt;img class=&quot;img-rounded profile-thumbnail&quot; src=&quot;&#123;&#123; user.gravatar(size=256) &#125;&#125;&quot;&gt;</div><div class="line">    &lt;div class=&quot;profile-header&quot;&gt;</div><div class="line">        &lt;h1&gt;&#123;&#123; user.username &#125;&#125;&lt;/h1&gt;</div><div class="line">        &#123;% if user.name or user.location %&#125;</div><div class="line">        &lt;p&gt;</div><div class="line">            &#123;% if user.name %&#125;&#123;&#123; user.name &#125;&#125;&lt;br&gt;&#123;% endif %&#125;</div><div class="line">            &#123;% if user.location %&#125;</div><div class="line">                from &lt;a href=&quot;http://maps.google.com/?q=&#123;&#123; user.location &#125;&#125;&quot;&gt;&#123;&#123; user.location &#125;&#125;&lt;/a&gt;&lt;br&gt;</div><div class="line">            &#123;% endif %&#125;</div><div class="line">        &lt;/p&gt;</div><div class="line">        &#123;% endif %&#125;</div><div class="line">        &#123;% if current_user.is_administrator() %&#125;</div><div class="line">        &lt;p&gt;&lt;a href=&quot;mailto:&#123;&#123; user.email &#125;&#125;&quot;&gt;&#123;&#123; user.email &#125;&#125;&lt;/a&gt;&lt;/p&gt;</div><div class="line">        &#123;% endif %&#125;</div><div class="line">        &#123;% if user.about_me %&#125;&lt;p&gt;&#123;&#123; user.about_me &#125;&#125;&lt;/p&gt;&#123;% endif %&#125;</div><div class="line">        &lt;p&gt;</div><div class="line">            Member since &#123;&#123; moment(user.member_since).format(&apos;L&apos;) &#125;&#125;.</div><div class="line">            Last seen &#123;&#123; moment(user.last_seen).fromNow() &#125;&#125;.</div><div class="line">        &lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure><h3 id="3-在app-templates-base-html导航条中添加一个链接访问用户自己的资料页面："><a href="#3-在app-templates-base-html导航条中添加一个链接访问用户自己的资料页面：" class="headerlink" title="3. 在app/templates/base.html导航条中添加一个链接访问用户自己的资料页面："></a>3. 在<code>app/templates/base.html</code>导航条中添加一个链接访问用户自己的资料页面：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;% if current_user.is_authenticated %&#125;</div><div class="line">&lt;li&gt;</div><div class="line">    &lt;a href=&quot;&#123;&#123; url_for(&apos;main.user&apos;, username=current_user.username) &#125;&#125;&gt;</div><div class="line">        Profile</div><div class="line">    &lt;/a&gt;</div><div class="line">&lt;/li&gt;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure><h1 id="10-3-用户资料编辑器"><a href="#10-3-用户资料编辑器" class="headerlink" title="10.3 用户资料编辑器"></a>10.3 用户资料编辑器</h1><p>用户资料编辑分两种情况：（1）用户自己进入一个页面编辑自己的资料。（2）管理员能够编辑任意用户的资料，不仅包括用户的个人信息，而且还包括普通用户不能直接访问的User模型的字段，如用户角色等。</p><h2 id="10-3-1-普通用户级别的资料编辑器"><a href="#10-3-1-普通用户级别的资料编辑器" class="headerlink" title="10.3.1 普通用户级别的资料编辑器"></a>10.3.1 普通用户级别的资料编辑器</h2><h3 id="1-在app-main-forms-py中添加普通用户用的资料编辑表单："><a href="#1-在app-main-forms-py中添加普通用户用的资料编辑表单：" class="headerlink" title="1. 在app/main/forms.py中添加普通用户用的资料编辑表单："></a>1. 在<code>app/main/forms.py</code>中添加普通用户用的资料编辑表单：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class EditProfileForm(FlaskForm):</div><div class="line">    name = StringField(&apos;Real name&apos;, validators=[Length(0, 64)])</div><div class="line">    location = StringField(&apos;Location&apos;, validators=[Length(0, 64)])</div><div class="line">    about_me = TextAreaField(&apos;About me&apos;)</div><div class="line">    submit = SubmitField(&apos;Submit&apos;)</div></pre></td></tr></table></figure><p><strong>注意</strong>：这个表单中所有字段都是<strong>可选的</strong>， 因此<strong>长度验证函数的长度允许为零</strong>。</p><h3 id="2-在app-main-views-py中定义普通用户进行资料编辑的路由："><a href="#2-在app-main-views-py中定义普通用户进行资料编辑的路由：" class="headerlink" title="2. 在app/main/views.py中定义普通用户进行资料编辑的路由："></a>2. 在<code>app/main/views.py</code>中定义普通用户进行资料编辑的路由：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">@main.route(&apos;/edit-profile&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</div><div class="line">@login_required</div><div class="line">def edit_profile():</div><div class="line">    form = EditProfileForm()</div><div class="line">    if form.validate_on_submit():</div><div class="line">        current_user.name = form.name.data</div><div class="line">        current_user.location = form.location.data</div><div class="line">        current_user.about_me = form.about_me.data</div><div class="line">        db.session.add(current_user._get_current_object())</div><div class="line">        db.session.commit()</div><div class="line">        flash(&apos;Your profile has been updated.&apos;)</div><div class="line">        return redirect(url_for(&apos;main.user&apos;, username=current_user.username))</div><div class="line">    # 在显示表单前（渲染表单前），为表单所有字段设定初始值</div><div class="line">    form.name.data = current_user.name</div><div class="line">    form.location.data = current_user.location</div><div class="line">    form.about_me.data = current_user.about_me</div><div class="line">    return render_template(&apos;edit_profile.html&apos;, form=form)</div></pre></td></tr></table></figure><h3 id="3-在app-templates-user-html中添加普通用户用的编辑资料的链接："><a href="#3-在app-templates-user-html中添加普通用户用的编辑资料的链接：" class="headerlink" title="3. 在app/templates/user.html中添加普通用户用的编辑资料的链接："></a>3. 在<code>app/templates/user.html</code>中添加普通用户用的编辑资料的链接：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">&#123;% if user == current_user %&#125;</div><div class="line">&lt;a class=&quot;btn btn-default&quot; href=&quot;&#123;&#123; url_for(&apos;main.edit_profile&apos;) &#125;&#125;&quot;&gt;</div><div class="line">    Edit Profile</div><div class="line">&lt;/a&gt;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure><p><strong>注意</strong>：链接外层的条件语句可以确保<strong>只有当用户查看自己的资料页面时</strong>才显示这个编辑个人资料的链接。</p><h2 id="10-3-2-管理员级别的资料编辑器"><a href="#10-3-2-管理员级别的资料编辑器" class="headerlink" title="10.3.2 管理员级别的资料编辑器"></a>10.3.2 管理员级别的资料编辑器</h2><h3 id="1-在app-main-forms-py中添加管理员用的资料编辑表单："><a href="#1-在app-main-forms-py中添加管理员用的资料编辑表单：" class="headerlink" title="1. 在app/main/forms.py中添加管理员用的资料编辑表单："></a>1. 在<code>app/main/forms.py</code>中添加管理员用的资料编辑表单：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">class EditProfileAdminForm(FlaskForm):</div><div class="line">    email = StringField(&apos;Email&apos;, validators=[DataRequired(), Length(1, 64),</div><div class="line">                        Email()])</div><div class="line">    username = StringField(&apos;Username&apos;, validators=[DataRequired(), Length(1, 64),</div><div class="line">                                                   Regexp(&apos;^[A-Za-z][A-Za-z0-9_.]*$&apos;, 0,</div><div class="line">                                                          &apos;Username must be have only &apos;</div><div class="line">                                                          &apos;letters, numbers, dots or&apos;</div><div class="line">                                                          &apos;underscores&apos;)])</div><div class="line">    confirmed = BooleanField(&apos;Confirmed&apos;)</div><div class="line">    role = SelectField(&apos;Role&apos;, coerce=int)</div><div class="line">    name = StringField(&apos;Real name&apos;, validators=[Length(0, 64)])</div><div class="line">    location = StringField(&apos;Location&apos;, validators=[Length(0, 64)])</div><div class="line">    about_me = TextAreaField(&apos;About me&apos;)</div><div class="line">    submit = SubmitField(&apos;Submit&apos;)</div><div class="line"></div><div class="line">    def __init__(self, user, *args, **kwargs):</div><div class="line">        super(EditProfileAdminForm, self).__init__(*args, **kwargs)</div><div class="line">        self.role.choices = [(role.id, role.name)</div><div class="line">                             for role in Role.query.order_by(Role.name).all()]</div><div class="line">        # 接受用户对象作为参数（成员变量）</div><div class="line">        self.user = user</div><div class="line"></div><div class="line">    def validate_email(self, field):</div><div class="line">        if field.data != self.user.email and \</div><div class="line">                User.query.filter_by(email=field.data).first():</div><div class="line">            raise ValidationError(&apos;Email already registered.&apos;)</div><div class="line"></div><div class="line">    def validate_username(self, field):</div><div class="line">        if field.data != self.user.username and \</div><div class="line">                User.query.filter_by(username=field.data).first():</div><div class="line">            raise ValidationError(&apos;Username already in use.&apos;)</div></pre></td></tr></table></figure><ul><li><code>SelectFiled()</code>可以实现下拉列表，可用它来选择用户角色。</li><li><code>SelectFiled</code>实例必须在其<code>choices</code>属性中设置可选选项，选项必须是由一个个元组组成的列表，各元组包含两个元素（选项的标识符和显示在控件中的文本字符串）。该例中，远足的标识符是角色的id，因为这个id是整数，所以添加<code>coerce=int</code>参数，从而把字段的值（字符串形式）转换为整数，从而保证这个字段的<code>data</code>属性值是整数。</li><li><code>email</code>和<code>username</code>都定义了自定义函数：验证这两个字段时，首先检查字段的值是否发生改变，如果发生改变，就要保证新值不和其他用户的相应字段重复；如果没有发生变化，则跳过该验证。</li></ul><h3 id="2-在app-main-views-py中定义管理员进行资料编辑的路由："><a href="#2-在app-main-views-py中定义管理员进行资料编辑的路由：" class="headerlink" title="2. 在app/main/views.py中定义管理员进行资料编辑的路由："></a>2. 在<code>app/main/views.py</code>中定义管理员进行资料编辑的路由：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">from app.decorators import admin_required</div><div class="line"># ...</div><div class="line"></div><div class="line">@main.route(&apos;/edit-profile/&lt;int:id&gt;&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</div><div class="line">@login_required</div><div class="line">@admin_required</div><div class="line">def edit_profile_admin(id):</div><div class="line">    user = User.query.get_or_404(id)</div><div class="line">    form = EditProfileAdminForm(user=user)</div><div class="line">    if form.validate_on_submit():</div><div class="line">        user.email = form.email.data</div><div class="line">        user.username = form.username.data</div><div class="line">        user.confirmed = form.confirmed.data</div><div class="line">        user.role = Role.query.get(form.role.data)</div><div class="line">        user.name = form.name.data</div><div class="line">        user.location = form.location.data</div><div class="line">        user.about_me = form.about_me.data</div><div class="line">        db.session.add(user)</div><div class="line">        db.session.commit()</div><div class="line">        flash(&apos;The profile has been updated.&apos;)</div><div class="line">        return redirect(url_for(&apos;.user&apos;, username=user.username))</div><div class="line">    # 在显示表单前（渲染表单前），为表单所有字段设定初始值</div><div class="line">    form.email.data = user.email</div><div class="line">    form.username.data = user.username</div><div class="line">    form.confirmed.data = user.confirmed</div><div class="line">    # 将user.role_id赋值给表单字段</div><div class="line">    form.role.data = user.role_id</div><div class="line">    form.name.data = user.name</div><div class="line">    form.location.data = user.location</div><div class="line">    form.about_me.data = user.about_me</div><div class="line">    return render_template(&apos;edit_profile.html&apos;, form=form, user=user)</div></pre></td></tr></table></figure><ul><li>该例中，要进行编辑的用户由<code>id</code>指定，因此可以使用Flask-SQLAlchemy提供的<code>get_or_404()</code>函数，如果提供的<code>id</code>不正确，则返回<code>404</code>错误。</li><li>将<code>user.role_id</code>赋值给<code>form.role.data</code>是因为步骤1中<code>choices</code>属性设置的元组列表使用数字标识符表示各选项。</li><li>提交表单后，角色<code>id</code>从<code>form.role.data</code>中获取，并通过<code>Role.query.get()</code>方法加载角色对象。</li></ul><h3 id="3-在app-templates-user-html中添加管理员用的资料编辑链接："><a href="#3-在app-templates-user-html中添加管理员用的资料编辑链接：" class="headerlink" title="3. 在app/templates/user.html中添加管理员用的资料编辑链接："></a>3. 在<code>app/templates/user.html</code>中添加管理员用的资料编辑链接：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">&#123;% if current_user.is_administrator() %&#125;</div><div class="line">&lt;a class=&quot;btn btn-danger&quot; href=&quot;&#123;&#123; url_for(&apos;main.edit_proflie_admin&apos;, id=user.id) &#125;&#125;&gt;</div><div class="line">    Edit Profile [Admin]</div><div class="line">&lt;/a&gt;</div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure><h1 id="10-4-用户头像（使网站支持Gravatar提供的用户头像）"><a href="#10-4-用户头像（使网站支持Gravatar提供的用户头像）" class="headerlink" title="10.4 用户头像（使网站支持Gravatar提供的用户头像）"></a>10.4 用户头像（使网站支持Gravatar提供的用户头像）</h1><p>Gravatar可以把头像和电子邮件地址关联起来，使得你在支持Gravatar服务的网站中只需要头像URL就能显示你的头像（网站没有头像功能也能显示用户头像，只要网站支持Gravatar）。</p><p>头像URL由<code>https://secure.gravatar.com/avatar/</code>+<code>电子邮件地址的MD5散列值</code>组成。在浏览器地址栏输入该URL就会看到某电子邮件对应的头像（前提是到<code>http://gravatar.com</code>中注册账户并上传头像），如果没有对应的头像，则会显示一个默认图片。</p><p>头像URL的查询字符串可以包含多个参数，以此配置头像图片的特征（如像素大小等），可设参数如表10-1所示：<br>表10-1 Gravatar查询字符串参数</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>s</td><td>图片大小，单位是像素</td></tr><tr><td>r</td><td>图片级别（有没有暴力倾向等）。可选值有<code>&#39;g&#39;</code>、<code>&#39;pg&#39;</code>、<code>&#39;r&#39;</code>和<code>&#39;x&#39;</code></td></tr><tr><td>d</td><td>没有注册Gravatar服务的用户使用默认图片生成方式。可选值有：(1)<code>&#39;404&#39;</code>，返回404错误；(2)默认图片的URL；(3)图片生成器：<code>&#39;mm&#39;</code>、<code>&#39;identicon&#39;</code>、<code>&#39;monsterid&#39;</code>、<code>&#39;wavatar&#39;</code>、<code>&#39;retro&#39;</code>或<code>&#39;blank&#39;</code>之一</td></tr><tr><td>fd</td><td>强制使用默认头像</td></tr></tbody></table><h3 id="1-在app-models-py中增加avatar-hash字段（用于存储邮箱地址的MD5散列值）、生成邮箱地址的MD5三散列值方法、生成头像URL方法："><a href="#1-在app-models-py中增加avatar-hash字段（用于存储邮箱地址的MD5散列值）、生成邮箱地址的MD5三散列值方法、生成头像URL方法：" class="headerlink" title="1. 在app/models.py中增加avatar_hash字段（用于存储邮箱地址的MD5散列值）、生成邮箱地址的MD5三散列值方法、生成头像URL方法："></a>1. 在<code>app/models.py</code>中增加<code>avatar_hash</code>字段（用于存储邮箱地址的MD5散列值）、生成邮箱地址的MD5三散列值方法、生成头像URL方法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">import hashlib</div><div class="line"># ...</div><div class="line"></div><div class="line">class User(UserMixin, db.Model):</div><div class="line">    # ...</div><div class="line">    avatar_hash = db.Column(db.String(32))</div><div class="line">    </div><div class="line">    def __init__(self, **kwargs):</div><div class="line">        super(User, self).__init__(**kwargs)</div><div class="line">        if self.role is None:</div><div class="line">            if self.email == current_app.config[&apos;FLASKY_ADMIN&apos;]:</div><div class="line">                self.role = Role.query.filter_by(name=&apos;Administrator&apos;).first()</div><div class="line">            if self.role is None:</div><div class="line">                self.role = Role.query.filter_by(default=True).first()</div><div class="line">        if self.email is not None and self.avatar_hash is None:</div><div class="line">            self.avatar_hash = self.gravatar_hash()</div><div class="line">            </div><div class="line">    # 定义生成邮箱地址MD5散列值的方法</div><div class="line">    def gravatar_hash(self):</div><div class="line">        return hashlib.md5(self.emial.lower().encode(&apos;utf-8&apos;)).hexdigest()</div><div class="line">        </div><div class="line">    # 定义生成头像URL的方法</div><div class="line">    def gravatar(self, size=100, default=&apos;identicon&apos;, rating=&apos;g&apos;):</div><div class="line">        url = &apos;https://secure.gravatar.com/avatar&apos;</div><div class="line">        hash = self.gravatar_hash()</div><div class="line">        return &apos;&#123;url&#125;/&#123;hash&#125;?s=&#123;size&#125;&amp;d=&#123;default&#125;&amp;r=&#123;rating&#125;&apos;.format(</div><div class="line">            url=url, hash=hash, size=size, default=default, rating=rating)</div></pre></td></tr></table></figure><p><strong>注意</strong>：由于生成MD5值是一项CPU密集型操作，所以要在某个页面中生成大量头像，计算量会很大。考虑到电子邮件地址的MD5散列值是不变的（电子邮件地址不变前提下），因此可以将MD5值存储到User模型字段中，而不必每次都进行计算，从而得到优化。</p><h3 id="2-在app-templates-user-html中增加资料页面中的头像显示："><a href="#2-在app-templates-user-html中增加资料页面中的头像显示：" class="headerlink" title="2. 在app/templates/user.html中增加资料页面中的头像显示："></a>2. 在<code>app/templates/user.html</code>中增加资料页面中的头像显示：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">&lt;img class=&quot;img-rounded profile-thumbnail&quot; src=&quot;&#123;&#123; user.gravatar(size=256) &#125;&#125;&quot;&gt;</div></pre></td></tr></table></figure><h3 id="3-在-app-templates-base-html”中导航条上添加已登录用户的头像缩略图："><a href="#3-在-app-templates-base-html”中导航条上添加已登录用户的头像缩略图：" class="headerlink" title="3. 在`app/templates/base.html”中导航条上添加已登录用户的头像缩略图："></a>3. 在`app/templates/base.html”中导航条上添加已登录用户的头像缩略图：</h3><p>为了更好地调整页面中头像图片的显示格式，可自定义CSS类，将其放在<code>statics</code>文件夹中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">&#123;% block head %&#125;</div><div class="line">&#123;&#123; super() &#125;&#125;</div><div class="line"># ...</div><div class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;&#123; url_for(&apos;static&apos;, filename=&apos;styles.css&apos;) &#125;&#125;&quot;&gt;</div><div class="line">&#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% blcok navbar %&#125;</div><div class="line"># ...</div><div class="line"></div><div class="line">&lt;ul class=&quot;nav navbar-nav navbar-right&quot;&gt;</div><div class="line">                &#123;% if current_user.is_authenticated %&#125;</div><div class="line">                &lt;li class=&quot;dropdown&quot;&gt;</div><div class="line">                    &lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;</div><div class="line">                        &lt;img src=&quot;&#123;&#123; current_user.gravatar(size=18) &#125;&#125;&quot;&gt;</div><div class="line">                        Account &lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;</div><div class="line">                    &lt;/a&gt;</div><div class="line"># ...</div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;10-1-用户资料信息（个人基本资料）&quot;&gt;&lt;a href=&quot;#10-1-用户资料信息（个人基本资料）&quot; class=&quot;headerlink&quot; title=&quot;10.1 用户资料信息（个人基本资料）&quot;&gt;&lt;/a&gt;10.1 用户资料信息（个人基本资料）&lt;/h1&gt;&lt;h3 i
      
    
    </summary>
    
    
      <category term="Flask" scheme="https://richardrw.github.io/tags/Flask/"/>
    
      <category term="读书笔记" scheme="https://richardrw.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>把《Flask Web开发》读薄系列之第九章 用户角色</title>
    <link href="https://richardrw.github.io/2017/12/30/%E6%8A%8A%E3%80%8AFlask%20Web%E5%BC%80%E5%8F%91%E3%80%8B%E8%AF%BB%E8%96%84%E7%B3%BB%E5%88%97%E4%B9%8B%E7%AC%AC%E4%B9%9D%E7%AB%A0%20%E7%94%A8%E6%88%B7%E8%A7%92%E8%89%B2/"/>
    <id>https://richardrw.github.io/2017/12/30/把《Flask Web开发》读薄系列之第九章 用户角色/</id>
    <published>2017-12-30T11:04:18.000Z</published>
    <updated>2017-12-30T11:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单的程序可能只需要两个角色（普通用户和管理员），对于这种情况，在<code>User</code>模型中添加一个<code>is_administrator</code><strong>布尔值</strong>字段就足够了。</p><p>复杂的用户角色可以通过赋予用户某些<strong>权限的组合</strong>是一种很好的方法。</p><h1 id="9-1-角色在数据库中的表示"><a href="#9-1-角色在数据库中的表示" class="headerlink" title="9.1 角色在数据库中的表示"></a>9.1 角色在数据库中的表示</h1><h3 id="1-在app-models-py中增加用户权限字段："><a href="#1-在app-models-py中增加用户权限字段：" class="headerlink" title="1. 在app/models.py中增加用户权限字段："></a>1. 在<code>app/models.py</code>中增加用户权限字段：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class Role(db.Model):</div><div class="line">    __tablename__ = &apos;roles&apos;</div><div class="line">    id = db.Column(db.Integer, primary_key=True)</div><div class="line">    name = db.Column(db.String(64), unique=True)</div><div class="line">    default = db Column(db.Boolean, default=False, index=True)</div><div class="line">    permission = db.Column(db.Integer)</div><div class="line">    users = db.relationship(&apos;User&apos;, backref=&apos;role&apos;, lazy=&apos;dynamic&apos;)</div></pre></td></tr></table></figure><ul><li><code>deafult</code>字段中的<code>default</code>参数如果设置为<code>True</code>，则该角色为默认角色，用户注册时会默认为该角色（具体实现是给<code>defalut</code>赋值<code>True</code>）。</li><li><code>permission</code>字段为用户权限，其值是一个整数。各权限位值表如下：<br>表9-1 程序的权限</li></ul><table><thead><tr><th>操作</th><th>位值</th><th>说明</th></tr></thead><tbody><tr><td>关注用户</td><td>0b00000001  (0x01)</td><td>关注其他用户</td></tr><tr><td>在他人的文章中发表评论</td><td>0b00000010（0x02）</td><td>在他人撰写的文章中发布评论</td></tr><tr><td>写文章</td><td>0b00000100（0x04）</td><td>写原创文章</td></tr><tr><td>管理他人发表的评论</td><td>0b00001000（0x08）</td><td>查处他人发表的不当评论</td></tr><tr><td>管理员权限</td><td>0b10000000（0x80）</td><td>管理网站</td></tr></tbody></table><h3 id="2-在app-models-py中定义权限常量："><a href="#2-在app-models-py中定义权限常量：" class="headerlink" title="2. 在app/models.py中定义权限常量："></a>2. 在<code>app/models.py</code>中定义权限常量：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Permission:</div><div class="line">    FOLLOW = 0x01</div><div class="line">    COMMENT = 0x02</div><div class="line">    WRTIE_ARTICLES = 0x04</div><div class="line">    MODERATE_COMMENTS = 0x08</div><div class="line">    ADMINISTER = 0x80</div></pre></td></tr></table></figure><p>一般网站的用户角色以及对应拥有的权限如表9-2:</p><p>表9-2 用户角色</p><table><thead><tr><th>用户角色</th><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>匿名</td><td>0b00000000（0x00）</td><td>未登录的用户，在程序中只有阅读权限</td></tr><tr><td>用户</td><td>0b00000111（0x07）</td><td>具有关注其他用户、发表评论和发布文章的权限。这是新用户的默认角色</td></tr><tr><td>协管员</td><td>0b00001111（0x0f）</td><td>增加审查不当评论的权限</td></tr><tr><td>管理员</td><td>0b11111111（oxff）</td><td>具有所有权限，包括修改其他用户所属角色的权限</td></tr></tbody></table><p>这样就可以根据<strong>权限的组合</strong>来组织角色。</p><h3 id="3-在app-models-py中支持创建角色："><a href="#3-在app-models-py中支持创建角色：" class="headerlink" title="3. 在app/models.py中支持创建角色："></a>3. 在<code>app/models.py</code>中支持创建角色：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">class Role(db.Model):</div><div class="line">    # ...</div><div class="line">    </div><div class="line">    @staticmethod</div><div class="line">    def inset_roles():</div><div class="line">        roles = &#123;</div><div class="line">            &apos;User&apos;: [Permission.FOLLOW, Permission.COMMENT,</div><div class="line">                    Permission.WRITE_ARTICLES],</div><div class="line">            &apos;Moderator&apos;: [Permission.FOLLOW, Permission.COMMENT,</div><div class="line">                    Permission.WRITE_ARTICLES, Permission.MODERATE_COMMENT],</div><div class="line">            &apos;Anministrator&apos;: [Permission.FOLLOW, Permission.COMMENT,</div><div class="line">                    Permission.WRITE_ARTICLES,Permission.MODERATE_COMMENT,</div><div class="line">                    Permission.ADMINISTER]</div><div class="line">        &#125;</div><div class="line">        default_role = &apos;User&apos;</div><div class="line">        for roel in roles:</div><div class="line">            # 查找Role表中是否有name=role这角色</div><div class="line">            role = Role.query.filter_by(name=role).first()</div><div class="line">            # 如果没有则创建</div><div class="line">            if role is None:</div><div class="line">                role = Role(name=role)</div><div class="line">            # 将permissio字段的值设为0</div><div class="line">            role.reset_permission()</div><div class="line">            # 添加权限</div><div class="line">            for perm in roles[role]:</div><div class="line">                role.add_permission(perm)</div><div class="line">            # 判断role.name是否为默认角色&apos;User&apos;，如果是则将role.default赋值为True</div><div class="line">            role.default = (role.name == default_role)</div><div class="line">            # 将数据库变化添加到会话中</div><div class="line">            db.session.add(role)</div><div class="line">        # 提交数据库变化</div><div class="line">        db.session.commit()</div></pre></td></tr></table></figure><p><code>insert_roles()</code>函数并不直接创建新角色对象，而是先通过<code>for</code>循环遍历<code>roles</code>，查询Role表中是否有该角色，当表中没有这个角色色才创建角色。</p><h4 id="4-适用shell会话把角色写入数据库："><a href="#4-适用shell会话把角色写入数据库：" class="headerlink" title="4. 适用shell会话把角色写入数据库："></a>4. 适用<code>shell</code>会话把角色写入数据库：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(venv) $ python flasky.py shell</div><div class="line">&gt;&gt;&gt; Role.insert_roles()</div><div class="line">&gt;&gt;&gt; Role.query.all()</div><div class="line">[&lt;Role u&apos;Administrator&apos;&gt;, &lt;Role u&apos;User&apos;&gt;, &lt;Role u&apos;Moderator&apos;&gt;]</div></pre></td></tr></table></figure><h1 id="9-2-赋予角色（在用户注册账户时赋予适当的角色）"><a href="#9-2-赋予角色（在用户注册账户时赋予适当的角色）" class="headerlink" title="9.2 赋予角色（在用户注册账户时赋予适当的角色）"></a>9.2 赋予角色（在用户注册账户时赋予适当的角色）</h1><h3 id="1-在app-models-py中定义默认赋予的用户角色："><a href="#1-在app-models-py中定义默认赋予的用户角色：" class="headerlink" title="1. 在app/models.py中定义默认赋予的用户角色："></a>1. 在<code>app/models.py</code>中定义默认赋予的用户角色：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">class User(UserMixin, db.Model):</div><div class="line">    # ...</div><div class="line">    </div><div class="line">    def __init__(self, **kwargs):</div><div class="line">        super(User, self).__init__(**kwargs)</div><div class="line">        if self.role is None:</div><div class="line">            # 如果email邮箱是管理员邮箱，则赋予‘管理员’角色，否则赋予‘默认’角色</div><div class="line">            if self.email == current_app.config[&apos;FLASKY_ADMIN&apos;]:</div><div class="line">                self.role = Role.query.filter_by(name=&apos;Administrator&apos;).first()</div><div class="line">            if self.role is None:</div><div class="line">                self.role = Role.query.filter_by(dafault=True).first()</div></pre></td></tr></table></figure><p>User类的构造函数首先调用<strong>基类</strong>的构造函数，如果创建<strong>基类对象</strong>后还没有定义角色（即<code>role</code>为<code>None</code>），则根据电子邮件决定将其设为管理员还是默认角色。</p><h1 id="9-3-角色验证（检查是否有指定权限）"><a href="#9-3-角色验证（检查是否有指定权限）" class="headerlink" title="9.3 角色验证（检查是否有指定权限）"></a>9.3 角色验证（检查是否有指定权限）</h1><h3 id="1-在app-models-py中检查用户是否有指定的权限："><a href="#1-在app-models-py中检查用户是否有指定的权限：" class="headerlink" title="1. 在app/models.py中检查用户是否有指定的权限："></a>1. 在<code>app/models.py</code>中检查用户是否有指定的权限：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">from flask_login import UserMixin, AnonymousUserMixin</div><div class="line"># ...</div><div class="line"></div><div class="line">class User(UserMixin, db.model):</div><div class="line">    # ...</div><div class="line">    </div><div class="line">    def can(self, permissions):</div><div class="line">        return self.role is not None and \</div><div class="line">            # 进行位与运算</div><div class="line">            (self.role.permission &amp; permissions) == permissions</div><div class="line">    </div><div class="line">    def is_administrator(self):</div><div class="line">        return self.can(Permission.ADMINSTER)</div><div class="line">        </div><div class="line"></div><div class="line"># 定义匿名用户类</div><div class="line">class AnonymousUser(AnonymousUserMixin):</div><div class="line">    def can(self, permissions):</div><div class="line">        return False</div><div class="line">        </div><div class="line">    def is_administrator(self):</div><div class="line">        return False</div><div class="line">        </div><div class="line"># 实例化AnonymousUser类（即设置用户未登录时current_user的值，</div><div class="line"># 这样程序就不用先检查用户是否登录，都能调用current_user.can()</div><div class="line"># 和current_user.is_administrator()）</div><div class="line">login_manager.anonymous_user = AnonymousUser</div></pre></td></tr></table></figure><h3 id="2-在app-decorators-py中定义用于检查用户权限的修饰器："><a href="#2-在app-decorators-py中定义用于检查用户权限的修饰器：" class="headerlink" title="2. 在app/decorators.py中定义用于检查用户权限的修饰器："></a>2. 在<code>app/decorators.py</code>中定义用于检查用户权限的修饰器：</h3><p>如果想让视图函数只对具有特定权限的用户开放，可以适用自定义的修饰器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">from functools import wraps</div><div class="line">from flask imoprt abort</div><div class="line">from flask_login import current_user</div><div class="line">from app.models import Permission</div><div class="line"></div><div class="line"></div><div class="line">def permission_required(permission):</div><div class="line">    def decorator(func):</div><div class="line">        @wraps(func)</div><div class="line">        def decorated_function(*args, **kwargs):</div><div class="line">            # 判断用户是否具有某特定权限，如果没有则抛出403错误</div><div class="line">            if not current_user.can(permission):</div><div class="line">                abort(403)</div><div class="line">            return func(*args, **kwargs)</div><div class="line">        return decorated_function</div><div class="line">    return decorator</div><div class="line">    </div><div class="line">    </div><div class="line">def admin_required(func):</div><div class="line">    # 相当于调用decorator(func)</div><div class="line">    return permission_required(Permission.ADMINSTER)(func)</div></pre></td></tr></table></figure><h3 id="3-在app-main-init-py中把Permission类加入模板上下文："><a href="#3-在app-main-init-py中把Permission类加入模板上下文：" class="headerlink" title="3. 在app/main/__init__.py中把Permission类加入模板上下文："></a>3. 在<code>app/main/__init__.py</code>中把Permission类加入模板上下文：</h3><p>在模板中可能也需要检查权限，所以<code>Permission</code>类为所有为定义了常量以便获取。</p><p>为了避免每次调用<code>render_template()</code>时多添加一个模板参数，可以使用<strong>上下文管理器</strong>，使得变量在所有模板中全局可访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line">from app.models import Permission</div><div class="line"></div><div class="line">@main.app_context_processor</div><div class="line">def inject_permission():</div><div class="line">    # 实例化Permission类，并将其字典化</div><div class="line">    return dict(Permission=Permission)</div></pre></td></tr></table></figure><h3 id="4-在tests-test-user-model-py中添加角色和权限的单元测试："><a href="#4-在tests-test-user-model-py中添加角色和权限的单元测试：" class="headerlink" title="4. 在tests/test_user_model.py中添加角色和权限的单元测试："></a>4. 在<code>tests/test_user_model.py</code>中添加角色和权限的单元测试：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">class UserModelTestCase(unittest.TestCase):</div><div class="line">    # ...</div><div class="line">    </div><div class="line">    def test_user_role(self):</div><div class="line">        u = User(email=&apos;john@example.com&apos;, password=&apos;cat&apos;)</div><div class="line">        self.assertTrue(u.can(Permission.FOLLOW))</div><div class="line">        self.assertTrue(u.can(Permission.COMMENT))</div><div class="line">        self.assertTrue(u.can(Permission.WRITE))</div><div class="line">        self.assertFalse(u.can(Permission.MODERATE))</div><div class="line">        self.assertFalse(u.can(Permission.ADMIN))</div><div class="line"></div><div class="line">    def test_moderator_role(self):</div><div class="line">        r = Role.query.filter_by(name=&apos;Moderator&apos;).first()</div><div class="line">        u = User(email=&apos;john@example.com&apos;, password=&apos;cat&apos;, role=r)</div><div class="line">        self.assertTrue(u.can(Permission.FOLLOW))</div><div class="line">        self.assertTrue(u.can(Permission.COMMENT))</div><div class="line">        self.assertTrue(u.can(Permission.WRITE))</div><div class="line">        self.assertTrue(u.can(Permission.MODERATE))</div><div class="line">        self.assertFalse(u.can(Permission.ADMIN))</div></pre></td></tr></table></figure><p><strong>注意</strong>：还是那句话，修改数据库模型之后，记得先执行<code>python flasky.py db migrate -m &quot;blablabla&quot;</code>生成数据库迁移脚本，再执行<code>python flasky.py db upgrade</code>更新数据库。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单的程序可能只需要两个角色（普通用户和管理员），对于这种情况，在&lt;code&gt;User&lt;/code&gt;模型中添加一个&lt;code&gt;is_administrator&lt;/code&gt;&lt;strong&gt;布尔值&lt;/strong&gt;字段就足够了。&lt;/p&gt;
&lt;p&gt;复杂的用户角色可以通过赋予用户某
      
    
    </summary>
    
    
      <category term="Flask" scheme="https://richardrw.github.io/tags/Flask/"/>
    
      <category term="读书笔记" scheme="https://richardrw.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>把《Flask Web开发》读薄系列之第八章 用户认证</title>
    <link href="https://richardrw.github.io/2017/12/30/%E6%8A%8A%E3%80%8AFlask%20Web%E5%BC%80%E5%8F%91%E3%80%8B%E8%AF%BB%E8%96%84%E7%B3%BB%E5%88%97%E4%B9%8B%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81/"/>
    <id>https://richardrw.github.io/2017/12/30/把《Flask Web开发》读薄系列之第八章 用户认证/</id>
    <published>2017-12-30T11:00:49.000Z</published>
    <updated>2017-12-30T11:03:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>重点说明</strong>：根据作者的经验，从第八章开始，若只把书上示例的代码敲上去，是很难重复实现书中效果的，基本上都会出错，原因有（1）书中省略了许多代码（2）由于扩展版本的升级，书中部分代码已不再适用。所以，强烈强烈强烈建议边看书边对照着Git上对应标签的版本阅读源代码，以免遇到巨坑又不知道哪里出错又无法debug。此时也提醒一下自己，要把代码实现一遍后再来做笔记，以免自己坑自己白费功夫。</p><h1 id="8-1-Flask的认证扩展"><a href="#8-1-Flask的认证扩展" class="headerlink" title="8.1 Flask的认证扩展"></a>8.1 Flask的认证扩展</h1><ol><li><code>Werkzeug</code>：计算密码的散列值并进行核对（将密码生成散列值，并验证密码是否正确）。</li><li><code>Flask-Login</code>：管理已登录用户的用户会话。</li><li><code>itsdangerous</code>：生成并核对加密安全令牌（例如注册账号验证邮箱时生成验证链接时用）。</li></ol><h1 id="8-2-密码的安全性"><a href="#8-2-密码的安全性" class="headerlink" title="8.2 密码的安全性"></a>8.2 密码的安全性</h1><p>若想保证存储在数据库中的用户密码的安全性，那么就不能存储密码本身，而要存储密码的散列值。当需要核对验证密码是否正确时，核对输入的密码生成的散列值是否与数据库中存储的散列值一致即可。因为计算散列值的函数是可复现的：只要输入一样，结果就一样。</p><h2 id="使用Werkzeug实现密码散列"><a href="#使用Werkzeug实现密码散列" class="headerlink" title="使用Werkzeug实现密码散列"></a>使用Werkzeug实现密码散列</h2><p>Werkzeug中的<code>security</code>模块可以实现散列值的计算。这一功能需要用到两个函数（<code>generate_password_hash()</code>和<code>check_password_hash()</code>)，它们分别用在<strong>注册用户</strong>阶段和<strong>验证用户</strong>阶段。</p><ul><li><p><code>generate_password_hash(password, method=pbkdf2:sha1, salt_length=8)</code>：这个函数将原始密码作为输入，以<strong>字符串</strong>形式输出密码的散列值。<code>method</code>和<code>salt_length</code>的默认值可满足大多数需求。</p></li><li><p><code>check_password_hash(hash, password)</code>：这个函数的参数分别是从数据库中读取的密码散列值，和用户输入的密码。密码正确则返回<code>True</code>。</p></li></ul><h3 id="1-使app-models-py中的User模型支持密码散列："><a href="#1-使app-models-py中的User模型支持密码散列：" class="headerlink" title="1. 使app/models.py中的User模型支持密码散列："></a>1. 使<code>app/models.py</code>中的<code>User</code>模型支持密码散列：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">from werkzeug.security import generate_password_hash, check_password_hash</div><div class="line"># ...</div><div class="line"></div><div class="line">class User(db.Models):</div><div class="line">    # 为User模型增加password_hash字段</div><div class="line">    password_hash = db.Column(db.String(128))</div><div class="line">    </div><div class="line">    # 当试图读取password的值时，返回错误</div><div class="line">    @property</div><div class="line">    def password(self):</div><div class="line">        raise AttributeError(&apos;password is not a readable attribute&apos;)</div><div class="line">    </div><div class="line">    # 计算密码散列值并赋值给passwo_hash    </div><div class="line">    @password.setter</div><div class="line">    def password(self, password):</div><div class="line">        self.password_hash = generate_password_hash(password)</div><div class="line">    </div><div class="line">    # 验证密码是否正确    </div><div class="line">    def verify_password(self, password):</div><div class="line">        return check_password_hash(self.password_hash, password)</div></pre></td></tr></table></figure><p><strong>注意</strong>：User模型中的<code>password</code>属性为只写，不能读取。当给<code>password</code>赋值时，会调用<code>generate_password_hash()</code>函数计算散列值，并赋值给<code>password_hash</code>字段。可见下例。</p><h3 id="2-在shell中测试："><a href="#2-在shell中测试：" class="headerlink" title="2. 在shell中测试："></a>2. 在shell中测试：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">(venv) $ python manage.py shell</div><div class="line">&gt;&gt;&gt; u = User()</div><div class="line">&gt;&gt;&gt; u.password = &apos;cat&apos;   # 根据密码`&apos;cat&apos;`计算散列值并赋值给password_hash字段</div><div class="line">&gt;&gt;&gt; u.password_hash</div><div class="line">&apos;pbkdf2:sha1:1000$duxMk......928bed&apos;</div><div class="line">&gt;&gt;&gt; u.verify_password(&apos;cat&apos;)</div><div class="line">True</div><div class="line">&gt;&gt;&gt; u.verify_password(&apos;dog&apos;)</div><div class="line">False</div><div class="line">&gt;&gt;&gt; u2 = User()</div><div class="line">&gt;&gt;&gt; u2.password = &apos;cat&apos;</div><div class="line">&gt;&gt;&gt; u2.password_hash</div><div class="line">&apos;pbkdf2:sha1:1000$UjvnGe......75ee89&apos;</div></pre></td></tr></table></figure><p><strong>注意</strong>：即使用户<code>u</code>和用户<code>u2</code>都使用了相同的密码，但他们的密码散列值是不一样的。</p><h3 id="3-tests-test-user-model-py支持密码散列测试："><a href="#3-tests-test-user-model-py支持密码散列测试：" class="headerlink" title="3. tests/test_user_model.py支持密码散列测试："></a>3. <code>tests/test_user_model.py</code>支持密码散列测试：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">import unittest</div><div class="line">from app.models import User</div><div class="line"></div><div class="line">class UserModelTestCase(unittest.TestCase):</div><div class="line">    def test_password_setter(self):</div><div class="line">        u = User(password = &apos;cat&apos;)</div><div class="line">        self.assertTrue(u.password_hash is not None)</div><div class="line">        </div><div class="line">    </div><div class="line">    def test_no_password_getter(self):</div><div class="line">        u = User(password=&apos;cat&apos;)</div><div class="line">        with self.assertRaises(AttributeError):</div><div class="line">            u.password</div><div class="line">            </div><div class="line">    </div><div class="line">    def test_password_verification(self):</div><div class="line">        u = User(password=&apos;cat&apos;)</div><div class="line">        self.assertTrue(u.verify_password(&apos;cat&apos;))</div><div class="line">        self.assertFalse(u.verify_password(&apos;dog&apos;)</div><div class="line">        </div><div class="line">    </div><div class="line">    def test_password_salts_are_random(self):</div><div class="line">        u = User(password=&apos;cat&apos;)</div><div class="line">        u2 = User(password=&apos;dog&apos;)</div><div class="line">        self.assertTrue(u.passwors_hahs != u2.password_hash)</div></pre></td></tr></table></figure><h1 id="8-3-创建认证蓝本"><a href="#8-3-创建认证蓝本" class="headerlink" title="8.3 创建认证蓝本"></a>8.3 创建认证蓝本</h1><p>将与用户认证系统相关的路由定义在<code>auth</code>蓝本中。</p><h3 id="1-在app-auth-init-py中创建蓝本："><a href="#1-在app-auth-init-py中创建蓝本：" class="headerlink" title="1. 在app/auth/__init__.py中创建蓝本："></a>1. 在<code>app/auth/__init__.py</code>中创建蓝本：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from flask import Blueprint</div><div class="line"></div><div class="line">auth = Blueprint(&apos;auth&apos;, __name__)</div><div class="line"></div><div class="line">from app.auth import views</div></pre></td></tr></table></figure><h3 id="2-在app-auth-views-py中定义蓝本中的路由和视图函数："><a href="#2-在app-auth-views-py中定义蓝本中的路由和视图函数：" class="headerlink" title="2. 在app/auth/views.py中定义蓝本中的路由和视图函数："></a>2. 在<code>app/auth/views.py</code>中定义蓝本中的路由和视图函数：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from flask import render_template</div><div class="line">from app.auth import auth</div><div class="line"></div><div class="line">@auth.route(&apos;/login&apos;)</div><div class="line">def login():</div><div class="line">    return render_template(&apos;auth/login.html&apos;)</div></pre></td></tr></table></figure><p><strong>注意</strong>：如果配置了多个模板文件夹，<code>render_tempalte()</code>函数首先会搜索程序配置的模板文件夹，然后再搜索蓝本配置的模板文件夹。</p><h3 id="3-在app-init-py中注册蓝本："><a href="#3-在app-init-py中注册蓝本：" class="headerlink" title="3. 在app/__init__.py中注册蓝本："></a>3. 在<code>app/__init__.py</code>中注册蓝本：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">def create_app(config_name):</div><div class="line">    # ...</div><div class="line">    from app.auth import auth as auth_blueprint</div><div class="line">    app.register_blueprint(auth_blueprint, url_prefix=&apos;/auth&apos;)</div><div class="line">    </div><div class="line">    return app</div></pre></td></tr></table></figure><p><strong>注意</strong>：注册蓝本时，<code>url_prefix</code>参数是可选参数，使用这个参数后，蓝本中定义的理由都会加上指定的前缀。如该例中，<code>/login</code>路由会注册成<code>/auth/login</code>，完整的URL就变成<code>http://127.0.0.1:5000/auth/login</code>。</p><h1 id="8-4-使用Flask-Login认证用户"><a href="#8-4-使用Flask-Login认证用户" class="headerlink" title="8.4 使用Flask-Login认证用户"></a>8.4 使用Flask-Login认证用户</h1><p>用户登录程序后，他们的认证状态要被记录下来，这样浏览不同的页面时才能记住这个状态。</p><h2 id="8-4-1-准备用于登录的用户模型"><a href="#8-4-1-准备用于登录的用户模型" class="headerlink" title="8.4.1 准备用于登录的用户模型"></a>8.4.1 准备用于登录的用户模型</h2><p>要想使用Flask-Login扩展，程序的<code>User</code>模型必须实现以下几个方法：<br>表8-1 Flask-Login要求实现的用户方法<br>|方法     | 说明     |<br>|———|———-|<br>|is_authenticated | 如果用户已经登录，必须返回True，否则返回False|<br>|is_active | 如果允许用户登录，必须返回True，否则返回False。如果禁用账户，可以返回False|<br>|is_anonymous | 对普通用户必须返回False|<br>|get_id() | 必须返回用户的唯一标识符，使用Unicode编码字符串|</p><p>Flask-Login提供了一个<code>UserMixin</code>类，其中包含这些方法的默认实现，且能满足大多数需求。</p><h3 id="1-在app-models-py中修改User模型，支持用户登录："><a href="#1-在app-models-py中修改User模型，支持用户登录：" class="headerlink" title="1. 在app/models.py中修改User模型，支持用户登录："></a>1. 在<code>app/models.py</code>中修改User模型，支持用户登录：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from flask_login import UserMixin</div><div class="line"># ...</div><div class="line"></div><div class="line"># 继承UserMixin类</div><div class="line">class User(UserMixin, db.models):</div><div class="line">    __tbalename__ = &apos;users&apos;</div><div class="line">    id = db.Column(db.Integer, primary_key=True)</div><div class="line">    email = db.Column(db.String(64), unique=True, index=True)</div><div class="line">    username = db.Column(db.String(64), unique=True, index=True)</div><div class="line">    password_hash = db.Column(db.String(128))</div><div class="line">    role_id = db.Column(db.Integer, db.ForeignKey(&apos;roles.id&apos;)</div></pre></td></tr></table></figure><h3 id="2-在app-init-py工厂函数中初始化Flask-Login："><a href="#2-在app-init-py工厂函数中初始化Flask-Login：" class="headerlink" title="2. 在app/__init__.py工厂函数中初始化Flask-Login："></a>2. 在<code>app/__init__.py</code>工厂函数中初始化Flask-Login：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">from flask_login import LoginManager</div><div class="line"># ...</div><div class="line"></div><div class="line">login_manager = LoginManager()</div><div class="line">login_manager.session_protection = &apos;strong&apos;</div><div class="line">login_manager.login_view = &apos;auth.login&apos;</div><div class="line"></div><div class="line"></div><div class="line">def create_app(config_name):</div><div class="line">    # ...</div><div class="line">    </div><div class="line">    login_manager.init_app(app)</div><div class="line">    # ...</div><div class="line">    return app</div></pre></td></tr></table></figure><ul><li><code>LoginManager</code>对象的<code>session_protection</code>属性可以设为<code>None</code>、<code>&#39;basic&#39;</code>、<code>&#39;strong&#39;</code>，以提供不同安全等级防止用户会话遭篡改。设为<code>&#39;strong&#39;</code>时，Flask-Login会记录客户端IP地址和浏览器的用户代理信息，如果发现异动，就登出用户。</li><li><code>login_view</code>属性设置登录页面的端点。</li></ul><h3 id="3-Flask-Login要求程序实现一个回调函数，使用指定的标识符加载用户。在app-models-py中定义加载用户的回调函数："><a href="#3-Flask-Login要求程序实现一个回调函数，使用指定的标识符加载用户。在app-models-py中定义加载用户的回调函数：" class="headerlink" title="3. Flask-Login要求程序实现一个回调函数，使用指定的标识符加载用户。在app/models.py中定义加载用户的回调函数："></a>3. Flask-Login要求程序实现一个回调函数，使用指定的标识符加载用户。在<code>app/models.py</code>中定义加载用户的回调函数：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from app import login_manager</div><div class="line"># ...</div><div class="line"></div><div class="line">@login_manager.user_loader</div><div class="line">def load_user(user_id):</div><div class="line">    return User.query.get(int(user_id))</div></pre></td></tr></table></figure><p>加载用户的回调函数接收以Unicode字符串形式表示的用户标识符。如果能找到用户，则返回用户对象，否则返回None。</p><h2 id="8-4-2-保护路由"><a href="#8-4-2-保护路由" class="headerlink" title="8.4.2 保护路由"></a>8.4.2 保护路由</h2><h3 id="1-可以在路由中使用Flask-Login提供的login-required修饰器，使得路由只让认证用户访问（即访问被注册的路由时要先登录用户），如："><a href="#1-可以在路由中使用Flask-Login提供的login-required修饰器，使得路由只让认证用户访问（即访问被注册的路由时要先登录用户），如：" class="headerlink" title="1. 可以在路由中使用Flask-Login提供的login_required修饰器，使得路由只让认证用户访问（即访问被注册的路由时要先登录用户），如："></a>1. 可以在路由中使用Flask-Login提供的<code>login_required</code>修饰器，使得路由只让认证用户访问（即访问被注册的路由时要先登录用户），如：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from flask_login import login_required</div><div class="line"></div><div class="line">@app.route(&apos;/secret&apos;)</div><div class="line">@login_required</div><div class="line">def secret():</div><div class="line">    return &apos;Only authenticated users are allowed!&apos;</div></pre></td></tr></table></figure><p>或者见8.6.2 发送确认邮件中的第三点。</p><h2 id="8-4-3-定义登录表单"><a href="#8-4-3-定义登录表单" class="headerlink" title="8.4.3 定义登录表单"></a>8.4.3 定义登录表单</h2><p>该表单包括一个用于输入电子邮件地址的文本字段、一个密码字段、一个“记住我”复选框、提交按钮。</p><h3 id="1-在app-auth-forms-py中定义登录表单："><a href="#1-在app-auth-forms-py中定义登录表单：" class="headerlink" title="1. 在app/auth/forms.py中定义登录表单："></a>1. 在<code>app/auth/forms.py</code>中定义登录表单：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from flask_wtf import Form</div><div class="line">from wtforms import StringField, PasswordField, BooleanField, SubmitField</div><div class="line">from wtforms.validators import Required, Length, Email</div><div class="line"></div><div class="line">class LoginForm(Form):</div><div class="line">    email = StringField(&apos;Email&apos;, validators=[Required(), Length(1,64), Email()])</div><div class="line">    password = PasswordField(&apos;Password&apos;, validators=[Required()])</div><div class="line">    remember_me = BooleanField(&apos;Keep me logged in&apos;)</div><div class="line">    submit = SubmitField(&apos;Log In&apos;)</div></pre></td></tr></table></figure><p>接下来在模板中渲染表单即可。</p><h3 id="2-在app-templates-base-html导航条中使用Jinja2条件语句，根据当前用户的登录状态显示“Sign-In”或“Sign-Out”："><a href="#2-在app-templates-base-html导航条中使用Jinja2条件语句，根据当前用户的登录状态显示“Sign-In”或“Sign-Out”：" class="headerlink" title="2. 在app/templates/base.html导航条中使用Jinja2条件语句，根据当前用户的登录状态显示“Sign In”或“Sign Out”："></a>2. 在<code>app/templates/base.html</code>导航条中使用Jinja2条件语句，根据当前用户的登录状态显示“Sign In”或“Sign Out”：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;ul class=&quot;nav navbar-nav navbar-right&quot;&gt;</div><div class="line">    &#123;% if current_user.is_authenticated %&#125;</div><div class="line">    &lt;li&gt;</div><div class="line">        &lt;a href=&quot;&#123;&#123; url_for(&apos;auth.logout&apos;) &#125;&#125;&quot;&gt;Sign Out&lt;/a&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">    &#123;% else %&#125;</div><div class="line">    &lt;li&gt;</div><div class="line">        &lt;a href=&quot;&#123;&#123;url_for(&apos;auth.login&apos;) &#125;&#125;&quot;&gt;Sign In&lt;/a&gt;</div><div class="line">    &lt;/li&gt;</div><div class="line">    &#123;% endif %&#125;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure><p><strong>重点注意</strong>：变量<code>current_user</code>是由Flask-Login定义的，而且在视图函数和模板中自动可用。</p><h2 id="8-4-4-登录用户"><a href="#8-4-4-登录用户" class="headerlink" title="8.4.4 登录用户"></a>8.4.4 登录用户</h2><h3 id="1-在app-auth-views-py中定义登录路由："><a href="#1-在app-auth-views-py中定义登录路由：" class="headerlink" title="1. 在app/auth/views.py中定义登录路由："></a>1. 在<code>app/auth/views.py</code>中定义登录路由：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">from flask import render_template, redirect, request, url_for, flash</div><div class="line">from flask_login import login_user    # 导入登录用户函数（由Flask-Login提供）</div><div class="line">from app.auth import auth</div><div class="line">from app.models import User</div><div class="line">from app.auth.froms import LoginForm</div><div class="line"></div><div class="line">@auth.route(&apos;/login&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</div><div class="line">def login():</div><div class="line">    form = LoginForm()</div><div class="line">    if form.validate_on_submit():</div><div class="line">        user = User.query.filter_by(email=form.email.data).first()</div><div class="line">        # 判断用户是否存在、密码是否正确</div><div class="line">        if user is not None and user.verify_password(form.password.data):</div><div class="line">            # login_user()函数由Flask-Login提供</div><div class="line">            # 若用户存在以及密码正确，则调用login_user()函数，</div><div class="line">            # 在用户会话中把用户标记为已登录状态</div><div class="line">            login_user(user, form.remember_me.data)</div><div class="line">            # 返回原先的地址或者主页index</div><div class="line">            return redirect(request.args.get(&apos;next&apos;) or url_for(&apos;main.index&apos;)</div><div class="line">        flash(&apos;Invalid usernane or password&apos;)</div><div class="line">    return render_template(&apos;auth/login.html&apos;, form=form)</div></pre></td></tr></table></figure><p>重定向的URL有两种可能：（1）是用户访问未授权的URL时会显示登录表单，Flask-Login会把原本的地址保存在<code>request.args</code>字典的<code>next</code>键中，可用<code>get()</code>方法获取。（2）是如果<code>next</code>的值为空，则重定向到主页。</p><h3 id="2-在app-templates-auth-login-htm中渲染登录表单："><a href="#2-在app-templates-auth-login-htm中渲染登录表单：" class="headerlink" title="2. 在app/templates/auth/login.htm中渲染登录表单："></a>2. 在<code>app/templates/auth/login.htm</code>中渲染登录表单：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;% extends &quot;base.html&quot; %&#125;</div><div class="line">&#123;% import &quot;bootstrap/wtf.html&quot; as wtf %&#125;</div><div class="line">&#123;% block title %&#125;Flasky - Login&#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% block page_content %&#125;</div><div class="line">&lt;div class=&quot;page_header&quot;&gt;</div><div class="line">    &lt;h1&gt;Login&lt;/h1&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;col-md-4&quot;&gt;</div><div class="line">    &#123;% wtf.quick_form(form) &#125;&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure><h2 id="8-4-5-登出用户"><a href="#8-4-5-登出用户" class="headerlink" title="8.4.5 登出用户"></a>8.4.5 登出用户</h2><h3 id="1-在app-auth-views-py中定义登出路由："><a href="#1-在app-auth-views-py中定义登出路由：" class="headerlink" title="1. 在app/auth/views.py中定义登出路由："></a>1. 在<code>app/auth/views.py</code>中定义登出路由：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from flask_login import logout_user, login_required</div><div class="line"># ...</div><div class="line"></div><div class="line">@auth.route(&apos;/logout&apos;)</div><div class="line">@login_required</div><div class="line">def logout():</div><div class="line">    logout_user()</div><div class="line">    flash(&apos;You have been logged out.&apos;)</div><div class="line">    return redirect(url_for(&apos;main.index&apos;)</div></pre></td></tr></table></figure><p>Flask-Login提供的<code>logout_user()</code>函数：删除并重设用户会话。</p><h2 id="8-4-6-测试登录（在shell中测试）"><a href="#8-4-6-测试登录（在shell中测试）" class="headerlink" title="8.4.6 测试登录（在shell中测试）"></a>8.4.6 测试登录（在shell中测试）</h2><h3 id="1-在app-templates-index-html中为已登录的用户显示一个欢迎消息："><a href="#1-在app-templates-index-html中为已登录的用户显示一个欢迎消息：" class="headerlink" title="1. 在app/templates/index.html中为已登录的用户显示一个欢迎消息："></a>1. 在<code>app/templates/index.html</code>中为已登录的用户显示一个欢迎消息：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Hello,</div><div class="line">&#123;% if current_user.is_authenticates %&#125;</div><div class="line">    &#123;&#123; current_user.username &#125;&#125;</div><div class="line">&#123;% else %&#125;</div><div class="line">    Stranger</div><div class="line">&#123;% endif %&#125;!</div></pre></td></tr></table></figure><h3 id="2-在shell中注册新用户（因为未创建用户注册功能，所以可在shell创建新用户）："><a href="#2-在shell中注册新用户（因为未创建用户注册功能，所以可在shell创建新用户）：" class="headerlink" title="2. 在shell中注册新用户（因为未创建用户注册功能，所以可在shell创建新用户）："></a>2. 在shell中注册新用户（因为未创建用户注册功能，所以可在shell创建新用户）：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(venv)$ python manage.py shell</div><div class="line">&gt;&gt;&gt; u = User(email=&apos;123456@qq.com&apos;, username=&apos;john&apos;, password=&apos;cat&apos;)</div><div class="line">&gt;&gt;&gt; db.session.add(u)</div><div class="line">&gt;&gt;&gt; db.session.commit()</div></pre></td></tr></table></figure><h3 id="3-打开登录页面进行登录"><a href="#3-打开登录页面进行登录" class="headerlink" title="3. 打开登录页面进行登录"></a>3. 打开登录页面进行登录</h3><p>登录后即可显示欢迎消息。</p><h1 id="8-5-注册新用户"><a href="#8-5-注册新用户" class="headerlink" title="8.5 注册新用户"></a>8.5 注册新用户</h1><h2 id="8-5-1-添加用户注册表单"><a href="#8-5-1-添加用户注册表单" class="headerlink" title="8.5.1 添加用户注册表单"></a>8.5.1 添加用户注册表单</h2><p>注册页面使用的表单要求用户输入电子邮件地址、用户名和密码。</p><h3 id="1-在app-auth-forms-py中定义用户注册表单："><a href="#1-在app-auth-forms-py中定义用户注册表单：" class="headerlink" title="1. 在app/auth/forms.py中定义用户注册表单："></a>1. 在<code>app/auth/forms.py</code>中定义用户注册表单：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">from falsk_wtf import Form</div><div class="line">from wtforms import StringField, PasswordField, BooleanField, SubmitField</div><div class="line">from wtforms.validators import Required, Length, Email, Regexp, EqulTo</div><div class="line">from wtforms import ValidationError</div><div class="line">from app.models import User</div><div class="line"></div><div class="line">class RegistrationForm(Form):</div><div class="line">    email = StringField(&apos;Email&apos;, validators=[Required(), Length(1,64), Email()])</div><div class="line">    username = StringField(&apos;Username&apos;, validators=[REquired(), Length(1,64),</div><div class="line">              Regexp(&apos;^[A-Za-z][A-Za-z0-9_.]*$&apos;, 0, &apos;Usernames must have only letters, numbers, dots or underscores&apos;)])</div><div class="line">    password = PasswordField(&apos;Password&apos;, validators=[Required(), EqualTo(&apos;password2&apos;, message=&apos;Password must match&apos;)])</div><div class="line">    password2 = PasswordField(&apos;Confirm password&apos;, validators=[Required()])</div><div class="line">    submit = SubmitField(&apos;Register&apos;)</div><div class="line">    </div><div class="line">    </div><div class="line">    def validate_email(self, field):</div><div class="line">        if User.query.filter_by(email=field.data).first():</div><div class="line">            raise ValidationError(&apos;Email already registered&apos;)</div><div class="line">            </div><div class="line">            </div><div class="line">    def validate_username(self, field):</div><div class="line">        if User.query.filter_by(usernanme=field.data).first():</div><div class="line">            raise ValidationError(&apos;Username already in use&apos;)</div></pre></td></tr></table></figure><ul><li><code>Regexp()</code>验证函数确<code>username</code>字段只包含字母、数字、下划线、点号。该验证函数正则后面的两个参数分别是正则的旗标和验证失败时显示的错误信息。</li><li><code>EqualTo()</code>验证函数确保两个密码字段一致。这个验证函数要附属到两个密码字段中的一个，另一个则作为参数传入。</li><li>该表单还自定义了两个验证函数，以方法的形式实现。如果表单类中定义了以<code>validate_</code>开头且后面跟着<strong>字段名</strong>的方法，这个方法就<strong>和常规的验证函数一起调用</strong>。</li></ul><h3 id="2-渲染template-auth-register-html表单："><a href="#2-渲染template-auth-register-html表单：" class="headerlink" title="2. 渲染template/auth/register.html表单："></a>2. 渲染<code>template/auth/register.html</code>表单：</h3><p>和之前渲染表单一样，使用<code>wtf.quick_form(form)</code>渲染。</p><h3 id="3-在template-auth-login-html中添加注册页面链接："><a href="#3-在template-auth-login-html中添加注册页面链接：" class="headerlink" title="3. 在template/auth/login.html中添加注册页面链接："></a>3. 在<code>template/auth/login.html</code>中添加注册页面链接：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line">&lt;p&gt;</div><div class="line">    New User?</div><div class="line">    &lt;a href=&quot;&#123;&#123; url_for(&apos;auth.register&apos;) &#125;&#125;&quot;&gt;</div><div class="line">        Click here to register</div><div class="line">    &lt;/a&gt;</div><div class="line">&lt;/p&gt;</div></pre></td></tr></table></figure><h2 id="8-5-2-注册新用户（定义注册新用户的路由）"><a href="#8-5-2-注册新用户（定义注册新用户的路由）" class="headerlink" title="8.5.2 注册新用户（定义注册新用户的路由）"></a>8.5.2 注册新用户（定义注册新用户的路由）</h2><h3 id="1-在app-auth-views-py中定义用户注册路由："><a href="#1-在app-auth-views-py中定义用户注册路由：" class="headerlink" title="1. 在app/auth/views.py中定义用户注册路由："></a>1. 在<code>app/auth/views.py</code>中定义用户注册路由：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">@auth.route(&apos;/register&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</div><div class="line">def register():</div><div class="line">    form = RegistationForm()</div><div class="line">    if form.validate_on_submit():</div><div class="line">        user = User(email=form.email.data,</div><div class="line">                    username=form.username.data,</div><div class="line">                    password=form.password.data)</div><div class="line">        db.session.add(user)</div><div class="line">        flash(&apos;You can login now.&apos;)</div><div class="line">        return redirect(url_for(&apos;auth.login&apos;))</div><div class="line">    return render_template(&apos;auth/register.html&apos;, form=form)</div></pre></td></tr></table></figure><h1 id="8-6-确认账户（验证邮箱）"><a href="#8-6-确认账户（验证邮箱）" class="headerlink" title="8.6 确认账户（验证邮箱）"></a>8.6 确认账户（验证邮箱）</h1><p>用户验证邮箱之前，新账户先被标记成待确认状态。账户确认过程，一般会要求用户点击一个包含<strong>确认令牌</strong>的特殊URL链接。</p><h2 id="8-6-1-使用itsdangerous生成确认令牌"><a href="#8-6-1-使用itsdangerous生成确认令牌" class="headerlink" title="8.6.1 使用itsdangerous生成确认令牌"></a>8.6.1 使用itsdangerous生成确认令牌</h2><p><strong>思路</strong>：确认邮件最简单的URL链接是<code>http://www.example.com/auth/confirm/&lt;id&gt;</code>这种形式，其中<code>id</code>是数据库分配给用户的数字id。用户点击链接后，处理这个路由的视图函数将<code>id</code>作为参数进行确认，然后将用户账户状态更新为已确认。</p><p><strong>存在问题</strong>：不安全。只要用户能判断确认链接的格式，就可以随便指定URL中的id，从而验证确认随意账户。</p><p><strong>解决方法</strong>：把URL中的id换成<strong>将相同信息安全加密后得到的令牌</strong>。</p><p><strong>解决工具</strong>：使用<code>itsdangerous</code>包中的<code>TiemdJSONWebSignatureSerializer</code>类提供的<code>dumps()</code>方法和<code>load()</code>方法。</p><h3 id="1-在app-models-py中的User模型中添加验证用户功能："><a href="#1-在app-models-py中的User模型中添加验证用户功能：" class="headerlink" title="1. 在app/models.py中的User模型中添加验证用户功能："></a>1. 在<code>app/models.py</code>中的User模型中添加验证用户功能：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">from itsdangerous import TimedJSONWebSignatureSerializer as Serializer</div><div class="line">from falsk import current_app</div><div class="line">from app import db</div><div class="line"></div><div class="line">class User(db.models):</div><div class="line">    # ...</div><div class="line">    </div><div class="line">    confirmed = db.Column(db.Boolean, default=False)</div><div class="line">    </div><div class="line">    </div><div class="line">    # 使用dumps()生成加密令牌</div><div class="line">    def generate_confirmation_token(self, expiration=3600):</div><div class="line">        s = Serializer(current_app.config[&apos;SECRET_KEY&apos;], expires_in=expiration)</div><div class="line">        return s.dumps(&#123;&apos;confirm&apos;: self.id&#125;)</div><div class="line">        </div><div class="line">    </div><div class="line">    # 解码加密令牌并验证原始数据是否与存储中current_app中已登录用户数据一致</div><div class="line">    def confirm(self, token)</div><div class="line">        s = Serializer(current_app.config[&apos;SECRET_KEY&apos;])</div><div class="line">        try:</div><div class="line">            data = s.loads(token)    # 解码令牌返回原始数据</div><div class="line">        except:</div><div class="line">            return False</div><div class="line">        # 判断原始数据是否跟已登录用户id一致，防止恶意验证</div><div class="line">        if data.get(&apos;confirm&apos;) != self.id:</div><div class="line">            return False</div><div class="line">        self.confirmed = True</div><div class="line">        # 更新confirmed字段</div><div class="line">        db.session.add(self)</div><div class="line">        return True</div></pre></td></tr></table></figure><ul><li><code>TimedJSONWebSignatureSerializer</code>类生成具有国旗时间的JSON Web签名。这个类的构造函数可接受两个参数：<strong>密匙</strong>（可用Flask中的SECRET_KEY密匙）和<code>expires_in</code>（设置过期时间，单位秒）。</li><li><code>dumps()</code>方法为指定的数据生成一个加密签名，然后再对数据和签名进行序列化，生成<strong>令牌字符串</strong>。</li><li><code>loads()</code>方法的唯一参数是<strong>令牌字符串</strong>。这个方法会检验签名和过期时间，如果通过则返回原始数据，否则抛出异常。</li></ul><h2 id="8-6-2-发送确认邮件"><a href="#8-6-2-发送确认邮件" class="headerlink" title="8.6.2 发送确认邮件"></a>8.6.2 发送确认邮件</h2><h3 id="1-在app-auth-views-py中使register路由支持邮件发送："><a href="#1-在app-auth-views-py中使register路由支持邮件发送：" class="headerlink" title="1. 在app/auth/views.py中使register路由支持邮件发送："></a>1. 在<code>app/auth/views.py</code>中使<code>register</code>路由支持邮件发送：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">from app.email import send_email</div><div class="line"># ...</div><div class="line"></div><div class="line">@auth.route(&apos;/register&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</div><div class="line">def register():</div><div class="line">    form = RegistrationForm()</div><div class="line">    if form.validate_on_submit():</div><div class="line">        # ...</div><div class="line">        db.session.add(user)</div><div class="line">        # 在请求结束前先提交User实例，因为提交后才能得到新用户的id，</div><div class="line">        # 从而向generate_confirmation_token方法传参得到token</div><div class="line">        db.session.commit()</div><div class="line">        token = user.generate_confirmation_token()</div><div class="line">        send_mail(user.email, &apos;Confirm Your Account&apos;,</div><div class="line">                  &apos;auth/email/confirm&apos;, user=user, token=token)</div><div class="line">        flash(&apos;A confirmation email has been sent to you by email.&apos;)</div><div class="line">        return redirect(url_for(&apos;main.index&apos;))</div><div class="line">    return render_template(&apos;auth/register.html&apos;, form=form)</div></pre></td></tr></table></figure><p><strong>重点注意</strong>：即便通过设置<code>SQLALCHEMY_COMMIT_ON_TEARDOWN=True</code>，程序可以在请求末尾自动提交数据库变化，但是这里也要调用<code>db.session.commit()</code>提交变化。因为提交数据库后才能得到新用户的id值，从而将id值传参给<code>generate_confirmation_token()</code>方法生成令牌。</p><h3 id="2-在app-template-auth-email-confirm-txt中编写确认邮件文本："><a href="#2-在app-template-auth-email-confirm-txt中编写确认邮件文本：" class="headerlink" title="2. 在app/template/auth/email/confirm.txt中编写确认邮件文本："></a>2. 在<code>app/template/auth/email/confirm.txt</code>中编写确认邮件文本：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Welcome to Flasky!</div><div class="line"></div><div class="line">To confirm your account please click on the following link:</div><div class="line"></div><div class="line">&#123;&#123; url_for(&apos;auth/confirm&apos;, token=token, _external=True) &#125;&#125;</div><div class="line"></div><div class="line">Sincerely,</div><div class="line"></div><div class="line">The Flasky Team</div><div class="line"></div><div class="line">Note: replies to this email address ate not monitored.</div></pre></td></tr></table></figure><p><strong>注意</strong>：默认情况下，<code>url_for()</code>生成的是相对URL，如<code>url_for(&#39;auth.confirm&#39;, token=&#39;abc&#39;)</code>，返回的是<code>/auth/confirm/abc&#39;</code>，显然，这不是能够在电子邮件中发送正确的URL。所以需要使用<code>_external=True</code>参数，从而生成完整的URL。</p><h3 id="3-在app-auth-views-py中定义确认用户的路由："><a href="#3-在app-auth-views-py中定义确认用户的路由：" class="headerlink" title="3. 在app/auth/views.py中定义确认用户的路由："></a>3. 在<code>app/auth/views.py</code>中定义确认用户的路由：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">from flask_login import current_user</div><div class="line"># ...</div><div class="line"></div><div class="line"># 路由中的token将会被作为参数传入视图函数中</div><div class="line">@auth.route(&apos;/confirm/&lt;token&gt;&apos;)</div><div class="line">@login_required</div><div class="line">def confirm(token):</div><div class="line">    # 判断user中是否已经确认过</div><div class="line">    if current_user.confirmed:</div><div class="line">        return redirect(url_for(&apos;main.index&apos;))</div><div class="line">    # 判断调用confirm()方法返回的是True还是False，从而验证用户</div><div class="line">    if current_user.confirm(token):</div><div class="line">        # 提交数据库变化（很重要）</div><div class="line">        db.session.commit()</div><div class="line">        flash(&apos;You have confirm your account. Thanks!&apos;)</div><div class="line">    else:</div><div class="line">        flash(&apos;The confirmation link is invalid or has expired.&apos;)</div><div class="line">    return redirect(url_for(&apos;main.index&apos;)</div></pre></td></tr></table></figure><p>Flask-Login提供的<code>login_required</code>修饰器会保护这个路由：用户点击确认邮件中的链接后，<strong>要先登录</strong>，然后才能执行这个视图函数。</p><h3 id="4-在app-auth-views-py中在before-app-request处理程序中过滤未确认的账户："><a href="#4-在app-auth-views-py中在before-app-request处理程序中过滤未确认的账户：" class="headerlink" title="4. 在app/auth/views.py中在before_app_request处理程序中过滤未确认的账户："></a>4. 在<code>app/auth/views.py</code>中在<code>before_app_request</code>处理程序中过滤未确认的账户：</h3><p>每个程序都可以决定用户在确认账户之前可以有哪些操作，如允许未确认的用户登录，并显示一些内容，但更进一步的看更多内容需要先确认账户。这一步可以使用Flask提供的<code>before_request</code>钩子完成。对于蓝本来说，<code>before_request</code>钩子只能应用到属于蓝本的请求，若想在蓝本中使用针对程序全局请求的钩子，需要使用<code>before_app_request</code>修饰器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">@auth.before_app_request</div><div class="line">def before_request():</div><div class="line">    if current_user.is_authenticated \    # 判断用户是否已登录</div><div class="line">            and not current_user.confirmed \   # 判断用户账户是否已验证</div><div class="line">            and request.endpoint[:5] != &apos;auth.&apos; \   # 判断请求的端点是否不再认证蓝本中</div><div class="line">            and request.endpoint != &apos;static&apos;:</div><div class="line">        return redirect(url_for(&apos;auth.unconfirmed&apos;))</div><div class="line">        </div><div class="line"></div><div class="line">@auth.route(&apos;/unconfirmed&apos;)</div><div class="line">def unconfirmed():</div><div class="line">    if current_user.is_anonymous or current_user.confirmed:</div><div class="line">        return redirect(url_for(&apos;main.index&apos;))</div><div class="line">    return render_template(&apos;auth/unconfirmed.htm&apos;)</div></pre></td></tr></table></figure><p>当满足一下三个条件时，<code>before_app_request</code>处理程序会拦截请求，将请求重定向到<code>/auth/unconfirmed</code>路由，显示一个验证账户相关信息的页面：<br>（1）用户已登录<br>（2）用户的账户还未验证<br>（3）请求的端点（使用<code>request.endpoint</code>获取）不在认证蓝本（<code>/auth</code>)中。</p><h3 id="5-在app-auth-views-py中支持重新发送验证邮件："><a href="#5-在app-auth-views-py中支持重新发送验证邮件：" class="headerlink" title="5. 在app/auth/views.py中支持重新发送验证邮件："></a>5. 在<code>app/auth/views.py</code>中支持重新发送验证邮件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">@auth.route(&apos;/confirm&apos;)</div><div class="line">@login_required</div><div class="line">def resend_confirmation():</div><div class="line">    token = current_user.generate_confirmation_token()</div><div class="line">    send_email(current_user.email, &apos;Confirm Your Account&apos;,</div><div class="line">              &apos;auth/email/confirm&apos;, user=current_user, token=token)</div><div class="line">    flash(&apos;A new confirmation email has been sent to you by email.&apos;)</div><div class="line">    return redirect(url_for(&apos;main.index&apos;))</div></pre></td></tr></table></figure><p>这个路由也用<code>login_required</code>保护（要先登录才能执行视图函数），确保程序知道再次发送验证邮件的是哪个用户。</p><p><strong>重点注意</strong>：凡是修改了数据库模型，为了使新模型能够应用到新程序，要使用Flask-Migrate进行数据库迁移，从而实现更新数据库的效果。</p><h1 id="8-7-管理账户"><a href="#8-7-管理账户" class="headerlink" title="8.7 管理账户"></a>8.7 管理账户</h1><p>修改密码、重设密码、修改电子邮件地址，具体代码实现可查看git仓库。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;重点说明&lt;/strong&gt;：根据作者的经验，从第八章开始，若只把书上示例的代码敲上去，是很难重复实现书中效果的，基本上都会出错，原因有（1）书中省略了许多代码（2）由于扩展版本的升级，书中部分代码已不再适用。所以，强烈强烈强烈建议边看书边对照着Git上对应标
      
    
    </summary>
    
    
      <category term="Flask" scheme="https://richardrw.github.io/tags/Flask/"/>
    
      <category term="读书笔记" scheme="https://richardrw.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>把《Flask Web开发》读薄系列之第七章 大型程序的结构</title>
    <link href="https://richardrw.github.io/2017/11/25/%E6%8A%8A%E3%80%8AFlask%20Web%E5%BC%80%E5%8F%91%E3%80%8B%E8%AF%BB%E8%96%84%E7%B3%BB%E5%88%97%E4%B9%8B%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%A4%A7%E5%9E%8B%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BB%93%E6%9E%84/"/>
    <id>https://richardrw.github.io/2017/11/25/把《Flask Web开发》读薄系列之第七章 大型程序的结构/</id>
    <published>2017-11-25T10:17:41.000Z</published>
    <updated>2017-11-25T10:59:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7-1-项目结构"><a href="#7-1-项目结构" class="headerlink" title="7.1 项目结构"></a>7.1 项目结构</h1><p>多文件Flask程序的结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">|-flasky</div><div class="line">  |-app/</div><div class="line">    |-init__.py</div><div class="line">    |-templates/   # 模板</div><div class="line">    |-static/      # 静态文件</div><div class="line">    |-main/    # 蓝本，名字可更改</div><div class="line">      |-__init__.py</div><div class="line">      |-errors.py  # 路由，视图函数</div><div class="line">      |-forms.py   # 表单</div><div class="line">      |-views.py   # 路由器，视图函数</div><div class="line">    |-email.py   # 邮件支持</div><div class="line">    |-models.py  # 数据库模型</div><div class="line">  |-migrations   # 数据库迁移</div><div class="line">  |-tests/    # 单元测试</div><div class="line">    |-__init__.py</div><div class="line">    |-test*.py</div><div class="line">  |-venv/</div><div class="line">  |-requirements.txt  # 依赖包文本</div><div class="line">  |-config.py  # 配置</div><div class="line">  |-manage.py  # 启动程序</div></pre></td></tr></table></figure></p><h1 id="7-2-配置config-py"><a href="#7-2-配置config-py" class="headerlink" title="7.2 配置config.py"></a>7.2 配置<code>config.py</code></h1><p>在前面的章节中，我们在<code>hello.py</code>中是使用字典状结构配置的（如<code>app.config[&#39;FLASKY_ADMIN&#39;] = 12345678@qq.com</code>），现在我们把相关配置提取出来，在<code>config.py</code>中使用层次结构的配置类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">import os</div><div class="line">basedir = os.path.abspath(os.path.dirname(__file__))</div><div class="line"></div><div class="line"># 设置通用配置</div><div class="line">class Config:</div><div class="line">    SECRET_KEY = os.environ.get(&apos;SECRET_KEY&apos;) or &apos;hard to guess string&apos;</div><div class="line">    SQLALCHEMY_COMMIT_ON_TEARDOWN = True</div><div class="line">    FLASK_MAIL-SUBJECT_PREFECT = &apos;[Flasky]&apos;</div><div class="line">    FLASKY_MAIL_SENDER = &apos;Flasky Admin 123456789@qq.com&apos;</div><div class="line">    FLASK_ADMIN = os.environ.get(&apos;FLASKY_ADMIN&apos;)</div><div class="line">    </div><div class="line">    @staticmethod</div><div class="line">    # init_app()可对当前环境的配置初始化，参数是程序实例</div><div class="line">    def init_app(app):</div><div class="line">        pass</div><div class="line">        </div><div class="line"></div><div class="line"># 开发环境配置（继承Config基类）</div><div class="line">class DevelopmentConfig(Config):</div><div class="line">    DEBUG = True</div><div class="line">    MAIL_SERVER = &apos;smtp.qq.com&apos;</div><div class="line">    MAIL_PORT = 465</div><div class="line">    MAIL_USE_SSL = True</div><div class="line">    MAIL_USENAME = os.environ.get(&apos;MAIL_USENAME&apos;)</div><div class="line">    MAIL_PASSWORD = os.environ.get(&apos;MAIL_PASSWORD&apos;)</div><div class="line">    SQLALCHEMY_DATABASE_URI = os.environ,get(&apos;DEV_DATABASE_URI&apos;) or \&apos;sqlite:///&apos; + os.path.join(basedir, &apos;data-dev.sqlite&apos;)</div><div class="line">    </div><div class="line"></div><div class="line"># 测试环境配置（继承Config基类）    </div><div class="line">class TestingConfig(Config):</div><div class="line">    TESTING = True</div><div class="line">    SQLALCHEMY_DATABASE_URI = os.environ,get(&apos;TEST_DATABASE_URI&apos;) or \&apos;sqlite:///&apos; + os.path.join(basedir, &apos;data-test.sqlite&apos;)</div><div class="line">    </div><div class="line"></div><div class="line"># 生产环境配置（继承Config基类）  </div><div class="line">class ProductionConfig(Config):</div><div class="line">    SQLALCHEMY_DATABASE_URI = os.environ,get(&apos;DATABASE_URI&apos;) or \&apos;sqlite:///&apos; + os.path.join(basedir, &apos;data.sqlite&apos;)</div><div class="line">    </div><div class="line"></div><div class="line"># 配置字典</div><div class="line">config = &#123;</div><div class="line">    &apos;development&apos;: DevelopmentConfig,</div><div class="line">    &apos;testing&apos;: TestingConfig,</div><div class="line">    &apos;production&apos;: ProductionConfig,</div><div class="line">    &apos;default&apos;: DevelopmentConfig</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><h1 id="7-3-程序包（app文件夹）"><a href="#7-3-程序包（app文件夹）" class="headerlink" title="7.3 程序包（app文件夹）"></a>7.3 程序包（app文件夹）</h1><p>程序包用来保存程序的所有代码、模板和静态文件。</p><h2 id="7-3-1-使用程序工厂函数"><a href="#7-3-1-使用程序工厂函数" class="headerlink" title="7.3.1 使用程序工厂函数"></a>7.3.1 使用程序工厂函数</h2><p><strong>存在问题</strong>：在单脚本中开发程序的缺点是：脚步在运行时，程序实例已经创建，已经不能修改配置，自然也无法动态修改配置。这样也不利于单元测试。</p><p><strong>解决思路</strong>：延迟创建程序实例。<br><strong>解决方法</strong>：把创建过程移到可显式调用的<strong>工厂函数</strong>中。<br>这样不仅可以给脚步流出配置程序时间，还能创建多个程序实例。</p><p>程序的<strong>工厂函数在app包的构造文件（<code>__init__.py</code>）中定义</strong>。<br><code>app/__inti__.py</code>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">from flask import Flask</div><div class="line">from flask_bootstrap import Bootstrap</div><div class="line">from flask_mail import Mail</div><div class="line">from flask_moment import Moment</div><div class="line">from flask_sqlalchemy import SQLAlchemy</div><div class="line">from config import config</div><div class="line"></div><div class="line">bootstrap = Bootstrap()</div><div class="line">mail = Mail()</div><div class="line">moment = Moment()</div><div class="line">db = SQLAlchemy()</div><div class="line"></div><div class="line"># 定义工厂函数，参数为程序使用的配置环境名</div><div class="line">def create_app(config_name):</div><div class="line">    app = Flask(__name__)</div><div class="line">    # 根据配置环境名获取对应的配置类从而获取相应的配置（类变量）</div><div class="line">    app.config.from_object(config[&apos;config_name&apos;]</div><div class="line">    # 使用配置类中的init_app()方法初始化配置</div><div class="line">    config[&apos;config_name&apos;].init_app(app)</div><div class="line">    </div><div class="line">    bootstrap.init_app(app)</div><div class="line">    mail.init_app(app)</div><div class="line">    moment.init_app(app)</div><div class="line">    db.init_app(app)</div><div class="line">    </div><div class="line">    # 附加路由和自定义的错误页面</div><div class="line">    </div><div class="line">    return app</div></pre></td></tr></table></figure></p><p><code>config.py</code>文件中定义的配置类，可以使用<code>app.config</code>配置对象提供的<code>from_object()</code>方法直接导入程序。<br>程序创建（<code>app=Flask(__name__)</code>)并配置好后，就能初始化Flask拓展（在Flask拓展实例对象上调用<code>init_app()</code>方法，如<code>bootstrap.init(app)</code>）</p><p><strong>工厂函数返回的是程序实例</strong>，不过此时工厂函数创建的程序实例还不完整，因为还没有路由和自定义的错误页面处理程序（简单来说就是缺少路由）。</p><h1 id="7-3-2-在蓝本中实现程序功能"><a href="#7-3-2-在蓝本中实现程序功能" class="headerlink" title="7.3.2 在蓝本中实现程序功能"></a>7.3.2 在蓝本中实现程序功能</h1><p><strong>存在问题</strong>：在单脚本程序中，程序实例存在于全局作用域中，路由可以直接使用<code>app.route</code>修饰器定义，但是现在程序实例时在运行时创建的（调用<code>create_app()</code>函数），这时定义路由已经太晚了（因为只有调用<code>create_app()</code>函数创建实例后才能使用<code>app.route</code>修饰器，而路由又要定义在<code>create_app()</code>函数里）</p><p><strong>解决方法</strong>：使用<strong>蓝本</strong>。蓝本和程序类似，也可以定义路由，但不同的是：在蓝本中定义的路由会处于休眠状态，直到调用<code>app.register_blueprint()</code>方法把蓝本注册到程序后，路由在真正称为程序的一部分。</p><p><strong>理解蓝本</strong>：蓝本通常作用于相同的URL前缀，如<code>user/id</code>、<code>user/profile</code>这样的地址，都是以<code>/user</code>开头，它们是一组用户相关的操作，那么就可以放在一个模块中。大多数项目都是把蓝本当做拆分视图用的。</p><p>使用位于全局作用域中的蓝本时，定义路由方法和单脚本程序基本一样（不同之处下面会讲到）</p><ol><li>创建蓝本<code>app/main/__init__.py</code>:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from flask import Blueprint</div><div class="line"></div><div class="line">main = Blueprint(&apos;main&apos;, __name__)</div><div class="line"></div><div class="line"># 导入view和error模块，导入之后就能将路由和错误处理程序与蓝本关联起来</div><div class="line">from . import views, errors</div></pre></td></tr></table></figure></li></ol><p><code>Blueprint()</code>类的第一个参数是蓝本名字，第二个参数是篮本所在的包或模块（一般使用<code>__name__</code>即可）。</p><p><strong>注意</strong>： 像<code>view</code>和<code>error</code>这些模块，为了避免循环导入，要在<code>app/main/__init.py__</code>的末尾处导入，因为在<code>view.py</code>和<code>error.py</code>中还要导入蓝本<code>main</code>。</p><ul><li><code>app/main/error.py</code>如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">from flask import render_template</div><div class="line">from . import main</div><div class="line"></div><div class="line">@main.app_errorhandler(404)</div><div class="line">def page_not_found(e):</div><div class="line">    return render_template(&apos;404.html&apos;), 404</div><div class="line">    </div><div class="line">@main.app_errorhandler(500)</div><div class="line">def internal_server_error(e):</div><div class="line">    return render_template(&apos;500.html&apos;), 500</div></pre></td></tr></table></figure><p><strong>注意</strong>：在蓝本中编写错误处理程序稍有不同，如果是使用<code>errorhandler</code>修饰器，那么<strong>只有蓝本中的错误才能触发处理程序</strong>。因此要想注册程序全局的错误处理程序，必须使用<code>app_errorhandler</code>修饰器。</p><ul><li><code>app/main/view.py</code>如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">from datetime import datetime</div><div class="line">from flask import render_template, session, redirect, url_for, current_app</div><div class="line"></div><div class="line">from . import main</div><div class="line">from .froms import NameForm</div><div class="line">from .. import db</div><div class="line">from ..models import User</div><div class="line"></div><div class="line">@main.route(&apos;/&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</div><div class="line">def index():</div><div class="line">    form = NmaeForm()</div><div class="line">    if form.validate_on_submit():</div><div class="line">        # ...</div><div class="line">        return redirect(url_for(&apos;.index&apos;)</div><div class="line">    return render_template(&apos;index.html&apos;, form=form, name=session.get(&apos;name&apos;), </div><div class="line">    know=session.get(&apos;know&apos;, Flase), current_time=datetime.utcnow())</div></pre></td></tr></table></figure><p><strong>注意</strong>：在蓝本中编写视图函数主要有两点不同：（1）和前面的错误处理程序一样，<strong>路由修饰器由蓝本提供</strong>（体现在<code>main.route()</code>，而不是<code>app.route()</code>）。<br>（2）<code>url_for()</code>函数的第一个参数。<code>url_for()</code>函数的第一个参数时路由的<strong>端点名</strong>，在程序中默认为视图函数的名字（所以在单脚本中可以<code>url_for(&#39;index&#39;)</code>），但是在蓝本中，Flask会为蓝本中的全部端点加上一个命名空间（也就是蓝本的名字），这样做是为了可以在不同的蓝本中使用相同的端点名（函数名）定义视图函数。所以该蓝本中视图函数<code>index()</code>注册的端点名是<code>main.index</code>，因此需要使用<code>url_for(&#39;main.index&#39;)</code>，也可以简写为<code>url_for(&#39;.index&#39;)</code>（前提是同一蓝本，跨蓝本的话必须使用带有命名空间的端点名）。</p><p><strong>另外</strong>：模板中的<code>hrfe</code>属性中的链接，使用<code>url_for()</code>获取的，其中参数也是同样写端点名。</p><p><strong>重点注意</strong>：如果在其他地方（如这里的<code>app/main/view.py</code>、<code>app/email.py</code>等）需要用到程序实例<code>app</code>，均需使用<code>from flask import current_app</code>来导入<strong>程序上下文</strong>。</p><p>2.在工厂函数<code>create_app()</code>中把蓝本注册到程序上，<code>app/__init__.py</code>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">def create_app(config_name):</div><div class="line">    # ...</div><div class="line">    </div><div class="line">    # 导入整个包</div><div class="line">    from .main import main as main_blueprint</div><div class="line">    app.register_blueprint(main_blueprint)</div><div class="line">    </div><div class="line">    return app</div></pre></td></tr></table></figure><h1 id="7-4-启动脚本"><a href="#7-4-启动脚本" class="headerlink" title="7.4 启动脚本"></a>7.4 启动脚本</h1><p><code>manage.py</code>用于启动脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line">import os</div><div class="line">from app import create_app, db</div><div class="line">from app.models import User, Role</div><div class="line">from flask_script import Manager, Shell</div><div class="line">from flask_migrate import Migrate, MigrateCommand</div><div class="line"></div><div class="line"># 获取配置名，并创建程序</div><div class="line">app = create_app(os.getenv(&apos;FLASK_CONFIG&apos;) or &apos;default&apos;)</div><div class="line">manager = Manager(app)</div><div class="line">migrate = Migrate(app, db)</div><div class="line"></div><div class="line">def make_shell_context():</div><div class="line">    return dict(app=app, db=db, User=User, Role=Role)</div><div class="line"></div><div class="line">manager.add_command(&apos;shell&apos;, Shell(make_context=make_shell_context))</div><div class="line">manager.add_command(&apos;db&apos;, MigrateCommand)</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    manager.run()</div></pre></td></tr></table></figure></p><p>在脚本中加入了<code>#!/usr/bin/env python</code>声明，因此在Unix系统中可以直接通过<code>./manage.py</code>命令运行脚步，而无需使用<code>python manage.py</code>命令。</p><h1 id="7-5-需求文件"><a href="#7-5-需求文件" class="headerlink" title="7.5 需求文件"></a>7.5 需求文件</h1><p><code>requirements.txt</code>文件：用于记录所有依赖包及其精确的版本号。可以使用如下命令自动生成这个文件：<br><code>(venv) $ pip freeze &gt; requirements.txt</code></p><p>当要创建同一个环境时，可以使用如下命令：<br><code>(venv) $ pip install -r requirements.txt</code></p><h1 id="7-6-单元测试"><a href="#7-6-单元测试" class="headerlink" title="7.6 单元测试"></a>7.6 单元测试</h1><ol><li><code>tests/test_basics.py</code>文件如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">import unittest</div><div class="line">from flask import current_app</div><div class="line">from app import create_app, db</div><div class="line"></div><div class="line">class BasicsTestCase(unittest.TestCase):</div><div class="line">    # 创建一个测试环境，并激活程序上下文，并创建数据库</div><div class="line">    def setUp(self):</div><div class="line">        self.app = create_app(&apos;testing&apos;)</div><div class="line">        self.app_context = self.app.app_context()</div><div class="line">        self.app_context.push()</div><div class="line">        db.create_all()</div><div class="line">       </div><div class="line">    # 删除数据库、程序上下文 </div><div class="line">    def tearDown(self):</div><div class="line">        db.session.remove()</div><div class="line">        db.drop_all()</div><div class="line">        self.app_context.pop()</div><div class="line">       </div><div class="line">    # 测试程序实例是否存在 </div><div class="line">    def test_app_exists(self):</div><div class="line">        self.assertFalse(current_app is None)</div><div class="line">        </div><div class="line">    # 测试程序的环境是否为TESTING</div><div class="line">    def test_app_is_testing(self):</div><div class="line">        self.assertTrue(current_app.config[&apos;TESTING&apos;])</div></pre></td></tr></table></figure><p><code>setUp()</code>和<code>tearDown()</code>方法分别在各测试前后运行。函数名字以<code>test_</code>开头的函数都作为测试执行。</p><ol><li>运行单元测试。可在<code>manage.py</code>文件中添加一个自定义命令，用于执行测试：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">@manager.command</div><div class="line">def test():</div><div class="line">    # 字符串内容会显示在帮助消息中</div><div class="line">    &quot;&quot;&quot;Run the unit tests&quot;&quot;&quot;</div><div class="line">    import unittest</div><div class="line">    tests = unittest.TestLoader().discover(&apos;tests&apos;)</div><div class="line">    unittest.TextRunner(verbosity=2).run(tests)</div></pre></td></tr></table></figure><p><code>manager.command</code>修饰器修饰的函数名就是命令名。因此可以使用如下命令运行测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(venv) $ python manage.py test</div><div class="line">test_app_exits (test_basics.BasicsTestCase) ... ok</div><div class="line">test_app_is_testing  (test_basics.BasicsTestCase) ... ok</div><div class="line"></div><div class="line">--------------------------------------------------------</div><div class="line">Ran 2 tests in 0.001s</div><div class="line"></div><div class="line">OK</div></pre></td></tr></table></figure><h1 id="7-7-创建数据库"><a href="#7-7-创建数据库" class="headerlink" title="7.7 创建数据库"></a>7.7 创建数据库</h1><p>首先需要在环境变量中定义所需要的数据库URI，然后再创建数据库。</p><p>不管从哪里获取数据库URI，都要在新数据库中创建数据表，如果使用Flask-Migrate跟踪迁移，可以使用如下命令创建<strong>数据表</strong>或者<strong>更新到最新版本</strong>：<br><code>(venv) $ python manage.py db upgrade</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;7-1-项目结构&quot;&gt;&lt;a href=&quot;#7-1-项目结构&quot; class=&quot;headerlink&quot; title=&quot;7.1 项目结构&quot;&gt;&lt;/a&gt;7.1 项目结构&lt;/h1&gt;&lt;p&gt;多文件Flask程序的结构：&lt;br&gt;&lt;figure class=&quot;highlight pla
      
    
    </summary>
    
    
      <category term="Flask" scheme="https://richardrw.github.io/tags/Flask/"/>
    
      <category term="读书笔记" scheme="https://richardrw.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>把《Flask Web开发》读薄系列之第六章 电子邮件</title>
    <link href="https://richardrw.github.io/2017/11/14/%E6%8A%8A%E3%80%8AFlask%20Web%E5%BC%80%E5%8F%91%E3%80%8B%E8%AF%BB%E8%96%84%E7%B3%BB%E5%88%97%E4%B9%8B%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/"/>
    <id>https://richardrw.github.io/2017/11/14/把《Flask Web开发》读薄系列之第六章 电子邮件/</id>
    <published>2017-11-14T12:57:23.000Z</published>
    <updated>2017-11-25T10:59:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Flask-Mail提供电子邮件支持"><a href="#使用Flask-Mail提供电子邮件支持" class="headerlink" title="使用Flask-Mail提供电子邮件支持"></a>使用Flask-Mail提供电子邮件支持</h1><p>表6-1 Flask-Mail SMTP服务器的配置</p><table><thead><tr><th>配置</th><th>默认值</th><th>说明       </th></tr></thead><tbody><tr><td>MAIL_SERVER</td><td>localhost</td><td>邮件服务器主机名或IP地址</td></tr><tr><td>MAIL_PORT</td><td>25</td><td>电子邮件服务器的端口</td></tr><tr><td>MAIL_USE_TLS</td><td>False</td><td>启用传输层安全（TLS）协议</td></tr><tr><td>MAIL_USE_SSL</td><td>False</td><td>启用安全套接层（SSL）协议</td></tr><tr><td>MAIL_USENAME</td><td>None</td><td>邮件账户的用户名</td></tr><tr><td>MAIL_PASSWORD</td><td>None</td><td>邮件账户的授权码</td></tr></tbody></table><ol><li>在<code>hello.py</code>中配置Flask-Mail使用QQ邮箱：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import os</div><div class="line"># ...</div><div class="line"></div><div class="line">app.config[&apos;MAIL_SERVER&apos;] = &apos;smtp.qq.com&apos;</div><div class="line">app.config[&apos;MAIL_PORT&apos;] = 465</div><div class="line">app.config[&apos;MAIL_USE_SSL&apos;] = True</div><div class="line">app.config[&apos;MAIL_USERNAME&apos;] = os.environ.get(&apos;MAIL_USERNAME&apos;)</div><div class="line">app.config[&apos;MAIL_PASSWORD&apos;] = os.environ.get(&apos;MAIL_PASSWORD&apos;)</div></pre></td></tr></table></figure><p><strong>注意</strong>：千万不要把账号密令直接写在脚本中，应该从环境变量中导入。</p><ol><li>初始化Flask-Mail：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from flask_mail import Mail</div><div class="line"># ...</div><div class="line"></div><div class="line">mail = Mail(app)</div></pre></td></tr></table></figure><ol><li>在环境变量中定义<code>MAIL_USERNAME</code>和<code>MAIL_PASSWORD</code>：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(venv) $ export MAIL_USERNAME=&apos;12345678@qq.com&apos;</div><div class="line">(venv) $ export MAIL_PASSWORD=&apos;qwertyuiop&apos;</div></pre></td></tr></table></figure><p>此时可以使用<code>echo</code>命令打印出来检查一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(venv) $ echo $MAIL_USERNAME</div><div class="line">&gt;&gt;&gt; &apos;12345678@qq.com&apos;</div><div class="line">(venv) $ echo $MAIL_PASSWORD</div><div class="line">&gt;&gt;&gt; &apos;qwertyuiop&apos;</div></pre></td></tr></table></figure></p><p>定义环境变量后，此时在<strong>同一个终端中</strong>执行<code>python hello.py shell</code>命令，便能获取到想要的环境变量。</p><p><strong>注意</strong>：如果定义好环境变量后把终端关闭再重新打开，那么此时是没有上次定义的环境变量的。所以需要在同一个终端中执行。</p><p>如何让QQ邮箱开启SMTP功能，可以参考<a href="http://blog.csdn.net/lagelangzhi/article/details/51717433" target="_blank" rel="external">flask-mail常见的邮箱配置问题解决</a></p><h1 id="在Python-shell中发送电子邮件"><a href="#在Python-shell中发送电子邮件" class="headerlink" title="在Python shell中发送电子邮件"></a>在Python shell中发送电子邮件</h1><p>在上一个终端中，发送电子邮件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(venv) $ python hello.py shell</div><div class="line">&gt;&gt;&gt; from flask_mail import Message</div><div class="line">&gt;&gt;&gt; from hello import mail</div><div class="line">&gt;&gt;&gt; msg = Message(&apos;test subject&apos;, sender=&apos;12345678@qq.com&apos;, recipients=[&apos;87654321@qq.com&apos;])</div><div class="line">&gt;&gt;&gt; msg.body = &apos;test body&apos;</div><div class="line">&gt;&gt;&gt; msg.html = &apos;&lt;p&gt;test body&lt;/p&gt;&apos;</div><div class="line">&gt;&gt;&gt; with app.app_context():</div><div class="line">···    mail.send(msg)</div></pre></td></tr></table></figure></p><p><strong>注意</strong>：在Flask-Mail中的<code>send()</code>函数使用<code>current_app</code>（程序上下文），因此在shell中发送邮件，需要激活程序上下文。</p><h1 id="在程序中集成发送电子邮件功能"><a href="#在程序中集成发送电子邮件功能" class="headerlink" title="在程序中集成发送电子邮件功能"></a>在程序中集成发送电子邮件功能</h1><ol><li>定义用于发邮件的函数，使<code>hello.py</code>支持电子邮件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">from flask_mail import Message</div><div class="line"># ...</div><div class="line"></div><div class="line"># 给邮件标题添加一个前缀</div><div class="line">app.config[&apos;FLASKY_MAIL_SUBJECT_PREFIX&apos;] = &apos;[Flasky]&apos;</div><div class="line"># 定义发件人</div><div class="line">app.config[&apos;FLASKY_MAIL_SENDER&apos;] = &apos;12345678@qq.com&apos;</div><div class="line"></div><div class="line">def send_email(recipients, subject, template, **kwargs):</div><div class="line">    msg = Message(app.config[&apos;FLASKY_MAIL_SUBJECT_PREFIX&apos;] + subject, sender=app.config[&apos;FLASKY_MAIL_SENDER&apos;], recipients=[recilients])</div><div class="line">    msg.body = render_template(template + &apos;.txt&apos;, **kwargs)</div><div class="line">    msg.html = render_template(template + &apos;.html&apos;, **kwargs)</div><div class="line">    mail.send(msg)</div></pre></td></tr></table></figure><p>邮件有纯文本<code>.txt</code>，也有HTML文本<code>.html</code>，客户端显示哪个，取决于邮件客户端的设置。</p><p><strong>拓展</strong>：为什么<code>send()</code>函数中需要<code>**kwargs</code>？<code>**kwargs</code>的作用是什么？<br>答：（1）因为我们不确定模板中需要什么变量参数，在此例中，模板需要的时<code>user</code>这个参数，但是如果换成别的模版，它不仅需要<code>user</code>参数，也需要其他一些参数（如datatime等，关键取决于模板设计成什么样），此时如果我们死死地把<code>send_email()</code>函数写成<code>send_email(recipient, subject, template, user)</code>，那么就失去了灵活性，当换成其他模版时，<code>datatime</code>参数也就无法传入了，因此<code>send()</code>函数需要<code>**kwargs</code>。<br>（2）<code>**kwargs</code>的作用是：当我们不知道需要往函数中传入多少个关键字参数或者想以字典的形式作为参数时，我们可以用<code>**kwargs</code>，这样我们就可以根据实际情况需要，往函数中传入特定个数的参数（数量使具体情况而定）。</p><ol><li>结合视图函数发送电子邮件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"># 定义收件人为Flasky的管理员</div><div class="line">app.config[&apos;FLASKY_ADMIN&apos;] = os.environ.get(&apos;FLASKY_ADMIN&apos;)</div><div class="line"># ...</div><div class="line"></div><div class="line">@app.route(&apos;/&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;]</div><div class="line">def index():</div><div class="line">    form = NameForm()</div><div class="line">    if form.validate_on_submit():</div><div class="line">        session[&apos;name&apos;] = form.name.data</div><div class="line">        # 查找数据库中是否有该用户名，如果没有，就向数据库中添加新用户，</div><div class="line">        # 因为前面已经设置了SQLALCHEMY_COMMIT_ON_TEARDOWN，所以当请求结束时会自动提交事务</div><div class="line">        user = User.query.filter_by(user_name=form.name.data).first()</div><div class="line">        if user is None:</div><div class="line">            # 插入数据库</div><div class="line">            user = User(user_name=form.name.data)</div><div class="line">            db.session.add(user)</div><div class="line">            # 用于模板中判断是显示Pleased to meet you 还是 Happy to see you again</div><div class="line">            session[&apos;known&apos;] = Flase</div><div class="line">            # 如果收件人不为空，则发送邮件</div><div class="line">            if app.config[&apos;FLASKY_ADMIN&apos;]:</div><div class="line">                send_email(app.config[&apos;FLASKY_ADMIN&apos;], &apos;New User&apos;, &apos;mail/new_user&apos;, user=user)</div><div class="line">        else:</div><div class="line">            session[&apos;konwn&apos;] = True</div><div class="line">        return redirect(url_for(&apos;index&apos;)</div><div class="line">    return render_template(&apos;index.html&apos;, form=form, name=session.get(&apos;name&apos;), known=session.get(&apos;known&apos;, Flase))</div></pre></td></tr></table></figure><p>此时我们也需要定义环境变量<code>FLASKY_ADMIN</code>：<br><code>(venv) $ export FLASKY_ADMIN=&#39;12345678@qq.com&#39;</code></p><p><code>template</code>文件夹下的模板文件<code>mail/new_user</code>有两个，分别为<code>new_user.txt</code>和<code>new_user.html</code>。</p><p><code>new_user.txt</code>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">There has a new user that name is &#123;&#123; user.user_name &#125;&#125;</div></pre></td></tr></table></figure></p><p><code>new_user.html</code>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;There has a new user that name is &#123;&#123; user.user_name &#125;&#125;&lt;/h1&gt;</div></pre></td></tr></table></figure></p><h1 id="异步发送电子邮件"><a href="#异步发送电子邮件" class="headerlink" title="异步发送电子邮件"></a>异步发送电子邮件</h1><p>为了避免处理请求过程中不必要的延迟，我们可以把发送电子邮件的函数移到后台线程中处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">from threading import Thread</div><div class="line"># ...</div><div class="line"></div><div class="line">def send_async_email(app, msg):</div><div class="line">    with app.app_context():</div><div class="line">        mail.send(msg)</div><div class="line">        </div><div class="line">def send_email(recipients, subject, template, **kwargs):</div><div class="line">    msg = Message(app.config[&apos;FLASKY_MAIL_SUBJECT_PREFIX&apos;] + subject, sender=app.config[&apos;FLASKY_MAIL_SENDER&apos;], recipients=[recilients])</div><div class="line">    msg.body = render_template(template + &apos;.txt&apos;, **kwargs)</div><div class="line">    msg.html = render_template(template + &apos;.html&apos;, **kwargs)</div><div class="line">    thr = Thread(target=send_async_email, args=[app, msg])</div><div class="line">    thr.start()</div><div class="line">    return thr</div></pre></td></tr></table></figure></p><p><strong>注意</strong>：由于在不同线程中执行<code>mail.send()</code>函数，就如前面<em>在Python shell中发送电子邮件</em>章节中提到，<code>send()</code>函数需要程序<code>current_app</code>（程序上下文）中执行，因此需要在执行<code>send()</code>函数的线程中使用<code>app.app_context()</code>人工创建<code>current_app</code>。</p><p>当需要发送大量电子邮件时，使用专门发送电子邮件的作业（如<a href="http://www.celeryproject.org" target="_blank" rel="external">Celery</a>任务队列）处理更合适。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用Flask-Mail提供电子邮件支持&quot;&gt;&lt;a href=&quot;#使用Flask-Mail提供电子邮件支持&quot; class=&quot;headerlink&quot; title=&quot;使用Flask-Mail提供电子邮件支持&quot;&gt;&lt;/a&gt;使用Flask-Mail提供电子邮件支持&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="Flask" scheme="https://richardrw.github.io/tags/Flask/"/>
    
      <category term="读书笔记" scheme="https://richardrw.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>把《Flask Web开发》读薄系列之第五章 数据库</title>
    <link href="https://richardrw.github.io/2017/11/14/%E6%8A%8A%E3%80%8AFlask%20Web%E5%BC%80%E5%8F%91%E3%80%8B%E8%AF%BB%E8%96%84%E7%B3%BB%E5%88%97%E4%B9%8B%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://richardrw.github.io/2017/11/14/把《Flask Web开发》读薄系列之第五章 数据库/</id>
    <published>2017-11-14T12:56:25.000Z</published>
    <updated>2017-11-25T10:59:27.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5-1-SQL数据库"><a href="#5-1-SQL数据库" class="headerlink" title="5.1 SQL数据库"></a>5.1 SQL数据库</h1><p>表中有个特殊的列，称为<strong>主键</strong>，其值是表中各行的唯一标识符，表中还可以有称为<strong>外键</strong>的列，<strong>引用同一个表或不同表中某行的主键</strong>，行之间的这种联系称为<strong>关系</strong>，这是SQL数据库的基础。</p><h1 id="5-2-NoSQL数据库"><a href="#5-2-NoSQL数据库" class="headerlink" title="5.2 NoSQL数据库"></a>5.2 NoSQL数据库</h1><p>所有不遵循上节所述关系模型的数据库统称为NoSQL数据库。NoSQL数据库一般使用<strong>集合Collection</strong>代替表，使用<strong>文档Document</strong>代替记录（行）。</p><p>NoSQL数据库可以减少表的数量，但却增加了数据重复量，但数据重复又可以提高查询速度。</p><h1 id="5-3-使用SQL还是NoSQL"><a href="#5-3-使用SQL还是NoSQL" class="headerlink" title="5.3 使用SQL还是NoSQL"></a>5.3 使用SQL还是NoSQL</h1><p>视实际情况所需。</p><h1 id="5-4-Python数据库框架"><a href="#5-4-Python数据库框架" class="headerlink" title="5.4 Python数据库框架"></a>5.4 Python数据库框架</h1><p>数据库包：MySQL、Postgres、SQLite、Redis、MongoDB、CouchDB<br>数据库抽象层代码包（ORM或ODM）：SQLAlchemy、MongoEngine</p><p>一般情况下，ORM和ODM对生产率的提升远远超过“把对象业务转换成数据库业务”而带来的性能降低。</p><h1 id="5-5-使用Flask-SQLAlchemy管理数据库"><a href="#5-5-使用Flask-SQLAlchemy管理数据库" class="headerlink" title="5.5 使用Flask-SQLAlchemy管理数据库"></a>5.5 使用Flask-SQLAlchemy管理数据库</h1><p>在Flask-SQLAlchemy中，使用哪种数据库，要通过URL指定。常用的数据库引擎采用的数据库URL格式如下：</p><p>表5-1 Flask-SQLAlchemy数据库URL</p><table><thead><tr><th>数据库引擎</th><th style="text-align:left">URL</th></tr></thead><tbody><tr><td>MySQL</td><td style="text-align:left">mysql://username:password@hostname/database</td></tr><tr><td>Postgres</td><td style="text-align:left">postgres://username:password@hostname/database</td></tr><tr><td>SQLite(Unix)</td><td style="text-align:left">sqlite:////absolute/path/to/database</td></tr><tr><td>SQLite(Windows)</td><td style="text-align:left">sqlite:///c:/absolute/path/to/database</td></tr></tbody></table><p><code>hostname</code>可以是本地主机（<code>localhost</code>)，也可以是原创服务器。<br><code>database</code>表示要使用的数据库名称。</p><p>程序使用的数据库URL必须保存到Flask配置对象的<code>SQLALCHEMY_DATABASE_URI</code>键中。<br>配置对象中有个<code>SQLALCHEMY_COMMIT_ON_TEARDOWN</code>键，将其设为<code>True</code>时，每次请求结束后都会自动提交数据库中的变动（相当于自动<code>commit</code>）。</p><p>初始化及配置SQLite如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">form flask_sqlalchemy import SQLAlchemy</div><div class="line">import os</div><div class="line"># ...</div><div class="line"></div><div class="line"># 获取文件当前文件父路径</div><div class="line">basedir = os.path.abspath(os.path.dirname(__file__))</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.config[&apos;SQLALCHEMY_DATABASE_URI`] = &apos;sqlite:///&apos; + os.path.join(basedir, &apos;data.sqlite&apos;)</div><div class="line">app.config[`SQLALCHEMY_COMMIT_ON_TEARDOWN`] = True</div><div class="line"></div><div class="line">db = SQLAlchemy(app)</div></pre></td></tr></table></figure></p><p><code>db</code>对象是SQLAlchemy类的实例，表示程序所使用的数据库。</p><h1 id="5-6-定义模型"><a href="#5-6-定义模型" class="headerlink" title="5.6 定义模型"></a>5.6 定义模型</h1><p>在ORM中，模型（相当于数据库表table）一般是个Python类，类中的属性对应数据库表中的列。</p><p>在hello.py中定义Role模型和User模型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Role(db.Model):</div><div class="line">    __tablename__ &apos;roles&apos;</div><div class="line">    id = db.Column(db.Integer, primary_key=True)</div><div class="line">    role_name = db.Column(db.String(64), unique=True)</div><div class="line">    </div><div class="line">    def __repr__(self):</div><div class="line">        return &apos;&lt;Role &#123;&#125;&gt;&apos;.format(self.role_name)</div><div class="line">  </div><div class="line">def User(db.Model):</div><div class="line">    __tablename__ = &apos;users&apos;</div><div class="line">    id = db.Column(db.integer, primary_key=True)</div><div class="line">    user_name = db.Column(db.String(64), unique=True, index=True)</div><div class="line">    </div><div class="line">    def __repr__(self):</div><div class="line">        return &apos;&lt;User &#123;&#125;&gt;&apos;.format(self.user_name)</div></pre></td></tr></table></figure></p><p>类变量<code>__tablename__</code>定义在数据库中使用的<strong>表名</strong>，如果没有定义，Flask-SQLAlchemy会使用一个默认名字，但该名字没有遵守使用复数形式进行命名的约定。</p><p><code>db.Column</code>类构造函数的第一个参数是数据库列的类型（如Integer、String等），对应模型（即Python类）的对象类型（如int、str等）</p><p>表5-2 最常用的SQLAlchemy列类型</p><table><thead><tr><th style="text-align:left">类型名称</th><th style="text-align:center">对应Python类型</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:left">Integer</td><td style="text-align:center">int</td><td style="text-align:center">普通整数，一般时32位</td></tr><tr><td style="text-align:left">Float</td><td style="text-align:center">int</td><td style="text-align:center">浮点数</td></tr><tr><td style="text-align:left">String</td><td style="text-align:center">str</td><td style="text-align:center">变长字符串</td></tr><tr><td style="text-align:left">Text</td><td style="text-align:center">str</td><td style="text-align:center">变成字符串，对较长或不限长度的字符串做了优化</td></tr><tr><td style="text-align:left">Unicode</td><td style="text-align:center">unicode</td><td style="text-align:center">变长Unicode字符串</td></tr><tr><td style="text-align:left">UnicodeText</td><td style="text-align:center">unicode</td><td style="text-align:center">变长Unicode字符串，对较长货不限长度的字符串做了优化</td></tr><tr><td style="text-align:left">Date</td><td style="text-align:center">datetime.data</td><td style="text-align:center">日期</td></tr><tr><td style="text-align:left">Time</td><td style="text-align:center">datetime.time</td><td style="text-align:center">时间</td></tr><tr><td style="text-align:left">DateTime</td><td style="text-align:center">datetime.datetime</td><td style="text-align:center">日期和时间</td></tr></tbody></table><p><code>db.Column</code>中其余的参数可对列中的数据做一些配置或设置</p><p>表5-3 最常用的SQLAlchemy列选项</p><table><thead><tr><th>选项名</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td>primary_key</td><td style="text-align:left">如果设为True，这列是主键</td></tr><tr><td>unique</td><td style="text-align:left">如果设为True，这列不允许出现重复值</td></tr><tr><td>index</td><td style="text-align:left">如果设为True，为这列创建索引，提高查询效率</td></tr><tr><td>nullable</td><td style="text-align:left">如果设为True，这列允许使用空值；设为False，则不允许为空</td></tr><tr><td>default</td><td style="text-align:left">为这列设置默认值</td></tr></tbody></table><p><strong>注意</strong>：Flask-SQLAlchemy要求每个模型都要定义主键。</p><h1 id="5-7-关系"><a href="#5-7-关系" class="headerlink" title="5.7 关系"></a>5.7 关系</h1><p>定义<strong>一对多关系</strong>（Role对User）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class Role(db.Model):</div><div class="line">    # ...</div><div class="line">    users = db.relationship(&apos;User&apos;, backref=&apos;role&apos;)</div><div class="line">    </div><div class="line">class User(db.Model):</div><div class="line">    # ....</div><div class="line">    role_id = db.Column(db.Integer, db.ForeignKey(&apos;roles.id&apos;)    # 外键：roles表中的id</div></pre></td></tr></table></figure></p><p>添加到Role模型中的类变量<code>users</code>代表这个关系（Role与User的关系）的面向对象视角，它将返回与具体Role实例相关联的用户（具体User实例）组成的列表。（如Role实例<code>role_admin</code>返回的users为<code>[richard, john]</code>，其中<code>richard</code>和<code>john</code>都是User实例，即<code>role_admin.users = [richard,john]</code>体现了面向对象视角的一对多关系）</p><p><code>db.relationship()</code>的第一个参数是这个关系的另一端对应的模型。如果模型尚未定义，可使用字符串形式指定。<code>backref</code>参数为<code>&#39;role&#39;</code>表明：在User模型中添加一个属性（或称为类变量）<code>role</code>（可理解成在User表中添加一列名为<code>role</code>的列。但实际查看数据库表时是看不到的），从而定义反向关系。<br><strong>注意</strong>：一般情况下，<code>db.relationship()</code>都能自行找到关系中的外键，有在某些情况下无法决定把哪一列作为外键。如User模型中有两列或以上的列定义为Role模型的外键，那么SQLAlchemy就不知道该使用哪列了。此时，你就要为<code>db.relationship()</code>提供额外参数，从而确定使用哪列外键。常用配置如表5-4。</p><p>表5-4 <code>db.relationship()</code>常用的SQLAlchemy关系选项</p><table><thead><tr><th>选项名</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td>backref</td><td style="text-align:left">在关系的另一端模型中添加反向作用</td></tr><tr><td>primaryjoin</td><td style="text-align:left">明确指定两个模型之间使用的联结条件。只在模凌两可的关系中需要指定</td></tr><tr><td>lazy</td><td style="text-align:left">指定如何加载相关记录。可选值有：select（首次访问时按需加载），immediate（源对象加载后加载），joined（加载记录，但使用联结），subquery（立即加载，但使用子查询），noload（永不加载），dynamic（不加载记录，单提供加载记录的查询）</td></tr><tr><td>userlist</td><td style="text-align:left">如果设为Fales，不适用列表，而使用标量值</td></tr><tr><td>order_by</td><td style="text-align:left">指定关系中记录的排序方式</td></tr><tr><td>secondary</td><td style="text-align:left">指定多对多关系中关系表的名字</td></tr><tr><td>secondaryjoin</td><td style="text-align:left">SQLAlchemy无法自行决定时，指定多对多关系中的二级联结条件</td></tr></tbody></table><p><strong>一对一关系</strong>：可以用前面介绍的一对多关系表示，但调用<code>db.relationship()</code>时要把<code>userlist</code>设为<code>False</code>。<br><strong>多对一关系</strong>：可以用一对多关系表示，只是两个表对调。或者把<code>外键</code>和<code>db.relationship()</code>都放在“多”这一侧。<br><strong>多对多关系</strong>：需要用到第三张表（关系表）。</p><h1 id="5-8-数据库操作"><a href="#5-8-数据库操作" class="headerlink" title="5.8 数据库操作"></a>5.8 数据库操作</h1><p>需要在Python Shell中进行操作。</p><h2 id="5-8-1-创建表"><a href="#5-8-1-创建表" class="headerlink" title="5.8.1 创建表"></a>5.8.1 创建表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(venv)$ python hello.py shell</div><div class="line">&gt;&gt;&gt; from hello.py import db</div><div class="line">&gt;&gt;&gt; db.create_all()</div></pre></td></tr></table></figure><p>如果<strong>修改模型</strong>（如增加了一列）后要把修改的地方应用到现在的数据库中，那么更新现有数据库表的粗暴方式是先删除旧表，在重新创建表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; db.drop_all()</div><div class="line">&gt;&gt;&gt; db.create_all()</div></pre></td></tr></table></figure></p><p>但是这种方法会把数据库中原有的数据都删除掉。在5.11 使用Flask-Migrate实现数据库迁移中会介绍更新数据库更好的方式。</p><h2 id="5-8-2-插入行"><a href="#5-8-2-插入行" class="headerlink" title="5.8.2 插入行"></a>5.8.2 插入行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from hello import Role, User</div><div class="line">&gt;&gt;&gt; role_admin = Role(role_name=&apos;admin&apos;)</div><div class="line">&gt;&gt;&gt; role_moderator = Role(role_name=&apos;moderator&apos;)</div><div class="line">&gt;&gt;&gt; role_visitor = Role(role_name=&apos;visitor&apos;)</div><div class="line">&gt;&gt;&gt; user_richard = User(user_name=&apos;richard&apos;)</div><div class="line">&gt;&gt;&gt; user_john = User(user_name=&apos;john&apos;)</div><div class="line">&gt;&gt;&gt; user_david = User(user_name=&apos;david&apos;)</div></pre></td></tr></table></figure><p>现在这些对象只存在于Python中，还没有写入数据库。因此id尚未赋值，所以<code>print(role_admin.id)</code>的结果为<code>None</code>。</p><p>要把对象写入数据库要分两步：</p><ol><li>要把对象添加到会话(<code>db.session</code>)中:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; db.session.add(role_admin)</div><div class="line">&gt;&gt;&gt; db.session.add(user_richard)</div></pre></td></tr></table></figure></li></ol><p>或者简写成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; db.session.add_all([role_moderator, role_visitor, user_john, user_david])</div></pre></td></tr></table></figure></p><ol><li>调用<code>commit()</code>提交会话<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; db.session.commit()</div></pre></td></tr></table></figure></li></ol><p>此时对象已经写入数据库，再<code>print(role_admin.id)</code>时，它的结果时<code>1</code>。</p><p>调用<code>db.session.rollback()</code>后，可实现事务回滚。<strong>添加到数据库会话中的所有对象</strong>都会还原为它们在数据库时的状态。</p><p><strong>注意</strong>：如果在写入会话过程中发生了错误，那么整个会话都会实效。这样就保证了数据库的一致性。因为可以防止只更新正确部分，而发生错误的部分没有更新。</p><h2 id="5-8-3-更新行"><a href="#5-8-3-更新行" class="headerlink" title="5.8.3 更新行"></a>5.8.3 更新行</h2><p>在数据库会话上调用<code>add()</code>方法可以更新数据。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; role_admin.role_name = &apos;administrator&apos;</div><div class="line">&gt;&gt;&gt; db.session.add(role_admin)</div><div class="line">&gt;&gt;&gt; db.session.commit()</div></pre></td></tr></table></figure></p><h2 id="5-8-4-删除行"><a href="#5-8-4-删除行" class="headerlink" title="5.8.4 删除行"></a>5.8.4 删除行</h2><p>在数据库会话上调用<code>delete()</code>方法删除数据。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; db.session.delete(role_moderator)</div><div class="line">&gt;&gt;&gt; db.session.commit()</div></pre></td></tr></table></figure></p><p><strong>注意</strong>：插入、更新、删除，只有<code>commit()</code>后才会真正写入数据库。</p><h2 id="5-8-5-查询行"><a href="#5-8-5-查询行" class="headerlink" title="5.8.5 查询行"></a>5.8.5 查询行</h2><p>Flask-SQLAlechemy为每个<strong>模型</strong>（注意不是具体的模型实例）都提供了<code>query</code>对象，在<code>query</code>对象上调用相应方法可进行查询。如查询所有记录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; Role.query.all()</div><div class="line">&gt;&gt;&gt;[&lt;Role &apos;admin&apos;&gt;, &lt;Role &apos;visitor&apos;&gt;]</div></pre></td></tr></table></figure></p><p>在<code>query</code>对象上可使用过滤器进行更精确的查询，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; User.query.filter_by(role=role_visitor).all()</div><div class="line">&gt;&gt;&gt; [&lt;User &apos;john&apos;&gt;, &lt;User &apos;david&apos;&gt;]</div></pre></td></tr></table></figure></p><p>表5-5 常用的SQLAlchemy查询过滤器</p><table><thead><tr><th>过滤器</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td>filter()</td><td style="text-align:left">把过滤器添加到原查询上，返回一个新查询</td></tr><tr><td>filter_by()</td><td style="text-align:left">把等值过滤器添加到原查询上，返回一个新查询</td></tr><tr><td>limit()</td><td style="text-align:left">使用指定的值限制原查询返回的结果数量，返回一个新查询</td></tr><tr><td>offset()</td><td style="text-align:left">偏移原查询返回的结果，返回一个新查询</td></tr><tr><td>order_by()</td><td style="text-align:left">根据指定条件对原查询结果进行排序，返回一个新查询</td></tr><tr><td>group_by()</td><td style="text-align:left">根据指定条件对原查询结果进行分组，返回一个新查询</td></tr></tbody></table><p><strong>注意</strong>：在查询上应用指定过滤器后，需通过一些执行函数执行查询。</p><p>表5-6 最常用的SQLAlchemy查询执行函数</p><table><thead><tr><th>方法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td>all()</td><td style="text-align:left">以列表的形式返回查询的所有结果</td></tr><tr><td>fitst()</td><td style="text-align:left">返回查询的第一个结果，如果没有，则返回None</td></tr><tr><td>first_or_404()</td><td style="text-align:left">返回查询的第一个结果，如果没有，则终止请求，返回404错误响应</td></tr><tr><td>get()</td><td style="text-align:left">返回指定主键对应的行，如果没有，则返回None</td></tr><tr><td>get_or_404()</td><td style="text-align:left">返回指定主键对应的行，如果没有，则返回None</td></tr><tr><td>count()</td><td style="text-align:left">返回查询结果的数量</td></tr><tr><td>paginate()</td><td style="text-align:left">返回一个Paginate对象，它包含指定范围的结果</td></tr></tbody></table><p>再看一个从关系的两端查询Role和User之间一对多的关系的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; users = role_visitor.users</div><div class="line">&gt;&gt;&gt; users</div><div class="line">[&lt;User &apos;john&apos;&gt;, &lt;User &apos;david&apos;&gt;]</div><div class="line">&gt;&gt;&gt; users[0].role</div><div class="line">&gt;&gt;&gt; &lt;Role &apos;visitor&apos;&gt;</div></pre></td></tr></table></figure></p><p>执行<code>role_visitor.users</code>时，隐含的查询会调用<code>all()</code>方法返回一个列表，<code>query</code>对象时隐藏的，因此很难做更进一步的查询。此时可在<code>db.relationship()</code>中添加<code>lazy=&#39;dynamic</code>参数，从而禁止自动执行查询（添加后需调用<code>all()</code>等方法才能执行查询，当然也可在执行前调用过滤器）。</p><h1 id="5-9-在视图函数中操作数据库"><a href="#5-9-在视图函数中操作数据库" class="headerlink" title="5.9 在视图函数中操作数据库"></a>5.9 在视图函数中操作数据库</h1><p>新版的<code>hello.py</code>当输入新用户名时，会把新用户名写入数据库，并显示<code>Pleased to meet you!</code>信息；当输入的是旧用户名（数据库中已有的名字）时，会显示<code>Happy to see you again!</code></p><p><code>hello.py</code>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">@app.route(&apos;/&apos;,methods=[&apos;GET&apos;, &apos;POST&apos;])</div><div class="line">def index():</div><div class="line">    form = NameForm()</div><div class="line">    if form.validate_on_submit():</div><div class="line">        session[&apos;name&apos;] = form.name.data</div><div class="line">        # 查找数据库中是否有该用户名，如果没有，就向数据库中添加新用户，</div><div class="line">        # 因为前面已经设置了SQLALCHEMY_COMMIT_ON_TEARDOWN，所以当请求结束时会自动提交事务</div><div class="line">        user = User.query.filter_by(user_name=form.name.data).first()</div><div class="line">        if user is None:</div><div class="line">            # 插入数据库</div><div class="line">            user = User(user_name=form.name.data)</div><div class="line">            db.session.add(user)</div><div class="line">            # 用于模板中判断是显示Pleased to meet you 还是 Happy to see you again</div><div class="line">            session[&apos;known&apos;] = Flase</div><div class="line">        else:</div><div class="line">            session[&apos;konwn&apos;] = True</div><div class="line">        return redirect(url_for(&apos;index&apos;)</div><div class="line">    return render_template(&apos;index.html&apos;, form=form, name=session.get(&apos;name&apos;), known=session.get(&apos;known&apos;, Flase))</div></pre></td></tr></table></figure></p><p><code>index.html</code>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;% extends &quot;base.html&quot; %&#125;</div><div class="line">&#123;% import &quot;bootstarp/wtf.html&quot; as wtf %&#125;</div><div class="line"></div><div class="line">&#123;% block title %&#125;Flasky&#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% block page_content %&#125;</div><div class="line">&lt;div class=&quot;page-header&quot;&gt;</div><div class="line">   &lt;h1&gt;Hello, &#123;% if name %&#125;&#123;&#123; name &#125;&#125;&#123;% else %&#125;Stranger&#123;% endif %&#125;!&lt;/h1&gt;</div><div class="line">   &#123;% if known %&#125;</div><div class="line">   &lt;p&gt;Happy to see you again!&lt;/p&gt;</div><div class="line">   &#123;% else %&#125;</div><div class="line">   &lt;p&gt;Pleased to meet you!&lt;/p&gt;</div><div class="line">   &#123;% endif %&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">&#123;&#123; wtf.quick_form(form) &#125;&#125;</div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure></p><h1 id="5-10-集成Python-shell"><a href="#5-10-集成Python-shell" class="headerlink" title="5.10 集成Python shell"></a>5.10 集成Python shell</h1><p>每次启动shell会话都要将数据库模型和实例一个一个地import进去很麻烦，对此我们可以为shell命令注册一个<code>make_context</code>回调函数，把想import的对象导入列表。<br>对<code>hello.py</code>修改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from flask-script import Shell, Manager</div><div class="line"># ...</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">manager = Manager(app)</div><div class="line"></div><div class="line">def make_shell_context():</div><div class="line">    return dict(app=app, db=db, Role=Role, User=User)</div><div class="line">manager.add_command(&apos;shell&apos;, Shell(make_context=make_shell_context))</div></pre></td></tr></table></figure></p><p>这样启动shell时就会将对象直接导入shell中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; python hello.py shell</div><div class="line">&gt;&gt;&gt; app</div><div class="line">&lt;Flask &apos;app&gt;</div><div class="line">&gt;&gt;&gt; User</div><div class="line">&lt;class &apos;app.User&apos;&gt;</div></pre></td></tr></table></figure></p><h1 id="5-11-使用Flask-Migrate实现数据库迁移"><a href="#5-11-使用Flask-Migrate实现数据库迁移" class="headerlink" title="5.11 使用Flask-Migrate实现数据库迁移"></a>5.11 使用Flask-Migrate实现数据库迁移</h1><p>在5.8.1 创建数据库表中我们说到，更新表的方法之一是删除旧表再重新创建表，但是这会丢失原有的数据。现在介绍方法二：使用数据库迁移框架。<br><strong>数据库迁移框架</strong>：能够跟踪数据库<strong>模式</strong>的变化，然后增量式地把变化应用到已有数据库中。（其功能类似与Git，能够跟踪数据库模式的变化）</p><p>可从理解Git的角度理解数据库迁移框架。</p><h2 id="5-11-1-创建迁移仓库"><a href="#5-11-1-创建迁移仓库" class="headerlink" title="5.11.1 创建迁移仓库"></a>5.11.1 创建迁移仓库</h2><p><code>hello.py</code>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from flask-migrate import Migrate, MigrateCommand</div><div class="line"># ...</div><div class="line"></div><div class="line">migrate = Migrate(app, db)</div><div class="line">manager.add_command(&apos;db&apos;, MigrateCommand)</div></pre></td></tr></table></figure></p><p>Flask-Migrate提供了一个<code>MigrateCommand</code>类，它可以附加到Flask-Script的<code>manager</code>对象上，从而导出数据库迁移命令。该例中，MigrateCommand类使用<code>db</code>命令附加（类似于5.10中，将Shell类使用<code>shell</code>命令附加）。</p><p><strong>注意</strong>：在维护数据库迁移之前，首先要使用<code>init</code>子命令<strong>创建迁移仓库</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(venv)$ python hello.py db init</div><div class="line">Creating directory /home/flask/.....</div><div class="line">...</div><div class="line">...</div><div class="line">Please edit configuration/connection/logging setting in &apos;/home/flask/..../alembic.ini&apos; before proceeding.</div></pre></td></tr></table></figure></p><p>这个命令会创建一个<code>migrations</code>的文件夹，所有迁移脚本都在里面。</p><h2 id="5-11-2-创建迁移脚本"><a href="#5-11-2-创建迁移脚本" class="headerlink" title="5.11.2 创建迁移脚本"></a>5.11.2 创建迁移脚本</h2><p>在Alembic中，数据库迁移用<strong>迁移脚本</strong>表示。脚本中有两个函数：<br><code>upgrade()</code>函数：把迁移中的改动应用到数据库中。<br><code>downgrade()</code>函数：将改动删除。</p><p>我们可以用<code>revision</code>命令手动创建Alembic迁移（<code>upgrade()</code>和<code>downgrade()</code>都是空的，需使用Alembic提供的<code>Operations</code>对象指令实现具体操作），<br>也可以用<code>migrate</code>命令自动创建Alembic迁移（会根据<strong>模型定义</strong>和<strong>数据库当前的状态</strong>之前的差异生成<code>upgrade()</code>和<code>downgrade()</code>函数的内容）。</p><p>使用<code>migrate</code>命令自动创建迁移脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(venv)$ python hello.py db migrate -m &quot;initial migration&quot;</div><div class="line">INFO [alembic.migration] Context impl SQLiteImpl</div><div class="line">...</div><div class="line">INFO [alembic.qutogenerate] Detected added table &apos;users&apos;</div><div class="line">...</div><div class="line">.../falsky/migrations/versions/1bc...bb5_initial_migration.py...done</div></pre></td></tr></table></figure></p><h2 id="5-11-3-更新数据库"><a href="#5-11-3-更新数据库" class="headerlink" title="5.11.3 更新数据库"></a>5.11.3 更新数据库</h2><p>检查并修正好迁移脚本后，可以使用<code>db upgrade</code>命令把迁移应用到数据库中。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(venv)$ python hello.py db upgrade</div><div class="line">INFO [alembic.migration] Context impl SQLiteImpl</div><div class="line">...</div><div class="line">INFO [alembic.migration] Running upgrade None -&gt; 1bc...bb5, initial migration</div></pre></td></tr></table></figure></p><p>对于第一个迁移来说，其作用和调用<code>db.create_all()</code>方法一样，但在后续的迁移中，<code>upgrade</code>命令能把改动应用到数据库中，而且不影响其中保存的数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;5-1-SQL数据库&quot;&gt;&lt;a href=&quot;#5-1-SQL数据库&quot; class=&quot;headerlink&quot; title=&quot;5.1 SQL数据库&quot;&gt;&lt;/a&gt;5.1 SQL数据库&lt;/h1&gt;&lt;p&gt;表中有个特殊的列，称为&lt;strong&gt;主键&lt;/strong&gt;，其值是表中各行
      
    
    </summary>
    
    
      <category term="Flask" scheme="https://richardrw.github.io/tags/Flask/"/>
    
      <category term="读书笔记" scheme="https://richardrw.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>把《Flask Web开发》读薄系列之第四章 Web表单</title>
    <link href="https://richardrw.github.io/2017/11/14/%E6%8A%8A%E3%80%8AFlask%20Web%E5%BC%80%E5%8F%91%E3%80%8B%E8%AF%BB%E8%96%84%E7%B3%BB%E5%88%97%E4%B9%8B%E7%AC%AC%E5%9B%9B%E7%AB%A0%20Web%E8%A1%A8%E5%8D%95/"/>
    <id>https://richardrw.github.io/2017/11/14/把《Flask Web开发》读薄系列之第四章 Web表单/</id>
    <published>2017-11-14T12:54:15.000Z</published>
    <updated>2017-11-25T10:59:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-1-跨站请求伪造保护"><a href="#4-1-跨站请求伪造保护" class="headerlink" title="4.1 跨站请求伪造保护"></a>4.1 跨站请求伪造保护</h1><p><strong>跨站请求伪造(CSRF)</strong>：恶意网站吧请求发送到，被攻击者已登录的其他网站。<br><code>flask-wtf</code>需要程序设置一个密匙。然后利用这个密匙生成加密令牌，再用令牌验证请求中表单数据的真伪，从而实现<strong>CSRF保护</strong>。</p><p>设置<code>flask-wtf</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line">app = Flask(__name__)</div><div class="line">app.config[&apos;SECRET_KEY&apos;] = &apos;hard to guess string&apos;</div></pre></td></tr></table></figure></p><p><strong>注意</strong>：为了增强安全性，密匙不应该直接写入代码中，而要保存环境变量中（第七章介绍）。</p><h1 id="4-2-定义表单类"><a href="#4-2-定义表单类" class="headerlink" title="4.2 定义表单类"></a>4.2 定义表单类</h1><p>使用<code>flask-wtf</code>时，每个Web表单都继承自<code>Form</code>类。这个类定义表单中的一组字段，每组字段都用对象（字段类的实例对象，如<code>StringField（‘hello’）</code>）表示。字段对象可以附有一个或多个<strong>验证函数</strong>。<br><strong>验证函数(validator)</strong>：用来验证用户提交的数据是否符合要求。</p><p>定义名为NameForm的表单类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">from flask-wtf import Form</div><div class="line">from wtforms import StringField, SubmitField</div><div class="line">from wtforms.validators import Required</div><div class="line"></div><div class="line">class NameForm(Form):</div><div class="line">    name = StringField(&apos;What is your name?&apos;, validators=[Required()])</div><div class="line">    submit = SubmitField(&apos;Submit&apos;)</div></pre></td></tr></table></figure></p><p><code>NameForm</code>表单中的字段定义为类变量，<br>类变量的值为对应字段的对象。</p><p><strong>字段构造函数（如SubmitField()）</strong>：的第一个参数是把表单渲染成HTML时使用的标号（或文本）。</p><p><code>validators</code>参数：一个由验证函数组成的<strong>列表</strong>。</p><p><strong>表4-1 WTFORMS支持的HTML标准字段</strong></p><table><thead><tr><th>字段类型</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td>StringField</td><td style="text-align:center">文本字段</td></tr><tr><td>TextAreaField</td><td style="text-align:center">多行文本字段</td></tr><tr><td>PasswordField</td><td style="text-align:center">密码文本字段</td></tr></tbody></table><p><strong>表4-2 WTFORMS验证函数</strong></p><table><thead><tr><th>验证函数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td>Email</td><td style="text-align:center">验证电子邮件地址</td></tr><tr><td>Required</td><td style="text-align:center">确保字段中有数据</td></tr><tr><td>AnyOf</td><td style="text-align:center">确保输入值在可选值列表中</td></tr></tbody></table><h1 id="4-3-把表单渲染成HTML"><a href="#4-3-把表单渲染成HTML" class="headerlink" title="4.3 把表单渲染成HTML"></a>4.3 把表单渲染成HTML</h1><p>假设视图函数把一个<code>NameForm</code>实例（通过参数<code>form</code>）传给模板，那么在模板中可以生成一个简单的表单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form method=&quot;POST&quot;&gt;</div><div class="line">    &#123;&#123; form.hidden_tag() &#125;&#125;</div><div class="line">    &#123;&#123; form.name.label&#125;&#125; &#123;&#123; form.name() &#125;&#125;</div><div class="line">    &#123;&#123; form.submit() &#125;&#125;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p><p>为了改进外观，可以将HTML属性（如id、class等）传给渲染字段的函数，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form method=&quot;POST&quot;&gt;</div><div class="line">    &#123;&#123; form.hidden_tag() &#125;&#125;</div><div class="line">    &#123;&#123; form.name.label&#125;&#125; &#123;&#123; form.name(id=&apos;my-text-field&apos;) &#125;&#125;</div><div class="line">    &#123;&#123; form.submit() &#125;&#125;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p><p><code>flask-bootstrap</code>提供了一个辅助函数涌来渲染<code>flask-wtf</code>表单。用法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;% import &quot;bootstrap/wtf.html&quot; as wtf %&#125;</div><div class="line">&#123;&#123; wtf.quick_form(form) &#125;&#125;</div></pre></td></tr></table></figure></p><p><code>bootstrap/wtf.html</code>文件中定义了一个用于渲染Flask-WTF<strong>表单对象</strong>的辅助函数。</p><p><code>wtf.qucik_form()</code>函数的参数为<strong>Flask-WTF表单对象</strong>（表单类的实例）。</p><h1 id="4-4-在视图函数中处理表单"><a href="#4-4-在视图函数中处理表单" class="headerlink" title="4.4 在视图函数中处理表单"></a>4.4 在视图函数中处理表单</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"></div><div class="line">@app.route(&apos;/&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;]</div><div class="line">def index():</div><div class="line">    name = None</div><div class="line">    form = NameForm()  # 实例化表单类</div><div class="line">    if form.validate_on_submit():</div><div class="line">        name = form.name.data</div><div class="line">        form.name.data = &apos;&apos;      # 将form.name.data的值设置为空字符串</div><div class="line">    return render_template(&apos;index.html&apos;, form=form, name=name)</div></pre></td></tr></table></figure><p><code>methods</code>参数告诉Flask在URL映射中把这个视图函数注册为<code>GET</code>和<code>POST</code>请求的处理程序。如果没有指定<code>methods</code>参数，就只把视图函数注册为GET请求的处理程序。</p><p><code>validate_on_submit()</code>：提交表单后，如果数据能被全部验证函数接受，那么<code>validate_on_submit()</code>的返回值为<code>True</code>，否则返回<code>False</code>。</p><h1 id="4-5-重定向和用户会话"><a href="#4-5-重定向和用户会话" class="headerlink" title="4.5 重定向和用户会话"></a>4.5 重定向和用户会话</h1><p>现在的hello.py存在一个问题：用户输入名字后提交表单，然后刷新页面，会出现一个警告（要求在再次提交表单前进行确认）。<br>出现这种情况的<strong>原因是</strong>：刷新页面时，浏览器会重新发送<strong>之前已经发送过的最后一个请求</strong>。如果这个请求是一个包含表单数据的POST请求，刷新页面会再次提交表单。</p><p><strong>解决思路</strong>：使浏览器发送的最后一个请求不是POST请求。<br><strong>解决方法</strong>：使用重定向作为POST请求的响应，而不是使用常规响应。</p><p><strong>重定向</strong>：是一个特殊响应，响应的内容是URL，而不是包含HTML代码的字符串。浏览器收到这种响应时，会向重定向的URL发起GET请求（第二个请求），显示页面内容。</p><p><strong>存在问题</strong>：这种方法会带来另一个问题，程序处理POST请求时，使用<code>form.name.data</code>来获取用户输入值，可是一旦这个请求结束，数据也就丢失（因为这个POST请求使用重定向作为响应）。所以程序需要保存输入值，方便重定向后的请求可以获得并使用这个值。</p><p><strong>解决方法2</strong> ：把数据存储在<strong>用户会话</strong>中。</p><p>使用重定向和用户会话重写<code>hello.py</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">from flask import Flask, render_template, session, redirect, url_for</div><div class="line"># ...</div><div class="line"></div><div class="line">@app.route(&apos;/&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</div><div class="line">def index():</div><div class="line">    form = NameForm()</div><div class="line">    if form.validate_on_submit():</div><div class="line">        session[&apos;name&apos;] = form.name.data</div><div class="line">        return redirect(url_for(&apos;index&apos;))</div><div class="line">    return render_template(&apos;index.html&apos;, form=form, name=session.get(&apos;name&apos;))</div></pre></td></tr></table></figure></p><p>使用<code>session.get()</code>方法获取字典中键对应的值，避免未找到键的异常情况。因为对于不存在的键， <code>get()</code>会返回默认值<code>None</code>。</p><h1 id="4-6-Flash消息"><a href="#4-6-Flash消息" class="headerlink" title="4.6 Flash消息"></a>4.6 Flash消息</h1><p>请求完成后，有时需要让用户知道状态发生了变化（如使用确认消息、警告或错误提醒）。一个典型例子是，提交了一项有错误的登录表单后，服务器发回的响应重新渲染登录表单，并且在表单上面显示一个消息，提示用户名或密码错误。</p><p>设置Flash消息的<code>hello.py</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">form flask import Flask, render_template, session, redirect, url_for, flash</div><div class="line"># ...</div><div class="line"></div><div class="line">@app.route(&apos;/&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;]</div><div class="line">def index():</div><div class="line">    form = NameForm()</div><div class="line">    if form.validate_on_submit():</div><div class="line">        old_name = session.get(&apos;name&apos;)</div><div class="line">        if old_name is not None and old_name != form.name.data:</div><div class="line">            flash(&apos;Looks like you have changed your name!&apos;)</div><div class="line">        session[&apos;name&apos;] = form.name.data</div><div class="line">        return redirect(url_for(&apos;index&apos;)</div><div class="line">    return render_template(&apos;index.html&apos;, form=form, name=session.get(&apos;name&apos;))</div></pre></td></tr></table></figure></p><p>在这个示例中，将用户提交的数据和用户会话中的数据比较，如果两个数据不一样，就会调用<code>flash()</code>函数，<strong>在发给客户端的下一个响应中显示一个信息</strong>。</p><p>在模板中渲染Flash消息：仅调用<code>flash()</code>函数并不能将消息显示出来，这个可以在模板中渲染Flash消息。如<code>base.html</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;% block content %&#125;</div><div class="line">&lt;div class=&quot;container&quot;&gt;</div><div class="line">    &#123;% for message in get_flashed_messages() %&#125;</div><div class="line">    &lt;div class=&quot;alert alert-warning&quot;&gt;</div><div class="line">        &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot;&gt;</div><div class="line">        &amp;times;</div><div class="line">        &lt;/button&gt;</div><div class="line">        &#123;&#123; message &#125;&#125;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &#123;% endfor %&#125;</div><div class="line">    &#123;% block page_content %&#125; &#123;% endblock %&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">&#123;% endblock %&#125;</div></pre></td></tr></table></figure></p><p><code>get_flashed_messages()</code>函数用来获取并渲染Flash消息。</p><p><strong>注意</strong>：</p><ol><li>在模板中使用<code>for</code>循环是因为，每次调用<code>falsh()</code>函数时，都会生产一个消息，所以可能有多个消息在排队等待显示，所需需要用<code>for</code>循环将消息都显示出来。</li><li><code>get_flashed_messages()</code>函数获取的消息在下次调用时不会再次返回（如这次获取了消息队列1，那么在下次调用时就不会再返回消息队列1，有点类似于列表的<code>pop()</code>方法），因此Flash消息只显示一次，然后就消失了。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;4-1-跨站请求伪造保护&quot;&gt;&lt;a href=&quot;#4-1-跨站请求伪造保护&quot; class=&quot;headerlink&quot; title=&quot;4.1 跨站请求伪造保护&quot;&gt;&lt;/a&gt;4.1 跨站请求伪造保护&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;跨站请求伪造(CSRF)&lt;/strong&gt;：
      
    
    </summary>
    
    
      <category term="Flask" scheme="https://richardrw.github.io/tags/Flask/"/>
    
      <category term="读书笔记" scheme="https://richardrw.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>把《Flask Web开发》读薄系列之第三章 模板</title>
    <link href="https://richardrw.github.io/2017/11/14/%E6%8A%8A%E3%80%8AFlask%20Web%E5%BC%80%E5%8F%91%E3%80%8B%E8%AF%BB%E8%96%84%E7%B3%BB%E5%88%97%E4%B9%8B%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%A8%A1%E6%9D%BF/"/>
    <id>https://richardrw.github.io/2017/11/14/把《Flask Web开发》读薄系列之第三章 模板/</id>
    <published>2017-11-14T12:52:00.000Z</published>
    <updated>2017-11-25T10:59:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Flask-Mail提供电子邮件支持"><a href="#使用Flask-Mail提供电子邮件支持" class="headerlink" title="使用Flask-Mail提供电子邮件支持"></a>使用Flask-Mail提供电子邮件支持</h1><p>表6-1 Flask-Mail SMTP服务器的配置</p><table><thead><tr><th>配置</th><th style="text-align:left">默认值</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td>MAIL_SERVER</td><td style="text-align:left">localhost</td><td style="text-align:left">电子邮件服务器的主机名或IP地址</td></tr><tr><td>MAIL_PORT</td><td style="text-align:left">25</td><td style="text-align:left">电子邮件服务器的端口</td></tr><tr><td>MAIL_USE_TLS</td><td style="text-align:left">False</td><td style="text-align:left">启用传输层安全（TLS）协议</td></tr><tr><td>MAIL_USE_SSL</td><td style="text-align:left">False</td><td style="text-align:left">启用安全套接层（SSL）协议</td></tr><tr><td>MAIL_USENAME</td><td style="text-align:left">None</td><td style="text-align:left">邮件账户的用户名</td></tr><tr><td>MAIL_PASSWORD</td><td style="text-align:left">None</td><td style="text-align:left">邮件账户的授权码</td></tr></tbody></table><ol><li>在<code>hello.py</code>中配置Flask-Mail使用QQ邮箱：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import os</div><div class="line">#...</div><div class="line"></div><div class="line">app.config[&apos;MAIL_SERVER&apos;] = &apos;smtp.qq.com&apos;</div><div class="line">app.config[&apos;MAIL_PORT&apos;] = 465</div><div class="line">app.config[&apos;MAIL_USE_SSL&apos;] = True</div><div class="line">app.config[&apos;MAIL_USERNAME&apos;] = os.environ.get(&apos;MAIL_USERNAME&apos;)</div><div class="line">app.config[&apos;MAIL_PASSWORD&apos;] = os.environ.get(&apos;MAIL_PASSWORD&apos;)</div></pre></td></tr></table></figure><p><strong>注意</strong>：千万不要把账号密令直接写在脚本中，应该从环境变量中导入。</p><ol><li>初始化Flask-Mail：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from flask_mail import Mail</div><div class="line"># ...</div><div class="line"></div><div class="line">mail = Mail(app)</div></pre></td></tr></table></figure><ol><li>在环境变量中定义<code>MAIL_USERNAME</code>和<code>MAIL_PASSWORD</code>：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(venv) $ export MAIL_USERNAME=&apos;12345678@qq.com&apos;</div><div class="line">(venv) $ export MAIL_PASSWORD=&apos;qwertyuiop&apos;</div></pre></td></tr></table></figure><p>此时可以使用<code>echo</code>命令打印出来检查一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(venv) $ echo $MAIL_USERNAME</div><div class="line">&gt;&gt;&gt; &apos;12345678@qq.com&apos;</div><div class="line">(venv) $ echo $MAIL_PASSWORD</div><div class="line">&gt;&gt;&gt; &apos;qwertyuiop&apos;</div></pre></td></tr></table></figure><p>定义环境变量后，此时在<strong>同一个终端中</strong>执行<code>python hello.py shell</code>命令，便能获取到想要的环境变量。</p><p><strong>注意</strong>：如果定义好环境变量后把终端关闭再重新打开，那么此时是没有上次定义的环境变量的。所以需要在同一个终端中执行。</p><p>如何让QQ邮箱开启SMTP功能，可以参考<a href="http://blog.csdn.net/lagelangzhi/article/details/51717433" target="_blank" rel="external">flask-mail常见的邮箱配置问题解决</a></p><h1 id="在Python-shell中发送电子邮件"><a href="#在Python-shell中发送电子邮件" class="headerlink" title="在Python shell中发送电子邮件"></a>在Python shell中发送电子邮件</h1><p>在上一个终端中，发送电子邮件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(venv) $ python hello.py shell</div><div class="line">&gt;&gt;&gt; from flask_mail import Message</div><div class="line">&gt;&gt;&gt; from hello import mail</div><div class="line">&gt;&gt;&gt; msg = Message(&apos;test subject&apos;, sender=&apos;12345678@qq.com&apos;, recipients=[&apos;87654321@qq.com&apos;])</div><div class="line">&gt;&gt;&gt; msg.body = &apos;test body&apos;</div><div class="line">&gt;&gt;&gt; msg.html = &apos;&lt;p&gt;test body&lt;/p&gt;&apos;</div><div class="line">&gt;&gt;&gt; with app.app_context():</div><div class="line">···    mail.send(msg)</div></pre></td></tr></table></figure></p><p><strong>注意</strong>：在Flask-Mail中的<code>send()</code>函数使用<code>current_app</code>（程序上下文），因此在shell中发送邮件，需要激活程序上下文。</p><h1 id="在程序中集成发送电子邮件功能"><a href="#在程序中集成发送电子邮件功能" class="headerlink" title="在程序中集成发送电子邮件功能"></a>在程序中集成发送电子邮件功能</h1><ol><li>定义用于发邮件的函数，使<code>hello.py</code>支持电子邮件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">from flask_mail import Message</div><div class="line"># ...</div><div class="line"></div><div class="line"># 给邮件标题添加一个前缀</div><div class="line">app.config[&apos;FLASKY_MAIL_SUBJECT_PREFIX&apos;] = &apos;[Flasky]&apos;</div><div class="line"># 定义发件人</div><div class="line">app.config[&apos;FLASKY_MAIL_SENDER&apos;] = &apos;12345678@qq.com&apos;</div><div class="line"></div><div class="line">def send_email(recipients, subject, template, **kwargs):</div><div class="line">    msg = Message(app.config[&apos;FLASKY_MAIL_SUBJECT_PREFIX&apos;] + subject, sender=app.config[&apos;FLASKY_MAIL_SENDER&apos;], recipients=[recilients])</div><div class="line">    msg.body = render_template(template + &apos;.txt&apos;, **kwargs)</div><div class="line">    msg.html = render_template(template + &apos;.html&apos;, **kwargs)</div><div class="line">    mail.send(msg)</div></pre></td></tr></table></figure><p>邮件有纯文本<code>.txt</code>，也有HTML文本<code>.html</code>，客户端显示哪个，取决于邮件客户端的设置。</p><p><strong>拓展</strong>：为什么<code>send()</code>函数中需要<code>**kwargs</code>？<code>**kwargs</code>的作用是什么？<br>答：（1）因为我们不确定模板中需要什么变量参数，在此例中，模板需要的时<code>user</code>这个参数，但是如果换成别的模版，它不仅需要<code>user</code>参数，也需要其他一些参数（如datatime等，关键取决于模板设计成什么样），此时如果我们死死地把<code>send_email()</code>函数写成<code>send_email(recipient, subject, template, user)</code>，那么就失去了灵活性，当换成其他模版时，<code>datatime</code>参数也就无法传入了，因此<code>send()</code>函数需要<code>**kwargs</code>。<br>（2）<code>**kwargs</code>的作用是：当我们不知道需要往函数中传入多少个关键字参数或者想以字典的形式作为参数时，我们可以用<code>**kwargs</code>，这样我们就可以根据实际情况需要，往函数中传入特定个数的参数（数量使具体情况而定）。</p><ol><li>结合视图函数发送电子邮件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"># ...</div><div class="line"># 定义收件人为Flasky的管理员</div><div class="line">app.config[&apos;FLASKY_ADMIN&apos;] = os.environ.get(&apos;FLASKY_ADMIN&apos;)</div><div class="line"># ...</div><div class="line"></div><div class="line">@app.route(&apos;/&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;]</div><div class="line">def index():</div><div class="line">    form = NameForm()</div><div class="line">    if form.validate_on_submit():</div><div class="line">        session[&apos;name&apos;] = form.name.data</div><div class="line">        # 查找数据库中是否有该用户名，如果没有，就向数据库中添加新用户，</div><div class="line">        # 因为前面已经设置了SQLALCHEMY_COMMIT_ON_TEARDOWN，所以当请求结束时会自动提交事务</div><div class="line">        user = User.query.filter_by(user_name=form.name.data).first()</div><div class="line">        if user is None:</div><div class="line">            # 插入数据库</div><div class="line">            user = User(user_name=form.name.data)</div><div class="line">            db.session.add(user)</div><div class="line">            # 用于模板中判断是显示Pleased to meet you 还是 Happy to see you again</div><div class="line">            session[&apos;known&apos;] = Flase</div><div class="line">            # 如果收件人不为空，则发送邮件</div><div class="line">            if app.config[&apos;FLASKY_ADMIN&apos;]:</div><div class="line">                send_email(app.config[&apos;FLASKY_ADMIN&apos;], &apos;New User&apos;, &apos;mail/new_user&apos;, user=user)</div><div class="line">        else:</div><div class="line">            session[&apos;konwn&apos;] = True</div><div class="line">        return redirect(url_for(&apos;index&apos;)</div><div class="line">    return render_template(&apos;index.html&apos;, form=form, name=session.get(&apos;name&apos;), known=session.get(&apos;known&apos;, Flase))</div></pre></td></tr></table></figure><p>此时我们也需要定义环境变量<code>FLASKY_ADMIN</code>：<br><code>(venv) $ export FLASKY_ADMIN=&#39;12345678@qq.com&#39;</code></p><p><code>template</code>文件夹下的模板文件<code>mail/new_user</code>有两个，分别为<code>new_user.txt</code>和<code>new_user.html</code>。</p><p><code>new_user.txt</code>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">There has a new user that name is &#123;&#123; user.user_name &#125;&#125;</div></pre></td></tr></table></figure><p><code>new_user.html</code>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;There has a new user that name is &#123;&#123; user.user_name &#125;&#125;&lt;/h1&gt;</div></pre></td></tr></table></figure><h1 id="异步发送电子邮件"><a href="#异步发送电子邮件" class="headerlink" title="异步发送电子邮件"></a>异步发送电子邮件</h1><p>为了避免处理请求过程中不必要的延迟，我们可以把发送电子邮件的函数移到后台线程中处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">from threading import Thread</div><div class="line"># ...</div><div class="line"></div><div class="line">def send_async_email(app, msg):</div><div class="line">    with app.app_context():</div><div class="line">        mail.send(msg)</div><div class="line">        </div><div class="line">def send_email(recipients, subject, template, **kwargs):</div><div class="line">    msg = Message(app.config[&apos;FLASKY_MAIL_SUBJECT_PREFIX&apos;] + subject, sender=app.config[&apos;FLASKY_MAIL_SENDER&apos;], recipients=[recilients])</div><div class="line">    msg.body = render_template(template + &apos;.txt&apos;, **kwargs)</div><div class="line">    msg.html = render_template(template + &apos;.html&apos;, **kwargs)</div><div class="line">    thr = Thread(target=send_async_email, args=[app, msg])</div><div class="line">    thr.start()</div><div class="line">    return thr</div></pre></td></tr></table></figure><p><strong>注意</strong>：由于在不同线程中执行<code>mail.send()</code>函数，就如前面<em>在Python shell中发送电子邮件</em>章节中提到，<code>send()</code>函数需要程序<code>current_app</code>（程序上下文）中执行，因此需要在执行<code>send()</code>函数的线程中使用<code>app.app_context()</code>人工创建<code>current_app</code>。</p><p>当需要发送大量电子邮件时，使用专门发送电子邮件的作业（如<a href="http://www.celeryproject.org" target="_blank" rel="external">Celery</a>任务队列）处理更合适。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用Flask-Mail提供电子邮件支持&quot;&gt;&lt;a href=&quot;#使用Flask-Mail提供电子邮件支持&quot; class=&quot;headerlink&quot; title=&quot;使用Flask-Mail提供电子邮件支持&quot;&gt;&lt;/a&gt;使用Flask-Mail提供电子邮件支持&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="Flask" scheme="https://richardrw.github.io/tags/Flask/"/>
    
      <category term="读书笔记" scheme="https://richardrw.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>把《Flask Web开发》读薄系列之第二章 程序的基本概念</title>
    <link href="https://richardrw.github.io/2017/11/14/%E6%8A%8A%E3%80%8AFlask%20Web%E5%BC%80%E5%8F%91%E3%80%8B%E8%AF%BB%E8%96%84%E7%B3%BB%E5%88%97%E4%B9%8B%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>https://richardrw.github.io/2017/11/14/把《Flask Web开发》读薄系列之第二章 程序的基本概念/</id>
    <published>2017-11-14T12:45:31.000Z</published>
    <updated>2017-11-25T10:59:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-1-初始化"><a href="#2-1-初始化" class="headerlink" title="2.1 初始化"></a>2.1 初始化</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">from flask import Flask</div><div class="line"></div><div class="line">app = Flask(__name__)</div></pre></td></tr></table></figure><p>Flask实例化只有一个必须指定的参数，即程序主模块或包的名字（也即<code>__name__</code>）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"># 2.2 路由和视图函数</div><div class="line">1. **路由**：处理URL和函数之间的关系（URL到Python函数的映射关系）的程序。</div><div class="line">```可通过Flask实例提供的`app.route()`装饰器把函数注册为路由。</div></pre></td></tr></table></figure></p><ol><li><strong>视图函数</strong>：像<code>index()</code>这样的函数。</li></ol><h1 id="2-4-一个完整的程序"><a href="#2-4-一个完整的程序" class="headerlink" title="2.4 一个完整的程序"></a>2.4 一个完整的程序</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">from flask import Flask</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">@app.route(&apos;/&apos;)</div><div class="line">def index():</div><div class="line">    return &apos;&lt;h1&gt;Hello World!&lt;/h1&gt;</div><div class="line"></div><div class="line">@app.route(&apos;/user/&lt;name&gt;&apos;)      # &lt; &gt;尖括号部门是动态url部分</div><div class="line">def user(name):                 # Flask会将动态部分（也即&lt; &gt;部分）作为参数传入视图函数中</div><div class="line">    return &apos;&lt;h1&gt;Hello &#123;&#125;!&apos;.format(name)</div><div class="line">    </div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    app.run(debug=True)</div></pre></td></tr></table></figure><h1 id="2-5-请求-响应"><a href="#2-5-请求-响应" class="headerlink" title="2.5 请求-响应"></a>2.5 请求-响应</h1><h2 id="2-5-1-程序与请求上下文"><a href="#2-5-1-程序与请求上下文" class="headerlink" title="2.5.1 程序与请求上下文"></a>2.5.1 程序与请求上下文</h2><ol><li><code>程序上下文</code>：</li><li><code>请求上下文</code>:</li></ol><h2 id="2-5-2-请求调度"><a href="#2-5-2-请求调度" class="headerlink" title="2.5.2 请求调度"></a>2.5.2 请求调度</h2><p>Flask使用<code>app.route()</code>装饰器或者非装饰器形式的<code>app.add_url_rule()</code>生成<strong>URL和视图函数之间的映射</strong></p><h2 id="2-5-3-请求钩子"><a href="#2-5-3-请求钩子" class="headerlink" title="2.5.3 请求钩子"></a>2.5.3 请求钩子</h2><p><strong>应用场景：</strong>在请求开始时，创建数据库链接或认证用户。（即在处理请求<strong>之前</strong>或<strong>之后</strong>，执行某些代码）<br>Flask提供以下4种钩子：</p><ol><li><code>before_first_request</code>：注册一个函数，<strong>在处理第一个请求之前运行</strong></li><li><code>before_request</code>：注册一个函数，<strong>在每次请求之前运行</strong></li><li><code>after_request</code>：注册一个函数，<strong>如果没有未处理的异常抛出，在每次请求之后运行</strong></li><li><code>teardown_request</code>：注册一个函数，<strong>即使有未处理的异常抛出，也在每次请求之后运行</strong></li></ol><h2 id="2-5-4-响应"><a href="#2-5-4-响应" class="headerlink" title="2.5.4 响应"></a>2.5.4 响应</h2><p><strong>视图函数返回值</strong>可以接受3个参数：响应文本，状态码，一个由header组成的字典。<br><code>make_response()</code>函数可以接受3个参数（和视图函数返回值一样），并返回一个<code>response</code>对象，此时我们可以在<code>response</code>对象上调用各种方法，进一步设置响应。<br>如获得一个<code>response</code>对象，然后设置<code>cookie</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">from flask import Flask</div><div class="line">from flask import make_response</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">@app.route(&apos;/&apos;)</div><div class="line">def index():</div><div class="line">    response = make_response(&apos;&lt;h1&gt;This document carries a cookie!&lt;/h1&gt;&apos;)</div><div class="line">    response.set_cookie(&apos;answer&apos;, &apos;42&apos;)</div><div class="line">    return response</div></pre></td></tr></table></figure></p><p><code>redirect()</code>函数用于生成<strong>重定向</strong>（一种特殊的响应）。</p><p><code>abort</code>函数用于生产另一种特殊响应，用于处理错误。<br>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">from flask import Flask</div><div class="line">from flask import redirect</div><div class="line">from flask import abort</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">@app.route(&apos;/&apos;)</div><div class="line">def index():</div><div class="line">    return redirect(&apos;http://www.example.com&apos;)</div><div class="line">    </div><div class="line">@app.route(&apos;/user/&lt;id&gt;&apos;)</div><div class="line">def get_user(id):</div><div class="line">    user = load_user(id)        # load_user()用于读取id，不展开写</div><div class="line">    if not user:</div><div class="line">        abort(404)        # 如果id不存在，返回状态吗404</div><div class="line">    return &apos;&lt;h1&gt;Hello &#123;&#125;&lt;/h1&gt;&apos;.format(id)</div></pre></td></tr></table></figure></p><h1 id="2-6-Flask扩展"><a href="#2-6-Flask扩展" class="headerlink" title="2.6 Flask扩展"></a>2.6 Flask扩展</h1><p>可使用<code>flask-script</code>扩展为Flask程序添加一个命令行解析器，那么就可以自定义很多参数，如监听的host、port等。<br>实现方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">from flask.ext.script import Manager</div><div class="line"># ...</div><div class="line"></div><div class="line">manager = Manager(app)</div><div class="line"></div><div class="line">if __name__ = &apos;__main__&apos;:</div><div class="line">    manager.run()</div></pre></td></tr></table></figure></p><p>把Flask实例<code>app</code>作为参数传给<code>Manager()</code>，初始化实例。<br><strong>注意</strong>：Flask扩展都在<code>flask.ext</code>命名空间下，而Python3.5之后都直接使用<code>from flask-xxx import xxx</code>来导入。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2-1-初始化&quot;&gt;&lt;a href=&quot;#2-1-初始化&quot; class=&quot;headerlink&quot; title=&quot;2.1 初始化&quot;&gt;&lt;/a&gt;2.1 初始化&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
      <category term="Flask" scheme="https://richardrw.github.io/tags/Flask/"/>
    
      <category term="读书笔记" scheme="https://richardrw.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>把《Flask Web开发》读薄系列之第一章 创建虚拟环境</title>
    <link href="https://richardrw.github.io/2017/11/14/%E6%8A%8A%E3%80%8AFlask%20Web%E5%BC%80%E5%8F%91%E3%80%8B%E8%AF%BB%E8%96%84%E7%B3%BB%E5%88%97%E4%B9%8B%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <id>https://richardrw.github.io/2017/11/14/把《Flask Web开发》读薄系列之第一章 创建虚拟环境/</id>
    <published>2017-11-14T12:43:30.000Z</published>
    <updated>2017-11-25T10:58:57.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>切换到目标文件夹目录</li><li>执行<code>virtualenv venv</code>命令，其中<code>venv</code>为虚拟环境名称</li><li>执行<code>source venv/bin/activate</code>激活虚拟环境</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;切换到目标文件夹目录&lt;/li&gt;
&lt;li&gt;执行&lt;code&gt;virtualenv venv&lt;/code&gt;命令，其中&lt;code&gt;venv&lt;/code&gt;为虚拟环境名称&lt;/li&gt;
&lt;li&gt;执行&lt;code&gt;source venv/bin/activate&lt;/code&gt;激活虚
      
    
    </summary>
    
    
      <category term="Flask" scheme="https://richardrw.github.io/tags/Flask/"/>
    
      <category term="读书笔记" scheme="https://richardrw.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>把《Flask Web开发》读薄系列之序言</title>
    <link href="https://richardrw.github.io/2017/11/14/%E6%8A%8A%E3%80%8AFlask%20Web%E5%BC%80%E5%8F%91%E3%80%8B%E8%AF%BB%E8%96%84%E7%B3%BB%E5%88%97%E4%B9%8B%E5%BA%8F%E8%A8%80/"/>
    <id>https://richardrw.github.io/2017/11/14/把《Flask Web开发》读薄系列之序言/</id>
    <published>2017-11-14T12:20:58.000Z</published>
    <updated>2017-11-25T11:10:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="读者的疑惑"><a href="#读者的疑惑" class="headerlink" title="读者的疑惑"></a>读者的疑惑</h1><p>《把<code>&lt;Flask Web开发——基于Python的Web应用开发实战&gt;</code>读薄系列》主要是对《Flask Web开发》一书的概括，或许你读起来会吐槽说“卧靠，这不就是书中的内容吗，直接把书中的内容搬过来就可以成一个系列了，真牛逼“。对此，我只能说读书笔记大概就是这样吧。你对其中的内容懂了，就会觉得很容易，觉得很没必要做这样的一种记录，完全是照搬书中内容，没有什么实质东西。但是，该系列也并不完全是书中内容，它还包括作者对一些该概念的理解、类比，以及代码实现过程中可能遇到的、应该注意的坑等。如：把第五章数据库中的5.11 使用Flask-Migrate实现数据库迁移，跟Git版本控制联系起来，结合理解。如：第六章电子邮件中通过QQ邮箱服务器发送邮件应该注意的坑，以及拓展对<code>**kwargs</code>的理解和实际应用情景。总的来说，该系列主要起到的作用如下：</p><ul><li>起到思维导图作用。当你初学完或者之前学过但是没有实际应用过，那么该系列可以帮助你勾起记忆，尽快掌握Flask的一些基本知识。另外也能让你根据思维导图你查漏补缺。</li><li>加入一些类比，加强理解书中概念。如前面说到的Flask-Migrate与Git的类比。书中的一些类比能否帮助你，视人而已，因为每个人对概念的理解都不同，就像不是所有读者都了解Git一样。</li><li>拓展对Python一些概念的理解。亦如前面说到的对<code>**kwargs</code>的理解。</li></ul><h1 id="最后说两句"><a href="#最后说两句" class="headerlink" title="最后说两句"></a>最后说两句</h1><p>可能是翻译的原因，书中偶尔会出现的一些句子或内容读起来很费劲，很难理解，对此，作者也尽量以平实的语言概括该系列，甚至是以提炼出“存在问题—解决思路—解决方法“或者问答的形式来概括书中内容，加深理解。如第四章4.5 重定向和用户会话，作者根据书中内容提炼出“存在问题—解决思路—解决方法”来解释为什么使用重定向和用户会话。</p><p>另外，为了更准确地表达意思，该系列中的一些章节的名字可能与原书的章节名字不同，但这并不要紧，意思对了就行。</p><h1 id="联系作者"><a href="#联系作者" class="headerlink" title="联系作者"></a>联系作者</h1><p>如果你对《Flask Web开发——基于Python的Web应用开发实战》书中的内容有一些很好的个人理解（如用类比来理解）等，可以把你的理解整理好发送到作者邮箱：weichang321@gmail.com。我将会筛选一些好的内容加入到该系列中，并署上你的名字。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;读者的疑惑&quot;&gt;&lt;a href=&quot;#读者的疑惑&quot; class=&quot;headerlink&quot; title=&quot;读者的疑惑&quot;&gt;&lt;/a&gt;读者的疑惑&lt;/h1&gt;&lt;p&gt;《把&lt;code&gt;&amp;lt;Flask Web开发——基于Python的Web应用开发实战&amp;gt;&lt;/code&gt;读薄系列
      
    
    </summary>
    
    
      <category term="Flask" scheme="https://richardrw.github.io/tags/Flask/"/>
    
      <category term="读书笔记" scheme="https://richardrw.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>构建爬取大众点评美食数据的多线程爬虫（含多进程实现）（一）</title>
    <link href="https://richardrw.github.io/2017/10/20/%E6%9E%84%E5%BB%BA%E7%88%AC%E5%8F%96%E5%A4%A7%E4%BC%97%E7%82%B9%E8%AF%84%E7%BE%8E%E9%A3%9F%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%88%AC%E8%99%AB%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://richardrw.github.io/2017/10/20/构建爬取大众点评美食数据的多进程爬虫（一）/</id>
    <published>2017-10-20T14:07:02.000Z</published>
    <updated>2017-11-04T14:29:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="构建爬取大众点评美食数据的多进程爬虫（一）"><a href="#构建爬取大众点评美食数据的多进程爬虫（一）" class="headerlink" title="构建爬取大众点评美食数据的多进程爬虫（一）"></a>构建爬取大众点评美食数据的多进程爬虫（一）</h1><h2 id="一、要抓取哪些数据"><a href="#一、要抓取哪些数据" class="headerlink" title="一、要抓取哪些数据"></a>一、要抓取哪些数据</h2><p>以东莞美食为例<a href="http://www.dianping.com/search/category/219/10/g0r0" target="_blank" rel="external">大众点评-美食-东莞</a>，可以看到，在美食页面，我们想要爬取的信息有：</p><ol><li>商户标题</li><li>星级</li><li>评论数</li><li>人均价格</li><li>各项评分</li><li>菜系</li><li>地址</li></ol><h2 id="二、分析页面"><a href="#二、分析页面" class="headerlink" title="二、分析页面"></a>二、分析页面</h2><h3 id="（一）多观察页面"><a href="#（一）多观察页面" class="headerlink" title="（一）多观察页面"></a>（一）多观察页面</h3><p>通过点击<a href="http://www.dianping.com/search/category/219/10/g112" target="_blank" rel="external">小吃快餐</a>，我们看到小吃快餐下一共有50个页面。再点击<a href="http://www.dianping.com/search/category/219/10/g117" target="_blank" rel="external">面包甜点</a>，发现也只有50个页面。接下来我们看看<a href="http://www.dianping.com/search/category/219/10/g117r434" target="_blank" rel="external">面包甜点-东城区</a>，发现最多也只有50个页面。如此类推，我们大概可以确定，某菜系-某区域最多只有50个页面，由此基本可以判断，这应该是大众点评做大反爬虫措施。对此，我们在稍后的爬虫设计中，不能简单地从某一菜系下爬取所有页面或者从某一区域下爬取所有页面，因为单独选定菜系或者区域，服务器最多只返回50个页面给你。<strong> 因此我们需要将菜系-区域组合起来爬取，尽可能多的爬取商户信息。 </strong><br>通过观察，我们发现在一个网页中，如：<a href="http://www.dianping.com/search/category/219/10/g117r434" target="_blank" rel="external">http://www.dianping.com/search/category/219/10/g117r434</a><br><code>g117</code>代表菜系，<code>r434</code>代表区域，因此我们可以获取所有的菜系链接，接着在菜系链接的基础上获取菜系-区域链接，这就相当于在用浏览器浏览时，先选定了某一菜系，再选定某一区域。</p><h3 id="（二）分析页面结构"><a href="#（二）分析页面结构" class="headerlink" title="（二）分析页面结构"></a>（二）分析页面结构</h3><p>这里就是要通过定位来选定我们需要的元素。如一级菜系，它所处的位置是<code>id=&quot;classfy</code>的<code>div</code>标签下的<code>a</code>标签中。<br>商户标题，它所处的位置是<code>class=&quot;tit&quot;</code>的<code>div</code>标签下的第一个<code>a</code>标签中。通过一个个地查看，我们可以得出我们要爬取的7个商户信息的位置，方便我们后续设计爬虫时进行定位。</p><h2 id="三、设计爬虫"><a href="#三、设计爬虫" class="headerlink" title="三、设计爬虫"></a>三、设计爬虫</h2><h3 id="（一）爬虫思路"><a href="#（一）爬虫思路" class="headerlink" title="（一）爬虫思路"></a>（一）爬虫思路</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx1.sinaimg.cn/large/006XG4i7gy1fkpn3b1n9rj30fc0gpdgi.jpg" alt="爬虫流程图" title="">                </div>                <div class="image-caption">爬虫流程图</div>            </figure><ol><li>从<code>start_url</code>开始，爬取所有一级菜系链接，得到<code>tag1_url</code>，存入数据库。</li><li>从数据库中读取<code>tag1_url</code>，爬取所有二级菜系链接，得到<code>tag2_url</code>，存入数据库。</li><li>从数据库中读取<code>tag2_url</code>，爬取所有一级区域链接，得到<code>addr1_url</code>，存入数据库。</li><li>从数据库中读取<code>addr1_url</code>，爬取所有二级区域链接，得到<code>addr2_url</code>，存入数据库。</li><li>从数据库中读取<code>addr2_url</code>，爬取所有商户信息，得到<code>dpshop_msg</code>，存入数据库。<br>1-4目的都是一样，为了获取最终要爬取的页面链接，5就是为了实际爬取上述7个商户信息，所以我们把1-4写到<code>cate_parsing.py</code>文件中，把5写到<code>shop_parsing.py</code>文件中。另外，为了应对反爬虫，我们将用于伪装的<code>User-Agent</code>和<code>代理IP</code>等一些爬虫参数写到<code>config.py</code>文件中。<h3 id="（二）构建代码"><a href="#（二）构建代码" class="headerlink" title="（二）构建代码"></a>（二）构建代码</h3><code>config.py</code>代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">#coding=utf-8</div><div class="line"></div><div class="line"></div><div class="line">#伪装浏览器</div><div class="line">USER_AGENT = [</div><div class="line">    &apos;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)&apos;,</div><div class="line">    &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36&apos;,</div><div class="line">    &apos;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11&apos;,</div><div class="line">    &apos;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.133 Safari/534.16&apos;,</div><div class="line">    &apos;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0&apos;,</div><div class="line">    &apos;Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10&apos;</div><div class="line">    ]</div><div class="line"></div><div class="line"># 代理IP</div><div class="line">PROXY = [</div><div class="line">    &apos;111.13.111.184:80&apos;,</div><div class="line">    &apos;49.119.164.175:80&apos;,</div><div class="line">    &apos;61.136.163.245:3128&apos;,</div><div class="line">    &apos;116.199.2.210:80&apos;,</div><div class="line">    &apos;116.199.2.209:80&apos;,</div><div class="line">    &apos;116.199.115.79:80&apos;,</div><div class="line">    &apos;116.199.2.196:80&apos;,</div><div class="line">    &apos;121.40.199.105:80&apos;,</div><div class="line">    &apos;125.77.25.118:80&apos;,</div><div class="line">    &apos;122.228.253.55:808&apos;</div><div class="line">    ]</div><div class="line"></div><div class="line">TIMEOUT = 5</div><div class="line"></div><div class="line">LINKTIME = 3</div><div class="line"></div><div class="line">PAGE_NUM_MAX = 50</div></pre></td></tr></table></figure></li></ol><p><code>cate_parsing.py</code>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div></pre></td><td class="code"><pre><div class="line">#coding=utf-8</div><div class="line"></div><div class="line">import requests</div><div class="line">import random</div><div class="line">import pymongo</div><div class="line">import time</div><div class="line">from lxml import etree</div><div class="line">from config import USER_AGENT, PROXY, TIMEOUT, LINKTIME</div><div class="line"></div><div class="line">client = pymongo.MongoClient(&apos;localhost&apos;, 27017)</div><div class="line">dp = client[&apos;dp&apos;]</div><div class="line"></div><div class="line"></div><div class="line"># 爬取一级菜系、二级菜系、二级菜系下的一级地址</div><div class="line">class GetTagAddr(object):</div><div class="line">    headers = random.choice(USER_AGENT)</div><div class="line">    proxies = &#123;&apos;http&apos;:random.choice(PROXY)&#125;</div><div class="line">    s = requests.Session()</div><div class="line">    s.headers.update(&#123;&apos;User-Agent&apos;:headers&#125;)</div><div class="line">    linktime = LINKTIME</div><div class="line">    timeout = TIMEOUT</div><div class="line">    tag1_url_db = dp[&apos;tag1_url_db&apos;]             # 存储从start_url中成功爬取到的tag1_url</div><div class="line">    tag2_url_db = dp[&apos;tag2_url_db&apos;]                    # 存储从tag1_url中成功爬取到的tag2_url</div><div class="line">    crawly_tag1_ok = dp[&apos;crawly_tag1_ok&apos;]    # 存储爬取成功的tag1_url</div><div class="line">    addr1_url_db = dp[&apos;addr1_url_db&apos;]            # 存储从tag2_url中成功爬取到的addr1_url</div><div class="line">    crawly_tag2_ok = dp[&apos;crawly_tag2_ok&apos;]    # 存储爬取成功的tag2_url</div><div class="line">    addr2_url_db = dp[&apos;addr2_url_db&apos;]            # 存储从addr1_url中成功爬取到的addr2_url</div><div class="line">    crawly_addr1_ok = dp[&apos;crawly_addr1_ok&apos;]  # 存储爬取成功的addr1_url</div><div class="line"></div><div class="line"></div><div class="line">    def get_tag1_from(self, start_url):</div><div class="line">        try:</div><div class="line">            r = self.s.get(start_url, proxies=self.proxies, timeout=self.timeout)</div><div class="line">            tree = etree.HTML(r.text)</div><div class="line">            tag1_items = tree.xpath(&apos;//div[@id=&quot;classfy&quot;]/a&apos;)</div><div class="line">            for i in tag1_items:</div><div class="line">                tag1 = i.getchildren()[0].text</div><div class="line">                url = i.attrib[&apos;href&apos;]</div><div class="line">                tag1_url_msg = &#123;&apos;tag1&apos;: tag1, &apos;url&apos;: url, &apos;status&apos;: &apos;ok&apos;&#125;</div><div class="line">                self.tag1_url_db.insert_one(tag1_url_msg)</div><div class="line">            self.linktime = 3    # 重置linktime</div><div class="line">            time.sleep(1)</div><div class="line">        except(requests.exceptions.ProxyError, requests.exceptions.ConnectTimeout, requests.exceptions.ReadTimeout, requests.exceptions.ConnectionError):</div><div class="line">            if self.linktime &gt; 0:</div><div class="line">                print(&apos;爬取失败，现在重新链接&apos;)</div><div class="line">                self.get_tag1_from(start_url)</div><div class="line">                self.linktime -= 1</div><div class="line">            else:</div><div class="line">                print(&apos;&#123;&#125;爬取失败&apos;.format(start_url))</div><div class="line"></div><div class="line"></div><div class="line">    def get_tag2_from(self, tag1_url):</div><div class="line">        tag1_url_msg = self.tag1_url_db.find_one(&#123;&apos;url&apos;: tag1_url&#125;)</div><div class="line">        tag1 = tag1_url_msg[&apos;tag1&apos;]</div><div class="line">        try:</div><div class="line">            r = self.s.get(tag1_url, proxies=self.proxies, timeout=self.timeout)</div><div class="line">            tree = etree.HTML(r.text)</div><div class="line">            tag2_items = tree.xpath(&apos;//div[@id=&quot;classfy-sub&quot;]/a&apos;)</div><div class="line">            if len(tag2_items) == 0:</div><div class="line">                tag2 = &apos;no_sub&apos;</div><div class="line">                tag2_url_msg = &#123;&apos;tag1&apos;: tag1, &apos;tag2&apos;: tag2, &apos;url&apos;: tag1_url, &apos;status&apos;: &apos;tag1_not_sub&apos;&#125;</div><div class="line">                self.tag2_url_db.insert_one(tag2_url_msg)</div><div class="line">            else:</div><div class="line">                for i in tag2_items:</div><div class="line">                    tag2 = i.getchildren()[0].text</div><div class="line">                    url = i.attrib[&apos;href&apos;]</div><div class="line">                    tag2_url_msg = &#123;&apos;tag1&apos;: tag1, &apos;tag2&apos;: tag2, &apos;url&apos;: url, &apos;status&apos;: &apos;ok&apos;&#125;</div><div class="line">                    self.tag2_url_db.insert_one(tag2_url_msg)</div><div class="line">            self.crawly_tag1_ok.insert_one(&#123;&apos;url&apos;: tag1_url&#125;)</div><div class="line">            self.linktime = 3    # 重置linktime</div><div class="line">            time.sleep(1)</div><div class="line">        except(requests.exceptions.ProxyError, requests.exceptions.ConnectTimeout, requests.exceptions.ReadTimeout, requests.exceptions.ConnectionError):</div><div class="line">            if self.linktime &gt; 0:</div><div class="line">                print(&apos;爬取失败，现在重新链接&apos;)</div><div class="line">                self.get_tag2_from(tag1_url)</div><div class="line">                self.linktime -= 1</div><div class="line">            else:</div><div class="line">                print(&apos;&#123;&#125;爬取失败&apos;.format(tag1_url))</div><div class="line"></div><div class="line"></div><div class="line">    def get_addr1_from(self, tag2_url):</div><div class="line">        tag2_url_msg = self.tag2_url_db.find_one(&#123;&apos;url&apos;: tag2_url&#125;)</div><div class="line">        tag1 = tag2_url_msg[&apos;tag1&apos;]</div><div class="line">        tag2 = tag2_url_msg[&apos;tag2&apos;]</div><div class="line">        try:</div><div class="line">            r = self.s.get(tag2_url, proxies=self.proxies, timeout=self.timeout)</div><div class="line">            tree = etree.HTML(r.text)</div><div class="line">            addr1_items = tree.xpath(&apos;//div[@id=&quot;region-nav&quot;]/a&apos;)</div><div class="line">            for i in addr1_items:</div><div class="line">                addr1 = i.getchildren()[0].text</div><div class="line">                url = i.attrib[&apos;href&apos;]</div><div class="line">                addr1_url_msg = &#123;&apos;tag1&apos;: tag1, &apos;tag2&apos;: tag2, &apos;addr1&apos;: addr1, &apos;url&apos;: url&#125;</div><div class="line">                self.addr1_url_db.insert_one(addr1_url_msg)</div><div class="line">            self.crawly_tag2_ok.insert_one(&#123;&apos;url&apos;: tag2_url&#125;)</div><div class="line">            self.linktime = 3  # 重置linktime</div><div class="line">            time.sleep(1)</div><div class="line">        except(requests.exceptions.ProxyError, requests.exceptions.ConnectTimeout, requests.exceptions.ReadTimeout,</div><div class="line">               requests.exceptions.ConnectionError):</div><div class="line">            if self.linktime &gt; 0:</div><div class="line">                print(&apos;爬取失败，现在重新链接&apos;)</div><div class="line">                self.get_addr1_from(tag2_url)</div><div class="line">                self.linktime -= 1</div><div class="line">            else:</div><div class="line">                print(&apos;&#123;&#125;爬取失败&apos;.format(tag2_url))</div><div class="line"></div><div class="line"></div><div class="line">    def get_addr2_from(self, addr1_url):</div><div class="line">        addr1_url_msg = self.addr1_url_db.find_one(&#123;&apos;url&apos;: addr1_url&#125;)</div><div class="line">        tag1 = addr1_url_msg[&apos;tag1&apos;]</div><div class="line">        tag2 = addr1_url_msg[&apos;tag2&apos;]</div><div class="line">        addr1 = addr1_url_msg[&apos;addr1&apos;]</div><div class="line">        try:</div><div class="line">            r = self.s.get(addr1_url, proxies=self.proxies, timeout=self.timeout)</div><div class="line">            tree = etree.HTML(r.text)</div><div class="line">            addr2_items = tree.xpath(&apos;//div[@id=&quot;region-nav-sub&quot;]/a&apos;)</div><div class="line">            if len(addr2_items) == 0:</div><div class="line">                addr2 = &apos;no_sub&apos;</div><div class="line">                addr2_url_msg = &#123;&apos;tag1&apos;: tag1, &apos;tag2&apos;: tag2, &apos;addr1&apos;: addr1, &apos;addr2&apos;: addr2, &apos;url&apos;: addr1_url, &apos;status&apos;: &apos;addr1_not_sub&apos;&#125;</div><div class="line">                self.addr2_url_db.insert_one(addr2_url_msg)</div><div class="line">            else:</div><div class="line">                for i in addr2_items:</div><div class="line">                    addr2 = i.getchildren()[0].text</div><div class="line">                    url = i.attrib[&apos;href&apos;]</div><div class="line">                    addr2_url_msg = &#123;&apos;tag1&apos;:tag1, &apos;tag2&apos;: tag2, &apos;addr1&apos;:addr1, &apos;addr2&apos;: addr2, &apos;url&apos;:url&#125;</div><div class="line">                    self.addr2_url_db.insert_one(addr2_url_msg)</div><div class="line">            self.crawly_addr1_ok.insert_one(&#123;&apos;url&apos;: addr1_url&#125;)</div><div class="line">            self.linktime = 3  # 重置linktime</div><div class="line">            time.sleep(1)</div><div class="line">        except(</div><div class="line">        requests.exceptions.ProxyError, requests.exceptions.ConnectTimeout, requests.exceptions.ReadTimeout,</div><div class="line">        requests.exceptions.ConnectionError):</div><div class="line">            if self.linktime &gt; 0:</div><div class="line">                print(&apos;爬取失败，现在重新链接&apos;)</div><div class="line">                self.get_addr2_from(addr1_url)</div><div class="line">                self.linktime -= 1</div><div class="line">            else:</div><div class="line">                print(&apos;&#123;&#125;爬取失败&apos;.format(addr1_url))</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    url = &apos;http://www.dianping.com/search/category/219/10/g0r0&apos;</div></pre></td></tr></table></figure></p><p><code>get_tag1_from</code>, <code>get_tag2_from</code>, <code>get_addr1_from</code>和<code>get_addr2_from</code>都采用了同样的逻辑：</p><ol><li>先请求url，获得response。</li><li>使用<code>etree.HTML</code>解析网页。</li><li>定位所要爬取元素的位置。</li><li>存储。</li></ol><p><code>shop_parsing.py</code>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line">#coding=utf-8</div><div class="line"></div><div class="line">import requests</div><div class="line">import random</div><div class="line">import pymongo</div><div class="line">import time</div><div class="line">from lxml import etree</div><div class="line">from config import USER_AGENT, PROXY, TIMEOUT, LINKTIME, PAGE_NUM_MAX</div><div class="line"></div><div class="line"></div><div class="line">client = pymongo.MongoClient(&apos;localhost&apos;, 27017)</div><div class="line">dp = client[&apos;dp&apos;]</div><div class="line">addr2_url_db = dp[&apos;addr2_url_db&apos;]  # 存储从addr1_url中成功爬取到的addr2_url</div><div class="line">dpshop = dp[&apos;dpshop&apos;]  # 存储从addr2中成功爬取到的dpshop_msg</div><div class="line">crawly_addr2_ok = dp[&apos;crawly_addr2_ok&apos;]  # 存储爬取成功的addr2_url</div><div class="line"></div><div class="line"></div><div class="line"># def callback(future):</div><div class="line">#     response, addr2_url = future.result()</div><div class="line">#     get_msg_from(response, addr2_url)</div><div class="line"></div><div class="line"></div><div class="line">def get_msg_from(response, addr2_url):</div><div class="line">    addr2_url_msg = addr2_url_db.find_one(&#123;&apos;url&apos;: addr2_url&#125;)</div><div class="line">    tag1 = addr2_url_msg[&apos;tag1&apos;]</div><div class="line">    tag2 = addr2_url_msg[&apos;tag2&apos;]</div><div class="line">    addr1 = addr2_url_msg[&apos;addr1&apos;]</div><div class="line">    addr2 = addr2_url_msg[&apos;addr2&apos;]</div><div class="line">    tree = etree.HTML(response.text)</div><div class="line">    # 提取标题信息</div><div class="line">    title_items = tree.xpath(&apos;//div[@id=&quot;shop-all-list&quot;]//div[@class=&quot;tit&quot;]/a[1]&apos;)</div><div class="line"></div><div class="line">    # 提取商户星级</div><div class="line">    star_items = tree.xpath(&apos;//div[@class=&quot;comment&quot;]/span&apos;)</div><div class="line"></div><div class="line">    # 提取评论数-人均价格</div><div class="line">    review_price_items = tree.xpath(&apos;//div[@class=&quot;comment&quot;]/a&apos;)</div><div class="line">    review_price_list = []</div><div class="line">    for i in review_price_items:</div><div class="line">        # 判断评论数-价格的a标签是否存在子元素，如果存在，则在子元素中提取评论数-价格，否则评论数-价格都为“None”</div><div class="line">        if i.getchildren():</div><div class="line">            text = i.getchildren()[0].text</div><div class="line">            review_price_list.append(text)</div><div class="line">        else:</div><div class="line">            review_price_list.append(&quot;None&quot;)</div><div class="line">    review_price_list = [review_price_list[i:i + 2] for i in range(0, len(review_price_list), 2)]</div><div class="line"></div><div class="line">    # 提取各项评分</div><div class="line">    score_items = tree.xpath(&apos;//span[@class=&quot;comment-list&quot;]/span/b&apos;)</div><div class="line">    score_items = [i.text for i in score_items]</div><div class="line">    score_items = [score_items[i:i + 3] for i in range(0, len(score_items), 3)]</div><div class="line"></div><div class="line">    # 提取菜系-商区-详细地址</div><div class="line">    tag_items = tree.xpath(&apos;//div[@class=&quot;tag-addr&quot;]//span&apos;)</div><div class="line">    tag_items = [i.text for i in tag_items]</div><div class="line">    tag_items = [tag_items[i:i + 3] for i in range(0, len(tag_items), 3)]</div><div class="line"></div><div class="line">    for title_url, star, review_price, score, tag_area_addr in zip(title_items, star_items, review_price_list,</div><div class="line">                                                                   score_items, tag_items):</div><div class="line">        dpshop_msg = &#123;</div><div class="line">            &apos;title&apos;: title_url.attrib[&apos;title&apos;],</div><div class="line">            &apos;url&apos;: title_url.attrib[&apos;href&apos;],</div><div class="line">            &apos;star&apos;: star.attrib[&apos;title&apos;],</div><div class="line">            &apos;review&apos;: review_price[0],</div><div class="line">            &apos;price&apos;: review_price[1],</div><div class="line">            &apos;taste&apos;: score[0],</div><div class="line">            &apos;env&apos;: score[1],</div><div class="line">            &apos;service&apos;: score[2],</div><div class="line">            &apos;tag1&apos;: tag1,</div><div class="line">            &apos;tag2&apos;: tag2,</div><div class="line">            &apos;addr1&apos;: addr1,</div><div class="line">            &apos;addr2&apos;: addr2,</div><div class="line">            &apos;full_addr&apos;: tag_area_addr[2]</div><div class="line">        &#125;</div><div class="line">        dpshop.insert_one(dpshop_msg)</div><div class="line">    crawly_addr2_ok.insert_one(&#123;&apos;url&apos;: addr2_url&#125;)</div><div class="line"></div><div class="line"></div><div class="line">def get_all_msg_from(addr2_url):</div><div class="line">    for page in range(1, PAGE_NUM_MAX+1):</div><div class="line">        result_url = &apos;&#123;&#125;p&#123;&#125;&apos;.format(addr2_url, page)</div><div class="line">        status_code, response = requests_url(result_url)</div><div class="line">        if status_code == &apos;link_bad&apos;:</div><div class="line">            print(&apos;请求失败，请在crawly_addr2_url_bad中查看请求失败url&apos;)</div><div class="line">            break</div><div class="line">        elif status_code == 404:</div><div class="line">            # addr2_bad = &#123;&apos;url&apos;: result_url, &apos;status&apos;: 404&#125;</div><div class="line">            print(&apos;&#123;&#125;没有相关商户&apos;.format(result_url))</div><div class="line">            break</div><div class="line">        else:</div><div class="line">            get_msg_from(response, addr2_url)</div><div class="line"></div><div class="line"></div><div class="line">def requests_url(result_url, linktime=LINKTIME):</div><div class="line">    s = requests.Session()</div><div class="line">    headers = random.choice(USER_AGENT)</div><div class="line">    s.headers.update(&#123;&apos;User-Agent&apos;: headers&#125;)</div><div class="line">    proxies = &#123;&apos;http&apos;:random.choice(PROXY)&#125;</div><div class="line">    try:</div><div class="line">        r = s.get(result_url, proxies=proxies, timeout=TIMEOUT)</div><div class="line">        time.sleep(1)</div><div class="line">        return (r.status_code, r)</div><div class="line">    except(requests.exceptions.ProxyError, requests.exceptions.ConnectTimeout, requests.exceptions.ReadTimeout,</div><div class="line">           requests.exceptions.ConnectionError):</div><div class="line">        if linktime &gt; 0:</div><div class="line">            print(&apos;请求失败，现在重新链接&apos;)</div><div class="line">            linktime -= 1</div><div class="line">            requests_url(result_url, linktime)</div><div class="line">        else:</div><div class="line">            status_code = &apos;link_bad&apos;</div><div class="line">            response = None</div><div class="line">            return (status_code, response)</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    addr2_url = &apos;http://www.dianping.com/search/category/219/10/g217r27028p3&apos;</div></pre></td></tr></table></figure></p><ol><li><code>requests_url</code>函数用于请求网页，并返回状态码和response。</li><li><code>get_msg_from</code>函数用于解析源代码，定位元素，爬取并存储所有我们需要的商户信息。</li><li><code>get_all_msg_from</code>函数实现了多页码爬取，当遇到网页状态码为<code>404</code>时，代表此时没有相关商户，最后一页已经被爬取，自动跳出for循环。结束某个addr2_url的爬取。</li></ol><p><code>run.py</code>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"># coding=utf-8</div><div class="line"></div><div class="line">from parsing.cate_parsing import GetTagAddr</div><div class="line">from parsing.shop_parsing import get_all_msg_from, crawly_addr2_ok</div><div class="line">from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    start_url = &apos;http://www.dianping.com/search/category/219/10/g0r0&apos;</div><div class="line">    tag_addr_task = GetTagAddr()</div><div class="line"></div><div class="line">    # 爬取tag1_url</div><div class="line">    tag_addr_task.get_tag1_from(start_url)</div><div class="line">    print(&apos;tag1_url爬取完成&apos;)</div><div class="line"></div><div class="line">    # 爬取tag2_url</div><div class="line">    tag1_wait = set(i[&apos;url&apos;] for i in tag_addr_task.tag1_url_db.find())</div><div class="line">    tag1_ok = set(i[&apos;url&apos;] for i in tag_addr_task.crawly_tag1_ok.find())</div><div class="line">    tag1_task = tag1_wait - tag1_ok</div><div class="line">    for tag1_url in tag1_task:</div><div class="line">        tag_addr_task.get_tag2_from(tag1_url)</div><div class="line">    print(&apos;tag2_url爬取完成&apos;)</div><div class="line"></div><div class="line">    # 爬取addr1_url</div><div class="line">    tag2_wait = set(i[&apos;url&apos;] for i in tag_addr_task.tag2_url_db.find())</div><div class="line">    tag2_ok = set(i[&apos;url&apos;] for i in tag_addr_task.crawly_tag2_ok.find())</div><div class="line">    tag2_task = tag2_wait - tag2_ok</div><div class="line">    for tag2_url in tag2_task:</div><div class="line">        tag_addr_task.get_addr1_from(tag2_url)</div><div class="line">    print(&apos;addr1_url爬取完成&apos;)</div><div class="line"></div><div class="line">    # 爬取addr2_url</div><div class="line">    addr1_wait = set(i[&apos;url&apos;] for i in tag_addr_task.addr1_url_db.find())</div><div class="line">    addr1_ok = set(i[&apos;url&apos;] for i in tag_addr_task.crawly_addr1_ok.find())</div><div class="line">    addr1_task = addr1_wait - addr1_ok</div><div class="line">    with ProcessPoolExecutor(max_workers=4) as executor:</div><div class="line">        executor.map(tag_addr_task.get_addr2_from, addr1_task)</div><div class="line">    print(&apos;addr2_url爬取完成&apos;)</div><div class="line"></div><div class="line">    # 根据addr2_url爬取商户信息</div><div class="line">    addr2_wait = set(i[&apos;url&apos;] for i in tag_addr_task.addr2_url_db.find())</div><div class="line">    addr2_ok = set(i[&apos;url&apos;] for i in crawly_addr2_ok.find())</div><div class="line">    addr2_task = addr2_wait - addr2_ok</div><div class="line">    with ThreadPoolExecutor(max_workers=8) as executor:</div><div class="line">        for url in addr2_task:</div><div class="line">            v = executor.submit(get_all_msg_from, url)</div><div class="line">        executor.shutdown(wait=True)</div><div class="line">            # executor.map(get_all_msg_from, addr2_task, chunksize=50)</div><div class="line">    print(&apos;addr2_url_reslut_url爬取完成&apos;)</div></pre></td></tr></table></figure></p><ol><li>爬取<code>addr2_url</code>采用多进程爬取，多进程通过<code>concurrent.futures.ProcessPoolExecutor</code>实现。</li><li>爬取<code>dpshop_msg</code>采用了多线程爬取，多线程通过<code>congurrent.futures.ThreadPoolExecutor</code>实现。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;构建爬取大众点评美食数据的多进程爬虫（一）&quot;&gt;&lt;a href=&quot;#构建爬取大众点评美食数据的多进程爬虫（一）&quot; class=&quot;headerlink&quot; title=&quot;构建爬取大众点评美食数据的多进程爬虫（一）&quot;&gt;&lt;/a&gt;构建爬取大众点评美食数据的多进程爬虫（一）&lt;/
      
    
    </summary>
    
    
      <category term="Python爬虫" scheme="https://richardrw.github.io/tags/Python%E7%88%AC%E8%99%AB/"/>
    
      <category term="多进程" scheme="https://richardrw.github.io/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="大众点评" scheme="https://richardrw.github.io/tags/%E5%A4%A7%E4%BC%97%E7%82%B9%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>从美食的角度看东莞（数据来源：大众点评）</title>
    <link href="https://richardrw.github.io/2017/10/20/%E4%BB%8E%E7%BE%8E%E9%A3%9F%E7%9A%84%E8%A7%92%E5%BA%A6%E7%9C%8B%E4%B8%9C%E8%8E%9E%EF%BC%88%E6%95%B0%E6%8D%AE%E6%9D%A5%E6%BA%90%EF%BC%9A%E5%A4%A7%E4%BC%97%E7%82%B9%E8%AF%84%EF%BC%89/"/>
    <id>https://richardrw.github.io/2017/10/20/从美食的角度看东莞（数据来源：大众点评）/</id>
    <published>2017-10-20T13:35:45.000Z</published>
    <updated>2017-10-21T02:59:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从美食的角度看东莞（数据来源：大众点评）"><a href="#从美食的角度看东莞（数据来源：大众点评）" class="headerlink" title="从美食的角度看东莞（数据来源：大众点评）"></a>从美食的角度看东莞（数据来源：大众点评）</h1><p>先从为什么要做这个项目说起，事情的缘由是这样的，小编当时跟领导到别的城市外出出差一个星期，作为一个平时很少外出的人，别说是别的城市了，就连东莞这个地方我都还没走遍过，尤其是那些重要商区、美食店，平时跟朋友出去玩，都很尴尬不知道要吃什么好。现在跟领导外出别的城市，感觉自己是个刚出大山的农村小伙子，对外面的世界所知甚少。作为领导的助手，自然就要安排好这一星期的就餐地点。然而这就很难为我了，我连东莞有什么地方有好吃的都不知道，现在居然要我在别的城市安排一个星期的就餐作息表？这就很尴尬了。于是我每天都苦于到大众点评、美团等APP上搜索附近美食，但是还是不知道那些餐店的真实情况怎样，环境如何，味道如何。于是此时我就想，如果能一下子就知道某个城市或者某个区中最受欢迎的店有哪些，哪个镇或者哪个区最繁华，那该多好。<br>于是小编回来后就开始构思，接着就撸起袖子加油干，爬取了大众点评上1.5w多条数据，并做了个东莞美食商户数量热力图，从美食的角度看东莞。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx3.sinaimg.cn/large/006XG4i7gy1fkpnbkccanj30xc0m8myo.jpg" alt="东莞各镇街美食商户数量分布热力图" title="">                </div>                <div class="image-caption">东莞各镇街美食商户数量分布热力图</div>            </figure><br>（因为图片大小问题，莞城、洪梅和大岭山的标签没有显示出来，要解决这个问题，可以找张大点的图制作SVG）</p><p><a href="https://code.hcharts.cn/temp/MYNjyG/share" target="_blank" rel="external">东莞各镇街美食商户数量分布热力图-动态</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx2.sinaimg.cn/large/006XG4i7gy1fkp14l3pqrj311v0dnmxs.jpg" alt="东莞各镇街美食商户数量柱状图" title="">                </div>                <div class="image-caption">东莞各镇街美食商户数量柱状图</div>            </figure><p>可以看出，东城区商户数量最多，其次是南城区，从热力图来看，也可以看出东莞哪个镇街最繁华，也可以初步判断出哪些镇街经济情况比较好。因为一般经济越好的地区，其商业越繁华越发达。为了验证这个猜想，小编查了下东莞2016年各镇街经济实力排名情况<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx2.sinaimg.cn/large/006XG4i7gy1fkp14l6t1ij309k0l3ab8.jpg" alt="东莞各镇街2017年经济实力排名情况" title="">                </div>                <div class="image-caption">东莞各镇街2017年经济实力排名情况</div>            </figure><br>可以看出，经济实力与地区商户数量基本成正相关。这里说一个特例吧，那就是松山湖。本地人可能知道原因，那就是因为松山湖建立历史比较年轻，区域布局比较先进，目前仅有万科（好像是）这个大型商场，其他就以大学、高新技术产业区以及青山绿水为主，没有一脑子就开发许多商业区，所以就出现了这个经济实力与地区美食商户数量不匹配的情况。<br>接下来看看各星级商户占比情况如何<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx3.sinaimg.cn/large/006XG4i7gy1fkp14l3hpyj30sn0bb0t4.jpg" alt="东莞不同星级商户占比饼状图" title="">                </div>                <div class="image-caption">东莞不同星级商户占比饼状图</div>            </figure><br>准四星用户占73.98%，看来东莞的饮食服务业还是可以的（毕竟是广东啊哈哈）<br>再看看东莞各菜系商户数量情况如何<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx1.sinaimg.cn/large/006XG4i7gy1fkp14l2dofj311y0cvgm1.jpg" alt="东莞各菜系商户数量柱状图" title="">                </div>                <div class="image-caption">东莞各菜系商户数量柱状图</div>            </figure><br>小吃快餐最多，其次是面包甜点。小吃快餐最多的原因小编猜测可能有三：</p><ol><li>大多数公司中的员工中午都在公司叫外卖，外卖以小吃快餐为主，需求较大，由此催生出一批小吃快餐店，以满足市场需求。</li><li>开小吃快餐店的成本比较低，像沙县小吃什么的快餐店，随便会做个番茄炒蛋饭青瓜肉片饭就能开个快餐店了（哈哈），比面包甜点、西餐的开店成本低。</li><li>大多数小吃快餐店都选择加入大众点评平台，以提高销售量，增加利润。</li></ol><p>至于面包甜点有3155家，这让小编感到意外，没想到东莞居然有这么多面包店。<br>好了，暂时就分析到这里，小编最爱吃的就是面包了，赶紧去看看里面有哪些面包店的，一定要去尝尝。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;从美食的角度看东莞（数据来源：大众点评）&quot;&gt;&lt;a href=&quot;#从美食的角度看东莞（数据来源：大众点评）&quot; class=&quot;headerlink&quot; title=&quot;从美食的角度看东莞（数据来源：大众点评）&quot;&gt;&lt;/a&gt;从美食的角度看东莞（数据来源：大众点评）&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="数据分析" scheme="https://richardrw.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="美食" scheme="https://richardrw.github.io/tags/%E7%BE%8E%E9%A3%9F/"/>
    
      <category term="东莞" scheme="https://richardrw.github.io/tags/%E4%B8%9C%E8%8E%9E/"/>
    
  </entry>
  
  <entry>
    <title>年轻人是否到北上广深发展的博弈论分析</title>
    <link href="https://richardrw.github.io/2017/09/25/%E5%B9%B4%E8%BD%BB%E4%BA%BA%E6%98%AF%E5%90%A6%E5%BA%94%E8%AF%A5%E5%88%B0%E5%8C%97%E4%B8%8A%E5%B9%BF%E6%B7%B1%E5%8F%91%E5%B1%95%E7%9A%84%E5%8D%9A%E5%BC%88%E8%AE%BA%E5%88%86%E6%9E%90/"/>
    <id>https://richardrw.github.io/2017/09/25/年轻人是否应该到北上广深发展的博弈论分析/</id>
    <published>2017-09-25T14:05:11.000Z</published>
    <updated>2017-10-07T08:57:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、思考背景"><a href="#一、思考背景" class="headerlink" title="一、思考背景"></a>一、思考背景</h1><p>有人说，当你在一个岗位上工作时间超过1年的时候，你就会不自觉地思考，思考诸如你当前工作的意义是什么、这个岗位是否真的适合你等这些“终极问题”。博主现在已经毕业一年零三个月，实际工作时间已有一年零九个月，在这时间点上，大脑变的不自主地思考起一些关于人生的是非对错问题。引发博主思考这个问题的背景主要有三：</p><ol><li>曾为大学毕业生，也曾思考过到北上广深发展还是留守本地，驻地生根的问题。</li><li>身边有人说，到北上广深发展，只能当炮灰。在沉重的生活成本下，即使工资比二三线城市高，但是实际生活质量却不比二三线城市好，甚至更差。去了只能压榨自己，使自己成为一线城市的“蜡烛”，照亮了别人（成就了上层人士），燃烧了自己（折旧了自己）。</li><li>身边也有人说，到北上广深发展，机会更大。留在本地（二三线城市），固然稳定，生活压力也没那么大，但是一辈子都不会有什么变数，一生只能按现在的状态生活下去，极难遇到让自己人生变得更加美好的变数（机遇）。<br>到底谁说的对，谁说的错，是该往北上广深发展，还是驻地生根。不同的人在做这个决定的时候，他考量的是什么，决策依据是什么，决策背后的理论根据又是什么。此时慢慢地、慢慢地，博主想通过博弈论的角度，看能不能分析出什么，想知道，思考的结果又能不能为博主指明前往更美好生活的方向。</li></ol><hr><p>写着写着发现，这题目太过严肃认真了，提不起兴趣来写，姑且就先来吹吹水吧。<br>想必大家如果留意生活想象的话，应该不难发现这些现象：在足球比赛中，说说国足吧，一开始总是让人觉得放不开来打，等到落后比分的时候才奋力直追放开来打。在帆船比赛中，落后的选手总是不会老老实实地跟着领航者的路线，而是另谋航线以求超越。在LOL等电子竞技赛中，劣势的一方总是希望通过大龙来抢夺来争取一线赢机。为什么人们在处于劣势环境的情况下，总是追求那些很不稳定的方法呢？例如在篮球足球比赛中，落后一方总是采取多冒险的策略，去搞小动作去犯规。下面我们就来用数学先分析一下。我们假设在一场篮球比赛中，比赛的结果由比赛双方的能力和运气一起决定，你的取胜条件需满足：</p><pre><code>你的能力 + 你的运气 &gt; 对手的能力 + 对手的运气</code></pre><p>或者</p><pre><code>你的运气 - 对手的运气 &gt; 你的能力 - 对手的能力        L          &gt;         S</code></pre><p>在一场比赛中，你的能力、对手的能力基本是已经确定的，因为你不会像《龙珠》里的赛亚人那样，打着打着就变身为超级赛亚人提升战斗力，因此我们不妨将<strong> “你的能力 - 对手的能力” </strong>的差值S视为一确定的系数。那么剩下来，影响比赛结果的就是<strong> “你的运气 - 对手的运气“ 的差值L能否大于S </strong>。</p><p>假设对手的能力比你强，你处于劣势，此时S&gt;0，为正值。你要获胜，就必须使得“你的运气 - 对手的运气”的差值L大于S，即当且仅当L&gt;S，你才能获胜。那么我们要如何使得L&gt;S呢？运气这种东西，是我们能够控制的吗？</p><p>我们不妨从数学的角度来看“你的运气 - 对手的运气”的差值L。因为你的运气和对手的运气都是不确定的，必然，“你的运气 - 对手的运气”的差值L也是不确定的，即L的值存在概率性，因此不妨假设L的概率分布是正态曲线（如下图中的实线曲线）。横轴x的任意点，代表L可能的取值，其到曲线上的高y值代表L取某值时对应的概率，因此曲线在两点间覆盖的面积等于L取值位于这两点间的概率。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/Snip20171007_1.png" alt="L取值概率分布图" title="">                </div>                <div class="image-caption">L取值概率分布图</div>            </figure><br>由图可见，你取胜的概率为图中网格的阴影面积，即对于所有L可能的取值，满足L&gt;S的取值的概率之和。<br>到这里，我们已经知道“你的运气 - 对手的运气”的数学上的意义了。那么回到我们之前的问题：运气这种东西，是我们能够控制的吗？</p><p>答案是可以的。或许从感性理解上，这会很不可思议，但是从数学的角度看，改变运气，就是让你改变“你的运气”的概率分布，使得“你的运气 - 对手的运气”大于S变得更加可能。那么我们需要怎么做呢？还是先从数学角度看。让“你的运气 - 对手的运气”的值大于S变得更加可能，也就是让你增大图中的网格阴影面积。</p><p>问：怎么增大？<br>答：让正态曲线更加平坦即可。（如变成上图中的阴线曲线）</p><p>曲线变得更平坦后，由图可见，L&gt;S的面积增加了斜线阴影部分，也就是说L&gt;S的概率更大了。在这种情况下，你获胜的概率也就提升了。</p><p>曲线变得更平坦，意味着L的取值更具不确定性。在实际生活中，你一般只需采取更冒险、更激进的策略就能达到让“你的运气”的概率分布曲线变得更加平台的效果。就如篮球比赛中，对方实力比你强，你处于落后状态，这时，如果你陈规蹈矩，按部就班，那么你是很难有反超的机会的，因为你只能依靠进攻得分，而那些博犯规罚球得分等“非正常”得分你就很少有机会碰到，因为你打得很稳。相反，如果你采取冒险、更加激进的策略，你活得博犯规罚球得分的机会就会变大，得分机会变大，也就意味着你反超的机会变大。</p><p>因此，如果你面对一个比你强大的对手，而你又处于劣势状态，那么你就需要采取一些冒险的策略来打破这种“对手比你厉害，你处于劣势“的稳定状态，从而提高你的胜率。</p><p>回到标题中的问题，答案可以从上述中得出总结，只不过在这个比赛中，对手可能不是别人，而可能是你自己，或者整个大环境。你此时需要衡量一下自己的处境，自己能力对于大环境来说，是强是弱，自己的处境是劣势还是优势，在根据综合判断，看是否需要采取一些冒险的策略来打破平衡、打破稳定，提高自己的胜率。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、思考背景&quot;&gt;&lt;a href=&quot;#一、思考背景&quot; class=&quot;headerlink&quot; title=&quot;一、思考背景&quot;&gt;&lt;/a&gt;一、思考背景&lt;/h1&gt;&lt;p&gt;有人说，当你在一个岗位上工作时间超过1年的时候，你就会不自觉地思考，思考诸如你当前工作的意义是什么、这个岗位
      
    
    </summary>
    
    
      <category term="博弈论" scheme="https://richardrw.github.io/tags/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
    
      <category term="稳定性" scheme="https://richardrw.github.io/tags/%E7%A8%B3%E5%AE%9A%E6%80%A7/"/>
    
      <category term="风险" scheme="https://richardrw.github.io/tags/%E9%A3%8E%E9%99%A9/"/>
    
      <category term="均衡" scheme="https://richardrw.github.io/tags/%E5%9D%87%E8%A1%A1/"/>
    
      <category term="北上广深" scheme="https://richardrw.github.io/tags/%E5%8C%97%E4%B8%8A%E5%B9%BF%E6%B7%B1/"/>
    
  </entry>
  
  <entry>
    <title>sublime如何添加python3版本以及中文乱码问题</title>
    <link href="https://richardrw.github.io/2017/09/24/sublime%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0python3%E7%89%88%E6%9C%AC%E4%BB%A5%E5%8F%8A%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>https://richardrw.github.io/2017/09/24/sublime如何添加python3版本以及中文乱码问题/</id>
    <published>2017-09-23T16:05:05.000Z</published>
    <updated>2017-09-24T01:22:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、当同时安装了python2和python3时，如何让sublime-text同时支持？"><a href="#一、当同时安装了python2和python3时，如何让sublime-text同时支持？" class="headerlink" title="一、当同时安装了python2和python3时，如何让sublime text同时支持？"></a>一、当同时安装了python2和python3时，如何让sublime text同时支持？</h1><ol><li><p>在sublime text中选择Toos—&gt;Build System—&gt;New Build System，此时会创建一个新文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"> &quot;shell_cmd&quot;: &quot;make&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>将原有内容删除，把以下内容复制进去：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;cmd&quot;: [&quot;/Library/Frameworks/Python.framework/Versions/3.6/bin/python3&quot;, &quot;-u&quot;, &quot;$file&quot;],</div><div class="line">    &quot;file_regex&quot;: &quot;^[ ]*File \&quot;(...*?)\&quot;, line ([0-9]*)&quot;,</div><div class="line">    &quot;selector&quot;: &quot;source.python&quot;,</div><div class="line">    &quot;env&quot;: &#123;&quot;LANG&quot;: &quot;en_US.UTF-8&quot;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>注意：</strong> <code>/Library/Frameworks/Python.framework/Versions/3.6/bin/python3</code>为你安装python3的路径</p></li><li>查看你python2或python3的路径方法。在终端／cmd下执行    <code>which python</code>获取python2路径，执行<code>which python3</code>获取python3路径，复制替换<code>&quot;cmd&quot;</code>中python的路径即可。</li><li><code>&quot;env&quot;: {&quot;LANG&quot;: &quot;en_US.UTF-8&quot;</code>的作用是为了正常地显示中文</li><li>将文件保存为<code>Python3.sublime-build</code>，路径为sublime安装目录下的<code>Packages</code>文件夹</li></ol><h1 id="二、使用ConvertToUTF8解决中文乱码"><a href="#二、使用ConvertToUTF8解决中文乱码" class="headerlink" title="二、使用ConvertToUTF8解决中文乱码"></a>二、使用ConvertToUTF8解决中文乱码</h1><ol><li>使用Ctrl+Shift+P打开Package Control，输入install package按回车，再搜索ConvertToUTF8来安装插件</li><li>安装完后再次使用Ctrl+Shift+P打开Package Control，这次输入ConvertToUTF8，回车，再选择UTF-8编码即可。这样就会以utf-8的编码格式编辑文件。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、当同时安装了python2和python3时，如何让sublime-text同时支持？&quot;&gt;&lt;a href=&quot;#一、当同时安装了python2和python3时，如何让sublime-text同时支持？&quot; class=&quot;headerlink&quot; title=&quot;一、
      
    
    </summary>
    
    
      <category term="sublime" scheme="https://richardrw.github.io/tags/sublime/"/>
    
      <category term="python" scheme="https://richardrw.github.io/tags/python/"/>
    
      <category term="utf-8" scheme="https://richardrw.github.io/tags/utf-8/"/>
    
  </entry>
  
  <entry>
    <title>test_my_site</title>
    <link href="https://richardrw.github.io/2017/09/16/test-my-site/"/>
    <id>https://richardrw.github.io/2017/09/16/test-my-site/</id>
    <published>2017-09-16T07:23:04.000Z</published>
    <updated>2017-09-16T07:23:04.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://richardrw.github.io/2017/09/16/hello-world/"/>
    <id>https://richardrw.github.io/2017/09/16/hello-world/</id>
    <published>2017-09-16T07:08:10.000Z</published>
    <updated>2017-09-16T07:08:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
